// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommunicationData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommunicationData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace messages {
class PairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pair> {
} _Pair_default_instance_;
class ErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Error> {
} _Error_default_instance_;
class UserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<User> {
} _User_default_instance_;
class InfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Info> {
} _Info_default_instance_;
class LoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginReq> {
} _LoginReq_default_instance_;
class LoginRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginResp> {
} _LoginResp_default_instance_;
class ChatReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatReq> {
} _ChatReq_default_instance_;
class ChatRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatResp> {
} _ChatResp_default_instance_;
class GetInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetInfoReq> {
} _GetInfoReq_default_instance_;
class GetInfoRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetInfoResp> {
} _GetInfoResp_default_instance_;
class GetMultiInfosReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMultiInfosReq> {
} _GetMultiInfosReq_default_instance_;
class GetMultiInfosRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMultiInfosResp> {
} _GetMultiInfosResp_default_instance_;
class LogoutReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogoutReq> {
} _LogoutReq_default_instance_;
class LogoutRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogoutResp> {
} _LogoutResp_default_instance_;
class InitLoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitLoginReq> {
} _InitLoginReq_default_instance_;
class InitLoginRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitLoginResp> {
} _InitLoginResp_default_instance_;
class Service_ReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Service_Req> {
} _Service_Req_default_instance_;
class Service_RespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Service_Resp> {
} _Service_Resp_default_instance_;
class ReqEQ1UserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqEQ1User> {
} _ReqEQ1User_default_instance_;
class RespEQ1UserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RespEQ1User> {
} _RespEQ1User_default_instance_;
class Ex1QueryUserStatusReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ex1QueryUserStatusReq> {
} _Ex1QueryUserStatusReq_default_instance_;
class Ex1QueryUserStatusRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ex1QueryUserStatusResp> {
} _Ex1QueryUserStatusResp_default_instance_;
class RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request> {
} _Request_default_instance_;
class ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response> {
} _Response_default_instance_;
class NewMessageNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewMessageNotify> {
} _NewMessageNotify_default_instance_;
class ReLoginNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReLoginNotify> {
} _ReLoginNotify_default_instance_;
class ReConnectNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReConnectNotify> {
} _ReConnectNotify_default_instance_;
class NotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Notify> {
} _Notify_default_instance_;
class AckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ack> {
} _Ack_default_instance_;
class RouteInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RouteInfo> {
} _RouteInfo_default_instance_;
class ProxyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Proxy> {
} _Proxy_default_instance_;
class MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Message> {
} _Message_default_instance_;

namespace protobuf_CommunicationData_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[32];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, description_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, property_pairs_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, property_pairs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, mobile_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, net_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, server_ram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, secret_ram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, heart_feq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, verf_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, not_encrypt_),
  0,
  6,
  1,
  2,
  8,
  9,
  3,
  4,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, session_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, client_login_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, serverip_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, body_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, more_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, body_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, store_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, m_parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, s_parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, expire_time_),
  0,
  3,
  4,
  5,
  6,
  1,
  7,
  2,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, body_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, get_info_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, get_info_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoReq, s_parameter_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, last_info_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResp, s_parameter_),
  0,
  ~0u,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, get_info_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosReq, s_parameter_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, last_info_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiInfosResp, s_parameter_),
  0,
  ~0u,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, reason_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResp, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginReq, client_ram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginReq, sig_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginResp, client_ram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitLoginResp, server_ram_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Req, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Req, request_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Resp, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service_Resp, response_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, user_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEQ1User, app_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, user_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, jid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, mobile_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespEQ1User, client_ver_),
  0,
  1,
  5,
  2,
  6,
  3,
  4,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusReq, user_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ex1QueryUserStatusResp, user_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, logout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, init_login_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, service_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, e1_query_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_multi_infos_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, chat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, logout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, init_login_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, service_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, e1_query_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_multi_infos_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, info_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, info_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, query_after_seconds_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLoginNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLoginNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLoginNotify, new_ip_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReConnectNotify, more_ips_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, newinfo_ntf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, relogin_ntf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notify, reconnect_ntf_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, msg_exchanger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteInfo, msg_router_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, receiver_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, receiver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, receiver_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, notify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, proxy_mesg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, client_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sender_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, sender_jid_),
  12,
  10,
  0,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  11,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Pair)},
  { 9, 16, sizeof(Error)},
  { 18, 25, sizeof(User)},
  { 27, 33, sizeof(Info)},
  { 34, 49, sizeof(LoginReq)},
  { 59, 69, sizeof(LoginResp)},
  { 74, 88, sizeof(ChatReq)},
  { 97, 104, sizeof(ChatResp)},
  { 106, 115, sizeof(GetInfoReq)},
  { 119, 128, sizeof(GetInfoResp)},
  { 132, 140, sizeof(GetMultiInfosReq)},
  { 143, 152, sizeof(GetMultiInfosResp)},
  { 156, 162, sizeof(LogoutReq)},
  { 163, 169, sizeof(LogoutResp)},
  { 170, 177, sizeof(InitLoginReq)},
  { 179, 186, sizeof(InitLoginResp)},
  { 188, 195, sizeof(Service_Req)},
  { 197, 204, sizeof(Service_Resp)},
  { 206, 214, sizeof(ReqEQ1User)},
  { 217, 230, sizeof(RespEQ1User)},
  { 238, 244, sizeof(Ex1QueryUserStatusReq)},
  { 245, 251, sizeof(Ex1QueryUserStatusResp)},
  { 252, 265, sizeof(Request)},
  { 273, 287, sizeof(Response)},
  { 296, 305, sizeof(NewMessageNotify)},
  { 309, 315, sizeof(ReLoginNotify)},
  { 316, 324, sizeof(ReConnectNotify)},
  { 327, 335, sizeof(Notify)},
  { 338, 344, sizeof(Ack)},
  { 345, 353, sizeof(RouteInfo)},
  { 356, 363, sizeof(Proxy)},
  { 365, 383, sizeof(Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInfoResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMultiInfosReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMultiInfosResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogoutReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogoutResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitLoginResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Service_Req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Service_Resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqEQ1User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RespEQ1User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ex1QueryUserStatusReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ex1QueryUserStatusResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewMessageNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReLoginNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReConnectNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Notify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Proxy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CommunicationData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 32);
}

}  // namespace

void TableStruct::Shutdown() {
  _Pair_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Error_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _User_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Info_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LoginReq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _LoginResp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ChatReq_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ChatResp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GetInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _GetInfoResp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GetMultiInfosReq_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _GetMultiInfosResp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _LogoutReq_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _LogoutResp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _InitLoginReq_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _InitLoginResp_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Service_Req_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Service_Resp_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _ReqEQ1User_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _RespEQ1User_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _Ex1QueryUserStatusReq_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _Ex1QueryUserStatusResp_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _Request_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _Response_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _NewMessageNotify_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _ReLoginNotify_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _ReConnectNotify_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _Notify_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _Ack_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _RouteInfo_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _Proxy_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _Message_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Pair_default_instance_.DefaultConstruct();
  _Error_default_instance_.DefaultConstruct();
  _User_default_instance_.DefaultConstruct();
  _Info_default_instance_.DefaultConstruct();
  _LoginReq_default_instance_.DefaultConstruct();
  _LoginResp_default_instance_.DefaultConstruct();
  _ChatReq_default_instance_.DefaultConstruct();
  _ChatResp_default_instance_.DefaultConstruct();
  _GetInfoReq_default_instance_.DefaultConstruct();
  _GetInfoResp_default_instance_.DefaultConstruct();
  _GetMultiInfosReq_default_instance_.DefaultConstruct();
  _GetMultiInfosResp_default_instance_.DefaultConstruct();
  _LogoutReq_default_instance_.DefaultConstruct();
  _LogoutResp_default_instance_.DefaultConstruct();
  _InitLoginReq_default_instance_.DefaultConstruct();
  _InitLoginResp_default_instance_.DefaultConstruct();
  _Service_Req_default_instance_.DefaultConstruct();
  _Service_Resp_default_instance_.DefaultConstruct();
  _ReqEQ1User_default_instance_.DefaultConstruct();
  _RespEQ1User_default_instance_.DefaultConstruct();
  _Ex1QueryUserStatusReq_default_instance_.DefaultConstruct();
  _Ex1QueryUserStatusResp_default_instance_.DefaultConstruct();
  _Request_default_instance_.DefaultConstruct();
  _Response_default_instance_.DefaultConstruct();
  _NewMessageNotify_default_instance_.DefaultConstruct();
  _ReLoginNotify_default_instance_.DefaultConstruct();
  _ReConnectNotify_default_instance_.DefaultConstruct();
  _Notify_default_instance_.DefaultConstruct();
  _Ack_default_instance_.DefaultConstruct();
  _RouteInfo_default_instance_.DefaultConstruct();
  _Proxy_default_instance_.DefaultConstruct();
  _Message_default_instance_.DefaultConstruct();
  _Request_default_instance_.get_mutable()->login_ = const_cast< ::qihoo::protocol::messages::LoginReq*>(
      ::qihoo::protocol::messages::LoginReq::internal_default_instance());
  _Request_default_instance_.get_mutable()->chat_ = const_cast< ::qihoo::protocol::messages::ChatReq*>(
      ::qihoo::protocol::messages::ChatReq::internal_default_instance());
  _Request_default_instance_.get_mutable()->get_info_ = const_cast< ::qihoo::protocol::messages::GetInfoReq*>(
      ::qihoo::protocol::messages::GetInfoReq::internal_default_instance());
  _Request_default_instance_.get_mutable()->logout_ = const_cast< ::qihoo::protocol::messages::LogoutReq*>(
      ::qihoo::protocol::messages::LogoutReq::internal_default_instance());
  _Request_default_instance_.get_mutable()->init_login_req_ = const_cast< ::qihoo::protocol::messages::InitLoginReq*>(
      ::qihoo::protocol::messages::InitLoginReq::internal_default_instance());
  _Request_default_instance_.get_mutable()->service_req_ = const_cast< ::qihoo::protocol::messages::Service_Req*>(
      ::qihoo::protocol::messages::Service_Req::internal_default_instance());
  _Request_default_instance_.get_mutable()->e1_query_user_ = const_cast< ::qihoo::protocol::messages::Ex1QueryUserStatusReq*>(
      ::qihoo::protocol::messages::Ex1QueryUserStatusReq::internal_default_instance());
  _Request_default_instance_.get_mutable()->get_multi_infos_ = const_cast< ::qihoo::protocol::messages::GetMultiInfosReq*>(
      ::qihoo::protocol::messages::GetMultiInfosReq::internal_default_instance());
  _Response_default_instance_.get_mutable()->error_ = const_cast< ::qihoo::protocol::messages::Error*>(
      ::qihoo::protocol::messages::Error::internal_default_instance());
  _Response_default_instance_.get_mutable()->login_ = const_cast< ::qihoo::protocol::messages::LoginResp*>(
      ::qihoo::protocol::messages::LoginResp::internal_default_instance());
  _Response_default_instance_.get_mutable()->chat_ = const_cast< ::qihoo::protocol::messages::ChatResp*>(
      ::qihoo::protocol::messages::ChatResp::internal_default_instance());
  _Response_default_instance_.get_mutable()->get_info_ = const_cast< ::qihoo::protocol::messages::GetInfoResp*>(
      ::qihoo::protocol::messages::GetInfoResp::internal_default_instance());
  _Response_default_instance_.get_mutable()->logout_ = const_cast< ::qihoo::protocol::messages::LogoutResp*>(
      ::qihoo::protocol::messages::LogoutResp::internal_default_instance());
  _Response_default_instance_.get_mutable()->init_login_resp_ = const_cast< ::qihoo::protocol::messages::InitLoginResp*>(
      ::qihoo::protocol::messages::InitLoginResp::internal_default_instance());
  _Response_default_instance_.get_mutable()->service_resp_ = const_cast< ::qihoo::protocol::messages::Service_Resp*>(
      ::qihoo::protocol::messages::Service_Resp::internal_default_instance());
  _Response_default_instance_.get_mutable()->e1_query_user_ = const_cast< ::qihoo::protocol::messages::Ex1QueryUserStatusResp*>(
      ::qihoo::protocol::messages::Ex1QueryUserStatusResp::internal_default_instance());
  _Response_default_instance_.get_mutable()->get_multi_infos_ = const_cast< ::qihoo::protocol::messages::GetMultiInfosResp*>(
      ::qihoo::protocol::messages::GetMultiInfosResp::internal_default_instance());
  _Notify_default_instance_.get_mutable()->newinfo_ntf_ = const_cast< ::qihoo::protocol::messages::NewMessageNotify*>(
      ::qihoo::protocol::messages::NewMessageNotify::internal_default_instance());
  _Notify_default_instance_.get_mutable()->relogin_ntf_ = const_cast< ::qihoo::protocol::messages::ReLoginNotify*>(
      ::qihoo::protocol::messages::ReLoginNotify::internal_default_instance());
  _Notify_default_instance_.get_mutable()->reconnect_ntf_ = const_cast< ::qihoo::protocol::messages::ReConnectNotify*>(
      ::qihoo::protocol::messages::ReConnectNotify::internal_default_instance());
  _Message_default_instance_.get_mutable()->req_ = const_cast< ::qihoo::protocol::messages::Request*>(
      ::qihoo::protocol::messages::Request::internal_default_instance());
  _Message_default_instance_.get_mutable()->resp_ = const_cast< ::qihoo::protocol::messages::Response*>(
      ::qihoo::protocol::messages::Response::internal_default_instance());
  _Message_default_instance_.get_mutable()->notify_ = const_cast< ::qihoo::protocol::messages::Notify*>(
      ::qihoo::protocol::messages::Notify::internal_default_instance());
  _Message_default_instance_.get_mutable()->ack_ = const_cast< ::qihoo::protocol::messages::Ack*>(
      ::qihoo::protocol::messages::Ack::internal_default_instance());
  _Message_default_instance_.get_mutable()->proxy_mesg_ = const_cast< ::qihoo::protocol::messages::Proxy*>(
      ::qihoo::protocol::messages::Proxy::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\027CommunicationData.proto\022\027qihoo.protoco"
      "l.messages\"\"\n\004Pair\022\013\n\003key\030\001 \002(\014\022\r\n\005value"
      "\030\002 \001(\014\"(\n\005Error\022\n\n\002id\030\001 \002(\r\022\023\n\013descripti"
      "on\030\002 \001(\014\"M\n\004User\022\016\n\006userid\030\001 \002(\t\0225\n\016prop"
      "erty_pairs\030\002 \003(\0132\035.qihoo.protocol.messag"
      "es.Pair\"=\n\004Info\0225\n\016property_pairs\030\001 \003(\0132"
      "\035.qihoo.protocol.messages.Pair\"\323\001\n\010Login"
      "Req\022\023\n\013mobile_type\030\001 \002(\t\022\020\n\010net_type\030\002 \002"
      "(\r\022\022\n\nserver_ram\030\003 \002(\t\022\022\n\nsecret_ram\030\004 \001"
      "(\014\022\024\n\006app_id\030\005 \001(\r:\0042000\022\026\n\theart_feq\030\006 "
      "\001(\r:\003300\022\020\n\010deviceid\030\007 \001(\t\022\020\n\010platform\030\010"
      " \001(\t\022\021\n\tverf_code\030\t \001(\t\022\023\n\013not_encrypt\030\n"
      " \001(\010\"r\n\tLoginResp\022\021\n\ttimestamp\030\001 \002(\r\022\022\n\n"
      "session_id\030\002 \002(\t\022\023\n\013session_key\030\003 \002(\t\022\027\n"
      "\017client_login_ip\030\004 \001(\t\022\020\n\010serverip\030\005 \001(\t"
      "\"\260\001\n\007ChatReq\022\014\n\004body\030\001 \002(\014\022\017\n\007body_id\030\002 "
      "\001(\r\022\021\n\tmore_flag\030\003 \001(\r\022\021\n\tbody_type\030\004 \002("
      "\r\022\r\n\005store\030\005 \001(\010\022\023\n\013m_parameter\030\006 \001(\014\022\022\n"
      "\nservice_id\030\007 \001(\r\022\023\n\013s_parameter\030\010 \001(\014\022\023"
      "\n\013expire_time\030\014 \001(\r\"+\n\010ChatResp\022\016\n\006resul"
      "t\030\001 \002(\r\022\017\n\007body_id\030\002 \001(\r\"b\n\nGetInfoReq\022\021"
      "\n\tinfo_type\030\001 \002(\t\022\023\n\013get_info_id\030\002 \002(\003\022\027"
      "\n\017get_info_offset\030\003 \001(\005\022\023\n\013s_parameter\030\004"
      " \001(\014\"y\n\013GetInfoResp\022\021\n\tinfo_type\030\001 \002(\t\022,"
      "\n\005infos\030\002 \003(\0132\035.qihoo.protocol.messages."
      "Info\022\024\n\014last_info_id\030\003 \001(\003\022\023\n\013s_paramete"
      "r\030\004 \001(\014\"P\n\020GetMultiInfosReq\022\021\n\tinfo_type"
      "\030\001 \002(\t\022\024\n\014get_info_ids\030\002 \003(\003\022\023\n\013s_parame"
      "ter\030\003 \001(\014\"\177\n\021GetMultiInfosResp\022\021\n\tinfo_t"
      "ype\030\001 \002(\t\022,\n\005infos\030\002 \003(\0132\035.qihoo.protoco"
      "l.messages.Info\022\024\n\014last_info_id\030\003 \001(\003\022\023\n"
      "\013s_parameter\030\004 \001(\014\"\033\n\tLogoutReq\022\016\n\006reaso"
      "n\030\001 \001(\t\"\034\n\nLogoutResp\022\016\n\006result\030\001 \002(\r\"/\n"
      "\014InitLoginReq\022\022\n\nclient_ram\030\001 \002(\t\022\013\n\003sig"
      "\030\002 \001(\t\"7\n\rInitLoginResp\022\022\n\nclient_ram\030\001 "
      "\002(\t\022\022\n\nserver_ram\030\002 \002(\t\"2\n\013Service_Req\022\022"
      "\n\nservice_id\030\001 \002(\r\022\017\n\007request\030\002 \002(\014\"4\n\014S"
      "ervice_Resp\022\022\n\nservice_id\030\001 \002(\r\022\020\n\010respo"
      "nse\030\002 \002(\014\"\?\n\nReqEQ1User\022\016\n\006userid\030\001 \002(\t\022"
      "\021\n\tuser_type\030\002 \002(\t\022\016\n\006app_id\030\003 \001(\r\"\230\001\n\013R"
      "espEQ1User\022\016\n\006userid\030\001 \002(\t\022\021\n\tuser_type\030"
      "\002 \002(\t\022\016\n\006status\030\003 \002(\005\022\013\n\003jid\030\004 \001(\t\022\016\n\006ap"
      "p_id\030\005 \001(\r\022\020\n\010platform\030\006 \001(\t\022\023\n\013mobile_t"
      "ype\030\007 \001(\t\022\022\n\nclient_ver\030\010 \001(\r\"O\n\025Ex1Quer"
      "yUserStatusReq\0226\n\tuser_list\030\001 \003(\0132#.qiho"
      "o.protocol.messages.ReqEQ1User\"Q\n\026Ex1Que"
      "ryUserStatusResp\0227\n\tuser_list\030\001 \003(\0132$.qi"
      "hoo.protocol.messages.RespEQ1User\"\333\003\n\007Re"
      "quest\0220\n\005login\030\002 \001(\0132!.qihoo.protocol.me"
      "ssages.LoginReq\022.\n\004chat\030\003 \001(\0132 .qihoo.pr"
      "otocol.messages.ChatReq\0225\n\010get_info\030\005 \001("
      "\0132#.qihoo.protocol.messages.GetInfoReq\0222"
      "\n\006logout\030\006 \001(\0132\".qihoo.protocol.messages"
      ".LogoutReq\022=\n\016init_login_req\030\t \001(\0132%.qih"
      "oo.protocol.messages.InitLoginReq\0229\n\013ser"
      "vice_req\030\013 \001(\0132$.qihoo.protocol.messages"
      ".Service_Req\022E\n\re1_query_user\030\014 \001(\0132..qi"
      "hoo.protocol.messages.Ex1QueryUserStatus"
      "Req\022B\n\017get_multi_infos\030d \001(\0132).qihoo.pro"
      "tocol.messages.GetMultiInfosReq\"\225\004\n\010Resp"
      "onse\022-\n\005error\030\001 \001(\0132\036.qihoo.protocol.mes"
      "sages.Error\0221\n\005login\030\003 \001(\0132\".qihoo.proto"
      "col.messages.LoginResp\022/\n\004chat\030\004 \001(\0132!.q"
      "ihoo.protocol.messages.ChatResp\0226\n\010get_i"
      "nfo\030\006 \001(\0132$.qihoo.protocol.messages.GetI"
      "nfoResp\0223\n\006logout\030\007 \001(\0132#.qihoo.protocol"
      ".messages.LogoutResp\022\?\n\017init_login_resp\030"
      "\n \001(\0132&.qihoo.protocol.messages.InitLogi"
      "nResp\022;\n\014service_resp\030\014 \001(\0132%.qihoo.prot"
      "ocol.messages.Service_Resp\022F\n\re1_query_u"
      "ser\030\r \001(\0132/.qihoo.protocol.messages.Ex1Q"
      "ueryUserStatusResp\022C\n\017get_multi_infos\030d "
      "\001(\0132*.qihoo.protocol.messages.GetMultiIn"
      "fosResp\"i\n\020NewMessageNotify\022\021\n\tinfo_type"
      "\030\001 \002(\t\022\024\n\014info_content\030\002 \001(\014\022\017\n\007info_id\030"
      "\003 \001(\003\022\033\n\023query_after_seconds\030\004 \001(\r\"\037\n\rRe"
      "LoginNotify\022\016\n\006new_ip\030\001 \001(\t\"=\n\017ReConnect"
      "Notify\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\020\n\010more"
      "_ips\030\003 \003(\t\"\306\001\n\006Notify\022>\n\013newinfo_ntf\030\001 \001"
      "(\0132).qihoo.protocol.messages.NewMessageN"
      "otify\022;\n\013relogin_ntf\030\002 \001(\0132&.qihoo.proto"
      "col.messages.ReLoginNotify\022\?\n\rreconnect_"
      "ntf\030\003 \001(\0132(.qihoo.protocol.messages.ReCo"
      "nnectNotify\"\025\n\003Ack\022\016\n\006result\030\001 \002(\r\"H\n\tRo"
      "uteInfo\022\020\n\010username\030\001 \002(\014\022\025\n\rmsg_exchang"
      "er\030\002 \002(\t\022\022\n\nmsg_router\030\003 \002(\t\"M\n\005Proxy\022\016\n"
      "\006sender\030\001 \002(\t\0224\n\010receiver\030\002 \003(\0132\".qihoo."
      "protocol.messages.RouteInfo\"\213\003\n\007Message\022"
      "\r\n\005msgid\030\001 \002(\r\022\n\n\002sn\030\002 \002(\004\022\016\n\006sender\030\003 \001"
      "(\t\022\020\n\010receiver\030\004 \001(\t\022\025\n\rreceiver_type\030\005 "
      "\001(\t\022-\n\003req\030\006 \001(\0132 .qihoo.protocol.messag"
      "es.Request\022/\n\004resp\030\007 \001(\0132!.qihoo.protoco"
      "l.messages.Response\022/\n\006notify\030\010 \001(\0132\037.qi"
      "hoo.protocol.messages.Notify\022)\n\003ack\030\t \001("
      "\0132\034.qihoo.protocol.messages.Ack\0222\n\nproxy"
      "_mesg\030\n \001(\0132\036.qihoo.protocol.messages.Pr"
      "oxy\022\023\n\013client_data\030\013 \001(\004\022\023\n\013sender_type\030"
      "\014 \001(\t\022\022\n\nsender_jid\030\r \001(\tB>\n)com.qihoo.c"
      "ontact.cloud.protocol.messagesB\021Communic"
      "ationData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3969);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommunicationData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CommunicationData_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pair::kKeyFieldNumber;
const int Pair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pair::Pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Pair)
}
Pair::Pair(const Pair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Pair)
}

void Pair::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Pair)
  SharedDtor();
}

void Pair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pair::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pair& Pair::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pair* Pair::New(::google::protobuf::Arena* arena) const {
  Pair* n = new Pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Pair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Pair)
  return false;
#undef DO_
}

void Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Pair)
}

::google::protobuf::uint8* Pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Pair)
  return target;
}

size_t Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Pair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }
  // optional bytes value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const Pair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Pair)
    MergeFrom(*source);
  }
}

void Pair::MergeFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pair::CopyFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Pair::Swap(Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pair::InternalSwap(Pair* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pair::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pair

// required bytes key = 1;
bool Pair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Pair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Pair::key() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Pair.key)
  return key_.GetNoArena();
}
void Pair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Pair.key)
}
#if LANG_CXX11
void Pair::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Pair.key)
}
#endif
void Pair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Pair.key)
}
void Pair::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Pair.key)
}
::std::string* Pair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Pair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pair::release_key() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Pair.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Pair.key)
}

// optional bytes value = 2;
bool Pair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Pair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Pair::value() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Pair.value)
  return value_.GetNoArena();
}
void Pair::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Pair.value)
}
#if LANG_CXX11
void Pair::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Pair.value)
}
#endif
void Pair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Pair.value)
}
void Pair::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Pair.value)
}
::std::string* Pair::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Pair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pair::release_value() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Pair.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Pair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kIdFieldNumber;
const int Error::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Error)
  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes description = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional bytes description = 2;
  if (has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  description_.Swap(&other->description_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// required uint32 id = 1;
bool Error::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Error::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Error::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Error::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 Error::id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Error.id)
  return id_;
}
void Error::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Error.id)
}

// optional bytes description = 2;
bool Error::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Error::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void Error::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void Error::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& Error::description() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Error.description)
  return description_.GetNoArena();
}
void Error::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Error.description)
}
#if LANG_CXX11
void Error::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Error.description)
}
#endif
void Error::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Error.description)
}
void Error::set_description(const void* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Error.description)
}
::std::string* Error::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Error.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_description() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Error.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Error.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kUseridFieldNumber;
const int User::kPropertyPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_pairs_(from.property_pairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.User)
}

void User::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

User::~User() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.User)
  SharedDtor();
}

void User::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User& User::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.User)
  property_pairs_.Clear();
  if (has_userid()) {
    GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*userid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.User.userid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.messages.Pair property_pairs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_pairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.User.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // repeated .qihoo.protocol.messages.Pair property_pairs = 2;
  for (unsigned int i = 0, n = this->property_pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_pairs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.User.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // repeated .qihoo.protocol.messages.Pair property_pairs = 2;
  for (unsigned int i = 0, n = this->property_pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_pairs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string userid = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  // repeated .qihoo.protocol.messages.Pair property_pairs = 2;
  {
    unsigned int count = this->property_pairs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_pairs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_pairs_.MergeFrom(from.property_pairs_);
  if (from.has_userid()) {
    set_has_userid();
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_pairs())) return false;
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  property_pairs_.InternalSwap(&other->property_pairs_);
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// required string userid = 1;
bool User::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void User::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void User::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void User::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& User::userid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.User.userid)
  return userid_.GetNoArena();
}
void User::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.User.userid)
}
#if LANG_CXX11
void User::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.User.userid)
}
#endif
void User::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.User.userid)
}
void User::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.User.userid)
}
::std::string* User::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.User.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_userid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.User.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.User.userid)
}

// repeated .qihoo.protocol.messages.Pair property_pairs = 2;
int User::property_pairs_size() const {
  return property_pairs_.size();
}
void User::clear_property_pairs() {
  property_pairs_.Clear();
}
const ::qihoo::protocol::messages::Pair& User::property_pairs(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.User.property_pairs)
  return property_pairs_.Get(index);
}
::qihoo::protocol::messages::Pair* User::mutable_property_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.User.property_pairs)
  return property_pairs_.Mutable(index);
}
::qihoo::protocol::messages::Pair* User::add_property_pairs() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.User.property_pairs)
  return property_pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::Pair >*
User::mutable_property_pairs() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.messages.User.property_pairs)
  return &property_pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::Pair >&
User::property_pairs() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.messages.User.property_pairs)
  return property_pairs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Info::kPropertyPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Info::Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Info)
}
Info::Info(const Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_pairs_(from.property_pairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Info)
}

void Info::SharedCtor() {
  _cached_size_ = 0;
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Info)
  SharedDtor();
}

void Info::SharedDtor() {
}

void Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Info& Info::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Info* Info::New(::google::protobuf::Arena* arena) const {
  Info* n = new Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Info)
  property_pairs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.messages.Pair property_pairs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_pairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Info)
  return false;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.messages.Pair property_pairs = 1;
  for (unsigned int i = 0, n = this->property_pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->property_pairs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Info)
}

::google::protobuf::uint8* Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.messages.Pair property_pairs = 1;
  for (unsigned int i = 0, n = this->property_pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->property_pairs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Info)
  return target;
}

size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .qihoo.protocol.messages.Pair property_pairs = 1;
  {
    unsigned int count = this->property_pairs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_pairs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Info)
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_pairs_.MergeFrom(from.property_pairs_);
}

void Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->property_pairs())) return false;
  return true;
}

void Info::Swap(Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Info::InternalSwap(Info* other) {
  property_pairs_.InternalSwap(&other->property_pairs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Info::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Info

// repeated .qihoo.protocol.messages.Pair property_pairs = 1;
int Info::property_pairs_size() const {
  return property_pairs_.size();
}
void Info::clear_property_pairs() {
  property_pairs_.Clear();
}
const ::qihoo::protocol::messages::Pair& Info::property_pairs(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Info.property_pairs)
  return property_pairs_.Get(index);
}
::qihoo::protocol::messages::Pair* Info::mutable_property_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Info.property_pairs)
  return property_pairs_.Mutable(index);
}
::qihoo::protocol::messages::Pair* Info::add_property_pairs() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.Info.property_pairs)
  return property_pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::Pair >*
Info::mutable_property_pairs() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.messages.Info.property_pairs)
  return &property_pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::Pair >&
Info::property_pairs() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.messages.Info.property_pairs)
  return property_pairs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReq::kMobileTypeFieldNumber;
const int LoginReq::kNetTypeFieldNumber;
const int LoginReq::kServerRamFieldNumber;
const int LoginReq::kSecretRamFieldNumber;
const int LoginReq::kAppIdFieldNumber;
const int LoginReq::kHeartFeqFieldNumber;
const int LoginReq::kDeviceidFieldNumber;
const int LoginReq::kPlatformFieldNumber;
const int LoginReq::kVerfCodeFieldNumber;
const int LoginReq::kNotEncryptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReq::LoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mobile_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mobile_type()) {
    mobile_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_type_);
  }
  server_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_ram()) {
    server_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ram_);
  }
  secret_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret_ram()) {
    secret_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_ram_);
  }
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceid()) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform()) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  verf_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verf_code()) {
    verf_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verf_code_);
  }
  ::memcpy(&net_type_, &from.net_type_,
    reinterpret_cast<char*>(&heart_feq_) -
    reinterpret_cast<char*>(&net_type_) + sizeof(heart_feq_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.LoginReq)
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  mobile_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verf_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&net_type_, 0, reinterpret_cast<char*>(&not_encrypt_) -
    reinterpret_cast<char*>(&net_type_) + sizeof(not_encrypt_));
  app_id_ = 2000u;
  heart_feq_ = 300u;
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  mobile_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_ram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verf_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginReq& LoginReq::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginReq* LoginReq::New(::google::protobuf::Arena* arena) const {
  LoginReq* n = new LoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.LoginReq)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_mobile_type()) {
      GOOGLE_DCHECK(!mobile_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mobile_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_server_ram()) {
      GOOGLE_DCHECK(!server_ram_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_ram_.UnsafeRawStringPointer())->clear();
    }
    if (has_secret_ram()) {
      GOOGLE_DCHECK(!secret_ram_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*secret_ram_.UnsafeRawStringPointer())->clear();
    }
    if (has_deviceid()) {
      GOOGLE_DCHECK(!deviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_platform()) {
      GOOGLE_DCHECK(!platform_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*platform_.UnsafeRawStringPointer())->clear();
    }
    if (has_verf_code()) {
      GOOGLE_DCHECK(!verf_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verf_code_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&net_type_, 0, reinterpret_cast<char*>(&not_encrypt_) -
      reinterpret_cast<char*>(&net_type_) + sizeof(not_encrypt_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    app_id_ = 2000u;
    heart_feq_ = 300u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.LoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mobile_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile_type().data(), this->mobile_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LoginReq.mobile_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 net_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_net_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string server_ram = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ram().data(), this->server_ram().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LoginReq.server_ram");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secret_ram = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret_ram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 5 [default = 2000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heart_feq = 6 [default = 300];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_heart_feq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heart_feq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deviceid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LoginReq.deviceid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string platform = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LoginReq.platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string verf_code = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verf_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verf_code().data(), this->verf_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LoginReq.verf_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool not_encrypt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_not_encrypt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_encrypt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string mobile_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_type().data(), this->mobile_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.mobile_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mobile_type(), output);
  }

  // required uint32 net_type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->net_type(), output);
  }

  // required string server_ram = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ram().data(), this->server_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.server_ram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_ram(), output);
  }

  // optional bytes secret_ram = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secret_ram(), output);
  }

  // optional uint32 app_id = 5 [default = 2000];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->app_id(), output);
  }

  // optional uint32 heart_feq = 6 [default = 300];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->heart_feq(), output);
  }

  // optional string deviceid = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->deviceid(), output);
  }

  // optional string platform = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->platform(), output);
  }

  // optional string verf_code = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verf_code().data(), this->verf_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.verf_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->verf_code(), output);
  }

  // optional bool not_encrypt = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->not_encrypt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.LoginReq)
}

::google::protobuf::uint8* LoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string mobile_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_type().data(), this->mobile_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.mobile_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mobile_type(), target);
  }

  // required uint32 net_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->net_type(), target);
  }

  // required string server_ram = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ram().data(), this->server_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.server_ram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_ram(), target);
  }

  // optional bytes secret_ram = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secret_ram(), target);
  }

  // optional uint32 app_id = 5 [default = 2000];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->app_id(), target);
  }

  // optional uint32 heart_feq = 6 [default = 300];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->heart_feq(), target);
  }

  // optional string deviceid = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deviceid(), target);
  }

  // optional string platform = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->platform(), target);
  }

  // optional string verf_code = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verf_code().data(), this->verf_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginReq.verf_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->verf_code(), target);
  }

  // optional bool not_encrypt = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->not_encrypt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.LoginReq)
  return target;
}

size_t LoginReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.LoginReq)
  size_t total_size = 0;

  if (has_mobile_type()) {
    // required string mobile_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile_type());
  }

  if (has_server_ram()) {
    // required string server_ram = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ram());
  }

  if (has_net_type()) {
    // required uint32 net_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->net_type());
  }

  return total_size;
}
size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.LoginReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000043) ^ 0x00000043) == 0) {  // All required fields are present.
    // required string mobile_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile_type());

    // required string server_ram = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ram());

    // required uint32 net_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->net_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional bytes secret_ram = 4;
    if (has_secret_ram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secret_ram());
    }

    // optional string deviceid = 7;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string platform = 8;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string verf_code = 9;
    if (has_verf_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verf_code());
    }

  }
  // optional bool not_encrypt = 10;
  if (has_not_encrypt()) {
    total_size += 1 + 1;
  }

  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 app_id = 5 [default = 2000];
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 heart_feq = 6 [default = 300];
    if (has_heart_feq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heart_feq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.LoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.LoginReq)
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mobile_type();
      mobile_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_server_ram();
      server_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ram_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_secret_ram();
      secret_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_ram_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_deviceid();
      deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_verf_code();
      verf_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verf_code_);
    }
    if (cached_has_bits & 0x00000040u) {
      net_type_ = from.net_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      not_encrypt_ = from.not_encrypt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      heart_feq_ = from.heart_feq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;
  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReq::InternalSwap(LoginReq* other) {
  mobile_type_.Swap(&other->mobile_type_);
  server_ram_.Swap(&other->server_ram_);
  secret_ram_.Swap(&other->secret_ram_);
  deviceid_.Swap(&other->deviceid_);
  platform_.Swap(&other->platform_);
  verf_code_.Swap(&other->verf_code_);
  std::swap(net_type_, other->net_type_);
  std::swap(not_encrypt_, other->not_encrypt_);
  std::swap(app_id_, other->app_id_);
  std::swap(heart_feq_, other->heart_feq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReq

// required string mobile_type = 1;
bool LoginReq::has_mobile_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginReq::set_has_mobile_type() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginReq::clear_has_mobile_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginReq::clear_mobile_type() {
  mobile_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile_type();
}
const ::std::string& LoginReq::mobile_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.mobile_type)
  return mobile_type_.GetNoArena();
}
void LoginReq::set_mobile_type(const ::std::string& value) {
  set_has_mobile_type();
  mobile_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.mobile_type)
}
#if LANG_CXX11
void LoginReq::set_mobile_type(::std::string&& value) {
  set_has_mobile_type();
  mobile_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginReq.mobile_type)
}
#endif
void LoginReq::set_mobile_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile_type();
  mobile_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginReq.mobile_type)
}
void LoginReq::set_mobile_type(const char* value, size_t size) {
  set_has_mobile_type();
  mobile_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginReq.mobile_type)
}
::std::string* LoginReq::mutable_mobile_type() {
  set_has_mobile_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginReq.mobile_type)
  return mobile_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_mobile_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginReq.mobile_type)
  clear_has_mobile_type();
  return mobile_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_mobile_type(::std::string* mobile_type) {
  if (mobile_type != NULL) {
    set_has_mobile_type();
  } else {
    clear_has_mobile_type();
  }
  mobile_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginReq.mobile_type)
}

// required uint32 net_type = 2;
bool LoginReq::has_net_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LoginReq::set_has_net_type() {
  _has_bits_[0] |= 0x00000040u;
}
void LoginReq::clear_has_net_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void LoginReq::clear_net_type() {
  net_type_ = 0u;
  clear_has_net_type();
}
::google::protobuf::uint32 LoginReq::net_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.net_type)
  return net_type_;
}
void LoginReq::set_net_type(::google::protobuf::uint32 value) {
  set_has_net_type();
  net_type_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.net_type)
}

// required string server_ram = 3;
bool LoginReq::has_server_ram() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginReq::set_has_server_ram() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginReq::clear_has_server_ram() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginReq::clear_server_ram() {
  server_ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_ram();
}
const ::std::string& LoginReq::server_ram() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.server_ram)
  return server_ram_.GetNoArena();
}
void LoginReq::set_server_ram(const ::std::string& value) {
  set_has_server_ram();
  server_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.server_ram)
}
#if LANG_CXX11
void LoginReq::set_server_ram(::std::string&& value) {
  set_has_server_ram();
  server_ram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginReq.server_ram)
}
#endif
void LoginReq::set_server_ram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_ram();
  server_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginReq.server_ram)
}
void LoginReq::set_server_ram(const char* value, size_t size) {
  set_has_server_ram();
  server_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginReq.server_ram)
}
::std::string* LoginReq::mutable_server_ram() {
  set_has_server_ram();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginReq.server_ram)
  return server_ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_server_ram() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginReq.server_ram)
  clear_has_server_ram();
  return server_ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_server_ram(::std::string* server_ram) {
  if (server_ram != NULL) {
    set_has_server_ram();
  } else {
    clear_has_server_ram();
  }
  server_ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ram);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginReq.server_ram)
}

// optional bytes secret_ram = 4;
bool LoginReq::has_secret_ram() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginReq::set_has_secret_ram() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginReq::clear_has_secret_ram() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginReq::clear_secret_ram() {
  secret_ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret_ram();
}
const ::std::string& LoginReq::secret_ram() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.secret_ram)
  return secret_ram_.GetNoArena();
}
void LoginReq::set_secret_ram(const ::std::string& value) {
  set_has_secret_ram();
  secret_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.secret_ram)
}
#if LANG_CXX11
void LoginReq::set_secret_ram(::std::string&& value) {
  set_has_secret_ram();
  secret_ram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginReq.secret_ram)
}
#endif
void LoginReq::set_secret_ram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secret_ram();
  secret_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginReq.secret_ram)
}
void LoginReq::set_secret_ram(const void* value, size_t size) {
  set_has_secret_ram();
  secret_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginReq.secret_ram)
}
::std::string* LoginReq::mutable_secret_ram() {
  set_has_secret_ram();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginReq.secret_ram)
  return secret_ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_secret_ram() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginReq.secret_ram)
  clear_has_secret_ram();
  return secret_ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_secret_ram(::std::string* secret_ram) {
  if (secret_ram != NULL) {
    set_has_secret_ram();
  } else {
    clear_has_secret_ram();
  }
  secret_ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_ram);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginReq.secret_ram)
}

// optional uint32 app_id = 5 [default = 2000];
bool LoginReq::has_app_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LoginReq::set_has_app_id() {
  _has_bits_[0] |= 0x00000100u;
}
void LoginReq::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void LoginReq::clear_app_id() {
  app_id_ = 2000u;
  clear_has_app_id();
}
::google::protobuf::uint32 LoginReq::app_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.app_id)
  return app_id_;
}
void LoginReq::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.app_id)
}

// optional uint32 heart_feq = 6 [default = 300];
bool LoginReq::has_heart_feq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LoginReq::set_has_heart_feq() {
  _has_bits_[0] |= 0x00000200u;
}
void LoginReq::clear_has_heart_feq() {
  _has_bits_[0] &= ~0x00000200u;
}
void LoginReq::clear_heart_feq() {
  heart_feq_ = 300u;
  clear_has_heart_feq();
}
::google::protobuf::uint32 LoginReq::heart_feq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.heart_feq)
  return heart_feq_;
}
void LoginReq::set_heart_feq(::google::protobuf::uint32 value) {
  set_has_heart_feq();
  heart_feq_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.heart_feq)
}

// optional string deviceid = 7;
bool LoginReq::has_deviceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginReq::set_has_deviceid() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginReq::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginReq::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
const ::std::string& LoginReq::deviceid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.deviceid)
  return deviceid_.GetNoArena();
}
void LoginReq::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.deviceid)
}
#if LANG_CXX11
void LoginReq::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginReq.deviceid)
}
#endif
void LoginReq::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginReq.deviceid)
}
void LoginReq::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginReq.deviceid)
}
::std::string* LoginReq::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginReq.deviceid)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_deviceid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginReq.deviceid)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginReq.deviceid)
}

// optional string platform = 8;
bool LoginReq::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginReq::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginReq::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginReq::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
const ::std::string& LoginReq::platform() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.platform)
  return platform_.GetNoArena();
}
void LoginReq::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.platform)
}
#if LANG_CXX11
void LoginReq::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginReq.platform)
}
#endif
void LoginReq::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginReq.platform)
}
void LoginReq::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginReq.platform)
}
::std::string* LoginReq::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginReq.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_platform() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginReq.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginReq.platform)
}

// optional string verf_code = 9;
bool LoginReq::has_verf_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoginReq::set_has_verf_code() {
  _has_bits_[0] |= 0x00000020u;
}
void LoginReq::clear_has_verf_code() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoginReq::clear_verf_code() {
  verf_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verf_code();
}
const ::std::string& LoginReq::verf_code() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.verf_code)
  return verf_code_.GetNoArena();
}
void LoginReq::set_verf_code(const ::std::string& value) {
  set_has_verf_code();
  verf_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.verf_code)
}
#if LANG_CXX11
void LoginReq::set_verf_code(::std::string&& value) {
  set_has_verf_code();
  verf_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginReq.verf_code)
}
#endif
void LoginReq::set_verf_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verf_code();
  verf_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginReq.verf_code)
}
void LoginReq::set_verf_code(const char* value, size_t size) {
  set_has_verf_code();
  verf_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginReq.verf_code)
}
::std::string* LoginReq::mutable_verf_code() {
  set_has_verf_code();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginReq.verf_code)
  return verf_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_verf_code() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginReq.verf_code)
  clear_has_verf_code();
  return verf_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_verf_code(::std::string* verf_code) {
  if (verf_code != NULL) {
    set_has_verf_code();
  } else {
    clear_has_verf_code();
  }
  verf_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verf_code);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginReq.verf_code)
}

// optional bool not_encrypt = 10;
bool LoginReq::has_not_encrypt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LoginReq::set_has_not_encrypt() {
  _has_bits_[0] |= 0x00000080u;
}
void LoginReq::clear_has_not_encrypt() {
  _has_bits_[0] &= ~0x00000080u;
}
void LoginReq::clear_not_encrypt() {
  not_encrypt_ = false;
  clear_has_not_encrypt();
}
bool LoginReq::not_encrypt() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginReq.not_encrypt)
  return not_encrypt_;
}
void LoginReq::set_not_encrypt(bool value) {
  set_has_not_encrypt();
  not_encrypt_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginReq.not_encrypt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResp::kTimestampFieldNumber;
const int LoginResp::kSessionIdFieldNumber;
const int LoginResp::kSessionKeyFieldNumber;
const int LoginResp::kClientLoginIpFieldNumber;
const int LoginResp::kServeripFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResp::LoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.LoginResp)
}
LoginResp::LoginResp(const LoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_key()) {
    session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  client_login_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_login_ip()) {
    client_login_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_login_ip_);
  }
  serverip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverip()) {
    serverip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverip_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.LoginResp)
}

void LoginResp::SharedCtor() {
  _cached_size_ = 0;
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_login_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
}

LoginResp::~LoginResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.LoginResp)
  SharedDtor();
}

void LoginResp::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_login_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResp::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginResp& LoginResp::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginResp* LoginResp::New(::google::protobuf::Arena* arena) const {
  LoginResp* n = new LoginResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.LoginResp)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_session_id()) {
      GOOGLE_DCHECK(!session_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*session_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_session_key()) {
      GOOGLE_DCHECK(!session_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*session_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_client_login_ip()) {
      GOOGLE_DCHECK(!client_login_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_login_ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_serverip()) {
      GOOGLE_DCHECK(!serverip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serverip_.UnsafeRawStringPointer())->clear();
    }
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.LoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LoginResp.session_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string session_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_key().data(), this->session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LoginResp.session_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_login_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_login_ip().data(), this->client_login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LoginResp.client_login_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serverip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverip().data(), this->serverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LoginResp.serverip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.LoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.LoginResp)
  return false;
#undef DO_
}

void LoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.LoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // required string session_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginResp.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // required string session_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginResp.session_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_key(), output);
  }

  // optional string client_login_ip = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_login_ip().data(), this->client_login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginResp.client_login_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_login_ip(), output);
  }

  // optional string serverip = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginResp.serverip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serverip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.LoginResp)
}

::google::protobuf::uint8* LoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.LoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // required string session_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginResp.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required string session_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginResp.session_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_key(), target);
  }

  // optional string client_login_ip = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_login_ip().data(), this->client_login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginResp.client_login_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_login_ip(), target);
  }

  // optional string serverip = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LoginResp.serverip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serverip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.LoginResp)
  return target;
}

size_t LoginResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.LoginResp)
  size_t total_size = 0;

  if (has_session_id()) {
    // required string session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  if (has_session_key()) {
    // required string session_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_key());
  }

  if (has_timestamp()) {
    // required uint32 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  return total_size;
}
size_t LoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.LoginResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required string session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());

    // required string session_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_key());

    // required uint32 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional string client_login_ip = 4;
    if (has_client_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_login_ip());
    }

    // optional string serverip = 5;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.LoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.LoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.LoginResp)
    MergeFrom(*source);
  }
}

void LoginResp::MergeFrom(const LoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.LoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_session_key();
      session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_client_login_ip();
      client_login_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_login_ip_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_serverip();
      serverip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverip_);
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.LoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResp::CopyFrom(const LoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.LoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  return true;
}

void LoginResp::Swap(LoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResp::InternalSwap(LoginResp* other) {
  session_id_.Swap(&other->session_id_);
  session_key_.Swap(&other->session_key_);
  client_login_ip_.Swap(&other->client_login_ip_);
  serverip_.Swap(&other->serverip_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResp::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResp

// required uint32 timestamp = 1;
bool LoginResp::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginResp::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginResp::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginResp::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 LoginResp::timestamp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginResp.timestamp)
  return timestamp_;
}
void LoginResp::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginResp.timestamp)
}

// required string session_id = 2;
bool LoginResp::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginResp::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginResp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginResp::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
const ::std::string& LoginResp::session_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginResp.session_id)
  return session_id_.GetNoArena();
}
void LoginResp::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginResp.session_id)
}
#if LANG_CXX11
void LoginResp::set_session_id(::std::string&& value) {
  set_has_session_id();
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginResp.session_id)
}
#endif
void LoginResp::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginResp.session_id)
}
void LoginResp::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginResp.session_id)
}
::std::string* LoginResp::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginResp.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResp::release_session_id() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginResp.session_id)
  clear_has_session_id();
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResp::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginResp.session_id)
}

// required string session_key = 3;
bool LoginResp::has_session_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginResp::set_has_session_key() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginResp::clear_has_session_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginResp::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_key();
}
const ::std::string& LoginResp::session_key() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginResp.session_key)
  return session_key_.GetNoArena();
}
void LoginResp::set_session_key(const ::std::string& value) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginResp.session_key)
}
#if LANG_CXX11
void LoginResp::set_session_key(::std::string&& value) {
  set_has_session_key();
  session_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginResp.session_key)
}
#endif
void LoginResp::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginResp.session_key)
}
void LoginResp::set_session_key(const char* value, size_t size) {
  set_has_session_key();
  session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginResp.session_key)
}
::std::string* LoginResp::mutable_session_key() {
  set_has_session_key();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginResp.session_key)
  return session_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResp::release_session_key() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginResp.session_key)
  clear_has_session_key();
  return session_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResp::set_allocated_session_key(::std::string* session_key) {
  if (session_key != NULL) {
    set_has_session_key();
  } else {
    clear_has_session_key();
  }
  session_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginResp.session_key)
}

// optional string client_login_ip = 4;
bool LoginResp::has_client_login_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginResp::set_has_client_login_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginResp::clear_has_client_login_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginResp::clear_client_login_ip() {
  client_login_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_login_ip();
}
const ::std::string& LoginResp::client_login_ip() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginResp.client_login_ip)
  return client_login_ip_.GetNoArena();
}
void LoginResp::set_client_login_ip(const ::std::string& value) {
  set_has_client_login_ip();
  client_login_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginResp.client_login_ip)
}
#if LANG_CXX11
void LoginResp::set_client_login_ip(::std::string&& value) {
  set_has_client_login_ip();
  client_login_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginResp.client_login_ip)
}
#endif
void LoginResp::set_client_login_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_login_ip();
  client_login_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginResp.client_login_ip)
}
void LoginResp::set_client_login_ip(const char* value, size_t size) {
  set_has_client_login_ip();
  client_login_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginResp.client_login_ip)
}
::std::string* LoginResp::mutable_client_login_ip() {
  set_has_client_login_ip();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginResp.client_login_ip)
  return client_login_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResp::release_client_login_ip() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginResp.client_login_ip)
  clear_has_client_login_ip();
  return client_login_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResp::set_allocated_client_login_ip(::std::string* client_login_ip) {
  if (client_login_ip != NULL) {
    set_has_client_login_ip();
  } else {
    clear_has_client_login_ip();
  }
  client_login_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_login_ip);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginResp.client_login_ip)
}

// optional string serverip = 5;
bool LoginResp::has_serverip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginResp::set_has_serverip() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginResp::clear_has_serverip() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginResp::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serverip();
}
const ::std::string& LoginResp::serverip() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LoginResp.serverip)
  return serverip_.GetNoArena();
}
void LoginResp::set_serverip(const ::std::string& value) {
  set_has_serverip();
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LoginResp.serverip)
}
#if LANG_CXX11
void LoginResp::set_serverip(::std::string&& value) {
  set_has_serverip();
  serverip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LoginResp.serverip)
}
#endif
void LoginResp::set_serverip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serverip();
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LoginResp.serverip)
}
void LoginResp::set_serverip(const char* value, size_t size) {
  set_has_serverip();
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LoginResp.serverip)
}
::std::string* LoginResp::mutable_serverip() {
  set_has_serverip();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LoginResp.serverip)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResp::release_serverip() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LoginResp.serverip)
  clear_has_serverip();
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResp::set_allocated_serverip(::std::string* serverip) {
  if (serverip != NULL) {
    set_has_serverip();
  } else {
    clear_has_serverip();
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LoginResp.serverip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatReq::kBodyFieldNumber;
const int ChatReq::kBodyIdFieldNumber;
const int ChatReq::kMoreFlagFieldNumber;
const int ChatReq::kBodyTypeFieldNumber;
const int ChatReq::kStoreFieldNumber;
const int ChatReq::kMParameterFieldNumber;
const int ChatReq::kServiceIdFieldNumber;
const int ChatReq::kSParameterFieldNumber;
const int ChatReq::kExpireTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatReq::ChatReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ChatReq)
}
ChatReq::ChatReq(const ChatReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  m_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_m_parameter()) {
    m_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_parameter_);
  }
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s_parameter()) {
    s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
  }
  ::memcpy(&body_id_, &from.body_id_,
    reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&body_id_) + sizeof(expire_time_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ChatReq)
}

void ChatReq::SharedCtor() {
  _cached_size_ = 0;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&body_id_, 0, reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&body_id_) + sizeof(expire_time_));
}

ChatReq::~ChatReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ChatReq)
  SharedDtor();
}

void ChatReq::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_parameter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatReq::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatReq& ChatReq::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatReq* ChatReq::New(::google::protobuf::Arena* arena) const {
  ChatReq* n = new ChatReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.ChatReq)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_body()) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
    if (has_m_parameter()) {
      GOOGLE_DCHECK(!m_parameter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*m_parameter_.UnsafeRawStringPointer())->clear();
    }
    if (has_s_parameter()) {
      GOOGLE_DCHECK(!s_parameter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*s_parameter_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&body_id_, 0, reinterpret_cast<char*>(&service_id_) -
      reinterpret_cast<char*>(&body_id_) + sizeof(service_id_));
  }
  expire_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ChatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes body = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 body_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_body_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 more_flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_more_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &more_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 body_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_body_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool store = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_store();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes m_parameter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes s_parameter = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expire_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_expire_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ChatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ChatReq)
  return false;
#undef DO_
}

void ChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ChatReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes body = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->body(), output);
  }

  // optional uint32 body_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->body_id(), output);
  }

  // optional uint32 more_flag = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->more_flag(), output);
  }

  // required uint32 body_type = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->body_type(), output);
  }

  // optional bool store = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->store(), output);
  }

  // optional bytes m_parameter = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->m_parameter(), output);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->service_id(), output);
  }

  // optional bytes s_parameter = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->s_parameter(), output);
  }

  // optional uint32 expire_time = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->expire_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ChatReq)
}

::google::protobuf::uint8* ChatReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ChatReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes body = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->body(), target);
  }

  // optional uint32 body_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->body_id(), target);
  }

  // optional uint32 more_flag = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->more_flag(), target);
  }

  // required uint32 body_type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->body_type(), target);
  }

  // optional bool store = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->store(), target);
  }

  // optional bytes m_parameter = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->m_parameter(), target);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->service_id(), target);
  }

  // optional bytes s_parameter = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->s_parameter(), target);
  }

  // optional uint32 expire_time = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->expire_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ChatReq)
  return target;
}

size_t ChatReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.ChatReq)
  size_t total_size = 0;

  if (has_body()) {
    // required bytes body = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  if (has_body_type()) {
    // required uint32 body_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_type());
  }

  return total_size;
}
size_t ChatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.ChatReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required bytes body = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());

    // required uint32 body_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional bytes m_parameter = 6;
    if (has_m_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_parameter());
    }

    // optional bytes s_parameter = 8;
    if (has_s_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_parameter());
    }

    // optional uint32 body_id = 2;
    if (has_body_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body_id());
    }

    // optional uint32 more_flag = 3;
    if (has_more_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->more_flag());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional bool store = 5;
    if (has_store()) {
      total_size += 1 + 1;
    }

    // optional uint32 service_id = 7;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  // optional uint32 expire_time = 12;
  if (has_expire_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expire_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.ChatReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.ChatReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.ChatReq)
    MergeFrom(*source);
  }
}

void ChatReq::MergeFrom(const ChatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.ChatReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_m_parameter();
      m_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_parameter_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_s_parameter();
      s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
    }
    if (cached_has_bits & 0x00000008u) {
      body_id_ = from.body_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      more_flag_ = from.more_flag_;
    }
    if (cached_has_bits & 0x00000020u) {
      body_type_ = from.body_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      store_ = from.store_;
    }
    if (cached_has_bits & 0x00000080u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_expire_time(from.expire_time());
  }
}

void ChatReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.ChatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatReq::CopyFrom(const ChatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.ChatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  return true;
}

void ChatReq::Swap(ChatReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatReq::InternalSwap(ChatReq* other) {
  body_.Swap(&other->body_);
  m_parameter_.Swap(&other->m_parameter_);
  s_parameter_.Swap(&other->s_parameter_);
  std::swap(body_id_, other->body_id_);
  std::swap(more_flag_, other->more_flag_);
  std::swap(body_type_, other->body_type_);
  std::swap(store_, other->store_);
  std::swap(service_id_, other->service_id_);
  std::swap(expire_time_, other->expire_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatReq::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatReq

// required bytes body = 1;
bool ChatReq::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatReq::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatReq::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatReq::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& ChatReq::body() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatReq.body)
  return body_.GetNoArena();
}
void ChatReq::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatReq.body)
}
#if LANG_CXX11
void ChatReq::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.ChatReq.body)
}
#endif
void ChatReq::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.ChatReq.body)
}
void ChatReq::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.ChatReq.body)
}
::std::string* ChatReq::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.ChatReq.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatReq::release_body() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.ChatReq.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatReq::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.ChatReq.body)
}

// optional uint32 body_id = 2;
bool ChatReq::has_body_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatReq::set_has_body_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatReq::clear_has_body_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatReq::clear_body_id() {
  body_id_ = 0u;
  clear_has_body_id();
}
::google::protobuf::uint32 ChatReq::body_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatReq.body_id)
  return body_id_;
}
void ChatReq::set_body_id(::google::protobuf::uint32 value) {
  set_has_body_id();
  body_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatReq.body_id)
}

// optional uint32 more_flag = 3;
bool ChatReq::has_more_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatReq::set_has_more_flag() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatReq::clear_has_more_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatReq::clear_more_flag() {
  more_flag_ = 0u;
  clear_has_more_flag();
}
::google::protobuf::uint32 ChatReq::more_flag() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatReq.more_flag)
  return more_flag_;
}
void ChatReq::set_more_flag(::google::protobuf::uint32 value) {
  set_has_more_flag();
  more_flag_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatReq.more_flag)
}

// required uint32 body_type = 4;
bool ChatReq::has_body_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatReq::set_has_body_type() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatReq::clear_has_body_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatReq::clear_body_type() {
  body_type_ = 0u;
  clear_has_body_type();
}
::google::protobuf::uint32 ChatReq::body_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatReq.body_type)
  return body_type_;
}
void ChatReq::set_body_type(::google::protobuf::uint32 value) {
  set_has_body_type();
  body_type_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatReq.body_type)
}

// optional bool store = 5;
bool ChatReq::has_store() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChatReq::set_has_store() {
  _has_bits_[0] |= 0x00000040u;
}
void ChatReq::clear_has_store() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChatReq::clear_store() {
  store_ = false;
  clear_has_store();
}
bool ChatReq::store() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatReq.store)
  return store_;
}
void ChatReq::set_store(bool value) {
  set_has_store();
  store_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatReq.store)
}

// optional bytes m_parameter = 6;
bool ChatReq::has_m_parameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatReq::set_has_m_parameter() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatReq::clear_has_m_parameter() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatReq::clear_m_parameter() {
  m_parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_parameter();
}
const ::std::string& ChatReq::m_parameter() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatReq.m_parameter)
  return m_parameter_.GetNoArena();
}
void ChatReq::set_m_parameter(const ::std::string& value) {
  set_has_m_parameter();
  m_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatReq.m_parameter)
}
#if LANG_CXX11
void ChatReq::set_m_parameter(::std::string&& value) {
  set_has_m_parameter();
  m_parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.ChatReq.m_parameter)
}
#endif
void ChatReq::set_m_parameter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_m_parameter();
  m_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.ChatReq.m_parameter)
}
void ChatReq::set_m_parameter(const void* value, size_t size) {
  set_has_m_parameter();
  m_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.ChatReq.m_parameter)
}
::std::string* ChatReq::mutable_m_parameter() {
  set_has_m_parameter();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.ChatReq.m_parameter)
  return m_parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatReq::release_m_parameter() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.ChatReq.m_parameter)
  clear_has_m_parameter();
  return m_parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatReq::set_allocated_m_parameter(::std::string* m_parameter) {
  if (m_parameter != NULL) {
    set_has_m_parameter();
  } else {
    clear_has_m_parameter();
  }
  m_parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_parameter);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.ChatReq.m_parameter)
}

// optional uint32 service_id = 7;
bool ChatReq::has_service_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChatReq::set_has_service_id() {
  _has_bits_[0] |= 0x00000080u;
}
void ChatReq::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChatReq::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 ChatReq::service_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatReq.service_id)
  return service_id_;
}
void ChatReq::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatReq.service_id)
}

// optional bytes s_parameter = 8;
bool ChatReq::has_s_parameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatReq::set_has_s_parameter() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatReq::clear_has_s_parameter() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatReq::clear_s_parameter() {
  s_parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s_parameter();
}
const ::std::string& ChatReq::s_parameter() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatReq.s_parameter)
  return s_parameter_.GetNoArena();
}
void ChatReq::set_s_parameter(const ::std::string& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatReq.s_parameter)
}
#if LANG_CXX11
void ChatReq::set_s_parameter(::std::string&& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.ChatReq.s_parameter)
}
#endif
void ChatReq::set_s_parameter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.ChatReq.s_parameter)
}
void ChatReq::set_s_parameter(const void* value, size_t size) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.ChatReq.s_parameter)
}
::std::string* ChatReq::mutable_s_parameter() {
  set_has_s_parameter();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.ChatReq.s_parameter)
  return s_parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatReq::release_s_parameter() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.ChatReq.s_parameter)
  clear_has_s_parameter();
  return s_parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatReq::set_allocated_s_parameter(::std::string* s_parameter) {
  if (s_parameter != NULL) {
    set_has_s_parameter();
  } else {
    clear_has_s_parameter();
  }
  s_parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s_parameter);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.ChatReq.s_parameter)
}

// optional uint32 expire_time = 12;
bool ChatReq::has_expire_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChatReq::set_has_expire_time() {
  _has_bits_[0] |= 0x00000100u;
}
void ChatReq::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChatReq::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
::google::protobuf::uint32 ChatReq::expire_time() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatReq.expire_time)
  return expire_time_;
}
void ChatReq::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatReq.expire_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatResp::kResultFieldNumber;
const int ChatResp::kBodyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatResp::ChatResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ChatResp)
}
ChatResp::ChatResp(const ChatResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&body_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(body_id_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ChatResp)
}

void ChatResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&body_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(body_id_));
}

ChatResp::~ChatResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ChatResp)
  SharedDtor();
}

void ChatResp::SharedDtor() {
}

void ChatResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatResp::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatResp& ChatResp::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatResp* ChatResp::New(::google::protobuf::Arena* arena) const {
  ChatResp* n = new ChatResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatResp::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.ChatResp)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&body_id_) -
      reinterpret_cast<char*>(&result_) + sizeof(body_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ChatResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 body_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_body_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ChatResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ChatResp)
  return false;
#undef DO_
}

void ChatResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ChatResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 body_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->body_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ChatResp)
}

::google::protobuf::uint8* ChatResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ChatResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 body_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->body_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ChatResp)
  return target;
}

size_t ChatResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.ChatResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }
  // optional uint32 body_id = 2;
  if (has_body_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->body_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.ChatResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.ChatResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.ChatResp)
    MergeFrom(*source);
  }
}

void ChatResp::MergeFrom(const ChatResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.ChatResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      body_id_ = from.body_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.ChatResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatResp::CopyFrom(const ChatResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.ChatResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ChatResp::Swap(ChatResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatResp::InternalSwap(ChatResp* other) {
  std::swap(result_, other->result_);
  std::swap(body_id_, other->body_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatResp::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatResp

// required uint32 result = 1;
bool ChatResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 ChatResp::result() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatResp.result)
  return result_;
}
void ChatResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatResp.result)
}

// optional uint32 body_id = 2;
bool ChatResp::has_body_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatResp::set_has_body_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatResp::clear_has_body_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatResp::clear_body_id() {
  body_id_ = 0u;
  clear_has_body_id();
}
::google::protobuf::uint32 ChatResp::body_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ChatResp.body_id)
  return body_id_;
}
void ChatResp::set_body_id(::google::protobuf::uint32 value) {
  set_has_body_id();
  body_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ChatResp.body_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInfoReq::kInfoTypeFieldNumber;
const int GetInfoReq::kGetInfoIdFieldNumber;
const int GetInfoReq::kGetInfoOffsetFieldNumber;
const int GetInfoReq::kSParameterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoReq::GetInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.GetInfoReq)
}
GetInfoReq::GetInfoReq(const GetInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info_type()) {
    info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
  }
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s_parameter()) {
    s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
  }
  ::memcpy(&get_info_id_, &from.get_info_id_,
    reinterpret_cast<char*>(&get_info_offset_) -
    reinterpret_cast<char*>(&get_info_id_) + sizeof(get_info_offset_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.GetInfoReq)
}

void GetInfoReq::SharedCtor() {
  _cached_size_ = 0;
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&get_info_id_, 0, reinterpret_cast<char*>(&get_info_offset_) -
    reinterpret_cast<char*>(&get_info_id_) + sizeof(get_info_offset_));
}

GetInfoReq::~GetInfoReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.GetInfoReq)
  SharedDtor();
}

void GetInfoReq::SharedDtor() {
  info_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoReq::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetInfoReq& GetInfoReq::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInfoReq* GetInfoReq::New(::google::protobuf::Arena* arena) const {
  GetInfoReq* n = new GetInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.GetInfoReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_info_type()) {
      GOOGLE_DCHECK(!info_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*info_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_s_parameter()) {
      GOOGLE_DCHECK(!s_parameter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*s_parameter_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&get_info_id_, 0, reinterpret_cast<char*>(&get_info_offset_) -
      reinterpret_cast<char*>(&get_info_id_) + sizeof(get_info_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.GetInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.GetInfoReq.info_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 get_info_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_get_info_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &get_info_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 get_info_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_get_info_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_info_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes s_parameter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.GetInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.GetInfoReq)
  return false;
#undef DO_
}

void GetInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.GetInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.GetInfoReq.info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // required int64 get_info_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->get_info_id(), output);
  }

  // optional int32 get_info_offset = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->get_info_offset(), output);
  }

  // optional bytes s_parameter = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->s_parameter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.GetInfoReq)
}

::google::protobuf::uint8* GetInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.GetInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.GetInfoReq.info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // required int64 get_info_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->get_info_id(), target);
  }

  // optional int32 get_info_offset = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->get_info_offset(), target);
  }

  // optional bytes s_parameter = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->s_parameter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.GetInfoReq)
  return target;
}

size_t GetInfoReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.GetInfoReq)
  size_t total_size = 0;

  if (has_info_type()) {
    // required string info_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info_type());
  }

  if (has_get_info_id()) {
    // required int64 get_info_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->get_info_id());
  }

  return total_size;
}
size_t GetInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.GetInfoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string info_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info_type());

    // required int64 get_info_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->get_info_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes s_parameter = 4;
  if (has_s_parameter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->s_parameter());
  }

  // optional int32 get_info_offset = 3;
  if (has_get_info_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->get_info_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.GetInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.GetInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.GetInfoReq)
    MergeFrom(*source);
  }
}

void GetInfoReq::MergeFrom(const GetInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.GetInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_info_type();
      info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_s_parameter();
      s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
    }
    if (cached_has_bits & 0x00000004u) {
      get_info_id_ = from.get_info_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      get_info_offset_ = from.get_info_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.GetInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoReq::CopyFrom(const GetInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.GetInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void GetInfoReq::Swap(GetInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoReq::InternalSwap(GetInfoReq* other) {
  info_type_.Swap(&other->info_type_);
  s_parameter_.Swap(&other->s_parameter_);
  std::swap(get_info_id_, other->get_info_id_);
  std::swap(get_info_offset_, other->get_info_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoReq::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoReq

// required string info_type = 1;
bool GetInfoReq::has_info_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetInfoReq::set_has_info_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GetInfoReq::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetInfoReq::clear_info_type() {
  info_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info_type();
}
const ::std::string& GetInfoReq::info_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetInfoReq.info_type)
  return info_type_.GetNoArena();
}
void GetInfoReq::set_info_type(const ::std::string& value) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetInfoReq.info_type)
}
#if LANG_CXX11
void GetInfoReq::set_info_type(::std::string&& value) {
  set_has_info_type();
  info_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.GetInfoReq.info_type)
}
#endif
void GetInfoReq::set_info_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.GetInfoReq.info_type)
}
void GetInfoReq::set_info_type(const char* value, size_t size) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.GetInfoReq.info_type)
}
::std::string* GetInfoReq::mutable_info_type() {
  set_has_info_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetInfoReq.info_type)
  return info_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoReq::release_info_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.GetInfoReq.info_type)
  clear_has_info_type();
  return info_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoReq::set_allocated_info_type(::std::string* info_type) {
  if (info_type != NULL) {
    set_has_info_type();
  } else {
    clear_has_info_type();
  }
  info_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.GetInfoReq.info_type)
}

// required int64 get_info_id = 2;
bool GetInfoReq::has_get_info_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetInfoReq::set_has_get_info_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GetInfoReq::clear_has_get_info_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetInfoReq::clear_get_info_id() {
  get_info_id_ = GOOGLE_LONGLONG(0);
  clear_has_get_info_id();
}
::google::protobuf::int64 GetInfoReq::get_info_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetInfoReq.get_info_id)
  return get_info_id_;
}
void GetInfoReq::set_get_info_id(::google::protobuf::int64 value) {
  set_has_get_info_id();
  get_info_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetInfoReq.get_info_id)
}

// optional int32 get_info_offset = 3;
bool GetInfoReq::has_get_info_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetInfoReq::set_has_get_info_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void GetInfoReq::clear_has_get_info_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetInfoReq::clear_get_info_offset() {
  get_info_offset_ = 0;
  clear_has_get_info_offset();
}
::google::protobuf::int32 GetInfoReq::get_info_offset() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetInfoReq.get_info_offset)
  return get_info_offset_;
}
void GetInfoReq::set_get_info_offset(::google::protobuf::int32 value) {
  set_has_get_info_offset();
  get_info_offset_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetInfoReq.get_info_offset)
}

// optional bytes s_parameter = 4;
bool GetInfoReq::has_s_parameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetInfoReq::set_has_s_parameter() {
  _has_bits_[0] |= 0x00000002u;
}
void GetInfoReq::clear_has_s_parameter() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetInfoReq::clear_s_parameter() {
  s_parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s_parameter();
}
const ::std::string& GetInfoReq::s_parameter() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetInfoReq.s_parameter)
  return s_parameter_.GetNoArena();
}
void GetInfoReq::set_s_parameter(const ::std::string& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetInfoReq.s_parameter)
}
#if LANG_CXX11
void GetInfoReq::set_s_parameter(::std::string&& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.GetInfoReq.s_parameter)
}
#endif
void GetInfoReq::set_s_parameter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.GetInfoReq.s_parameter)
}
void GetInfoReq::set_s_parameter(const void* value, size_t size) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.GetInfoReq.s_parameter)
}
::std::string* GetInfoReq::mutable_s_parameter() {
  set_has_s_parameter();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetInfoReq.s_parameter)
  return s_parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoReq::release_s_parameter() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.GetInfoReq.s_parameter)
  clear_has_s_parameter();
  return s_parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoReq::set_allocated_s_parameter(::std::string* s_parameter) {
  if (s_parameter != NULL) {
    set_has_s_parameter();
  } else {
    clear_has_s_parameter();
  }
  s_parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s_parameter);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.GetInfoReq.s_parameter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInfoResp::kInfoTypeFieldNumber;
const int GetInfoResp::kInfosFieldNumber;
const int GetInfoResp::kLastInfoIdFieldNumber;
const int GetInfoResp::kSParameterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoResp::GetInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.GetInfoResp)
}
GetInfoResp::GetInfoResp(const GetInfoResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info_type()) {
    info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
  }
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s_parameter()) {
    s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
  }
  last_info_id_ = from.last_info_id_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.GetInfoResp)
}

void GetInfoResp::SharedCtor() {
  _cached_size_ = 0;
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_info_id_ = GOOGLE_LONGLONG(0);
}

GetInfoResp::~GetInfoResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.GetInfoResp)
  SharedDtor();
}

void GetInfoResp::SharedDtor() {
  info_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoResp::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetInfoResp& GetInfoResp::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInfoResp* GetInfoResp::New(::google::protobuf::Arena* arena) const {
  GetInfoResp* n = new GetInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.GetInfoResp)
  infos_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_info_type()) {
      GOOGLE_DCHECK(!info_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*info_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_s_parameter()) {
      GOOGLE_DCHECK(!s_parameter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*s_parameter_.UnsafeRawStringPointer())->clear();
    }
  }
  last_info_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.GetInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.GetInfoResp.info_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.messages.Info infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_info_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_last_info_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_info_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes s_parameter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.GetInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.GetInfoResp)
  return false;
#undef DO_
}

void GetInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.GetInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.GetInfoResp.info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // repeated .qihoo.protocol.messages.Info infos = 2;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional int64 last_info_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_info_id(), output);
  }

  // optional bytes s_parameter = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->s_parameter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.GetInfoResp)
}

::google::protobuf::uint8* GetInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.GetInfoResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.GetInfoResp.info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // repeated .qihoo.protocol.messages.Info infos = 2;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->infos(i), deterministic, target);
  }

  // optional int64 last_info_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_info_id(), target);
  }

  // optional bytes s_parameter = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->s_parameter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.GetInfoResp)
  return target;
}

size_t GetInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.GetInfoResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string info_type = 1;
  if (has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info_type());
  }
  // repeated .qihoo.protocol.messages.Info infos = 2;
  {
    unsigned int count = this->infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(i));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes s_parameter = 4;
    if (has_s_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_parameter());
    }

    // optional int64 last_info_id = 3;
    if (has_last_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_info_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.GetInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.GetInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.GetInfoResp)
    MergeFrom(*source);
  }
}

void GetInfoResp::MergeFrom(const GetInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.GetInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_info_type();
      info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_s_parameter();
      s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
    }
    if (cached_has_bits & 0x00000004u) {
      last_info_id_ = from.last_info_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.GetInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResp::CopyFrom(const GetInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.GetInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->infos())) return false;
  return true;
}

void GetInfoResp::Swap(GetInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoResp::InternalSwap(GetInfoResp* other) {
  infos_.InternalSwap(&other->infos_);
  info_type_.Swap(&other->info_type_);
  s_parameter_.Swap(&other->s_parameter_);
  std::swap(last_info_id_, other->last_info_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoResp::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoResp

// required string info_type = 1;
bool GetInfoResp::has_info_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetInfoResp::set_has_info_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GetInfoResp::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetInfoResp::clear_info_type() {
  info_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info_type();
}
const ::std::string& GetInfoResp::info_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetInfoResp.info_type)
  return info_type_.GetNoArena();
}
void GetInfoResp::set_info_type(const ::std::string& value) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetInfoResp.info_type)
}
#if LANG_CXX11
void GetInfoResp::set_info_type(::std::string&& value) {
  set_has_info_type();
  info_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.GetInfoResp.info_type)
}
#endif
void GetInfoResp::set_info_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.GetInfoResp.info_type)
}
void GetInfoResp::set_info_type(const char* value, size_t size) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.GetInfoResp.info_type)
}
::std::string* GetInfoResp::mutable_info_type() {
  set_has_info_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetInfoResp.info_type)
  return info_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoResp::release_info_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.GetInfoResp.info_type)
  clear_has_info_type();
  return info_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoResp::set_allocated_info_type(::std::string* info_type) {
  if (info_type != NULL) {
    set_has_info_type();
  } else {
    clear_has_info_type();
  }
  info_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.GetInfoResp.info_type)
}

// repeated .qihoo.protocol.messages.Info infos = 2;
int GetInfoResp::infos_size() const {
  return infos_.size();
}
void GetInfoResp::clear_infos() {
  infos_.Clear();
}
const ::qihoo::protocol::messages::Info& GetInfoResp::infos(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetInfoResp.infos)
  return infos_.Get(index);
}
::qihoo::protocol::messages::Info* GetInfoResp::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetInfoResp.infos)
  return infos_.Mutable(index);
}
::qihoo::protocol::messages::Info* GetInfoResp::add_infos() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.GetInfoResp.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::Info >*
GetInfoResp::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.messages.GetInfoResp.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::Info >&
GetInfoResp::infos() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.messages.GetInfoResp.infos)
  return infos_;
}

// optional int64 last_info_id = 3;
bool GetInfoResp::has_last_info_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetInfoResp::set_has_last_info_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GetInfoResp::clear_has_last_info_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetInfoResp::clear_last_info_id() {
  last_info_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_info_id();
}
::google::protobuf::int64 GetInfoResp::last_info_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetInfoResp.last_info_id)
  return last_info_id_;
}
void GetInfoResp::set_last_info_id(::google::protobuf::int64 value) {
  set_has_last_info_id();
  last_info_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetInfoResp.last_info_id)
}

// optional bytes s_parameter = 4;
bool GetInfoResp::has_s_parameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetInfoResp::set_has_s_parameter() {
  _has_bits_[0] |= 0x00000002u;
}
void GetInfoResp::clear_has_s_parameter() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetInfoResp::clear_s_parameter() {
  s_parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s_parameter();
}
const ::std::string& GetInfoResp::s_parameter() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetInfoResp.s_parameter)
  return s_parameter_.GetNoArena();
}
void GetInfoResp::set_s_parameter(const ::std::string& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetInfoResp.s_parameter)
}
#if LANG_CXX11
void GetInfoResp::set_s_parameter(::std::string&& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.GetInfoResp.s_parameter)
}
#endif
void GetInfoResp::set_s_parameter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.GetInfoResp.s_parameter)
}
void GetInfoResp::set_s_parameter(const void* value, size_t size) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.GetInfoResp.s_parameter)
}
::std::string* GetInfoResp::mutable_s_parameter() {
  set_has_s_parameter();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetInfoResp.s_parameter)
  return s_parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoResp::release_s_parameter() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.GetInfoResp.s_parameter)
  clear_has_s_parameter();
  return s_parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoResp::set_allocated_s_parameter(::std::string* s_parameter) {
  if (s_parameter != NULL) {
    set_has_s_parameter();
  } else {
    clear_has_s_parameter();
  }
  s_parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s_parameter);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.GetInfoResp.s_parameter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMultiInfosReq::kInfoTypeFieldNumber;
const int GetMultiInfosReq::kGetInfoIdsFieldNumber;
const int GetMultiInfosReq::kSParameterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMultiInfosReq::GetMultiInfosReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.GetMultiInfosReq)
}
GetMultiInfosReq::GetMultiInfosReq(const GetMultiInfosReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      get_info_ids_(from.get_info_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info_type()) {
    info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
  }
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s_parameter()) {
    s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.GetMultiInfosReq)
}

void GetMultiInfosReq::SharedCtor() {
  _cached_size_ = 0;
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetMultiInfosReq::~GetMultiInfosReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.GetMultiInfosReq)
  SharedDtor();
}

void GetMultiInfosReq::SharedDtor() {
  info_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetMultiInfosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMultiInfosReq::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMultiInfosReq& GetMultiInfosReq::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMultiInfosReq* GetMultiInfosReq::New(::google::protobuf::Arena* arena) const {
  GetMultiInfosReq* n = new GetMultiInfosReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMultiInfosReq::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.GetMultiInfosReq)
  get_info_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_info_type()) {
      GOOGLE_DCHECK(!info_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*info_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_s_parameter()) {
      GOOGLE_DCHECK(!s_parameter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*s_parameter_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMultiInfosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.GetMultiInfosReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.GetMultiInfosReq.info_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 get_info_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_get_info_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_get_info_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes s_parameter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.GetMultiInfosReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.GetMultiInfosReq)
  return false;
#undef DO_
}

void GetMultiInfosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.GetMultiInfosReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.GetMultiInfosReq.info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // repeated int64 get_info_ids = 2;
  for (int i = 0, n = this->get_info_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->get_info_ids(i), output);
  }

  // optional bytes s_parameter = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->s_parameter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.GetMultiInfosReq)
}

::google::protobuf::uint8* GetMultiInfosReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.GetMultiInfosReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.GetMultiInfosReq.info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // repeated int64 get_info_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->get_info_ids_, target);

  // optional bytes s_parameter = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->s_parameter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.GetMultiInfosReq)
  return target;
}

size_t GetMultiInfosReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.GetMultiInfosReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string info_type = 1;
  if (has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info_type());
  }
  // repeated int64 get_info_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->get_info_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->get_info_ids_size());
    total_size += data_size;
  }

  // optional bytes s_parameter = 3;
  if (has_s_parameter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->s_parameter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMultiInfosReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.GetMultiInfosReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMultiInfosReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMultiInfosReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.GetMultiInfosReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.GetMultiInfosReq)
    MergeFrom(*source);
  }
}

void GetMultiInfosReq::MergeFrom(const GetMultiInfosReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.GetMultiInfosReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  get_info_ids_.MergeFrom(from.get_info_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_info_type();
      info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_s_parameter();
      s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
    }
  }
}

void GetMultiInfosReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.GetMultiInfosReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultiInfosReq::CopyFrom(const GetMultiInfosReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.GetMultiInfosReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiInfosReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetMultiInfosReq::Swap(GetMultiInfosReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMultiInfosReq::InternalSwap(GetMultiInfosReq* other) {
  get_info_ids_.InternalSwap(&other->get_info_ids_);
  info_type_.Swap(&other->info_type_);
  s_parameter_.Swap(&other->s_parameter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMultiInfosReq::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMultiInfosReq

// required string info_type = 1;
bool GetMultiInfosReq::has_info_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetMultiInfosReq::set_has_info_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GetMultiInfosReq::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetMultiInfosReq::clear_info_type() {
  info_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info_type();
}
const ::std::string& GetMultiInfosReq::info_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetMultiInfosReq.info_type)
  return info_type_.GetNoArena();
}
void GetMultiInfosReq::set_info_type(const ::std::string& value) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetMultiInfosReq.info_type)
}
#if LANG_CXX11
void GetMultiInfosReq::set_info_type(::std::string&& value) {
  set_has_info_type();
  info_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.GetMultiInfosReq.info_type)
}
#endif
void GetMultiInfosReq::set_info_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.GetMultiInfosReq.info_type)
}
void GetMultiInfosReq::set_info_type(const char* value, size_t size) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.GetMultiInfosReq.info_type)
}
::std::string* GetMultiInfosReq::mutable_info_type() {
  set_has_info_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetMultiInfosReq.info_type)
  return info_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetMultiInfosReq::release_info_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.GetMultiInfosReq.info_type)
  clear_has_info_type();
  return info_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetMultiInfosReq::set_allocated_info_type(::std::string* info_type) {
  if (info_type != NULL) {
    set_has_info_type();
  } else {
    clear_has_info_type();
  }
  info_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.GetMultiInfosReq.info_type)
}

// repeated int64 get_info_ids = 2;
int GetMultiInfosReq::get_info_ids_size() const {
  return get_info_ids_.size();
}
void GetMultiInfosReq::clear_get_info_ids() {
  get_info_ids_.Clear();
}
::google::protobuf::int64 GetMultiInfosReq::get_info_ids(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetMultiInfosReq.get_info_ids)
  return get_info_ids_.Get(index);
}
void GetMultiInfosReq::set_get_info_ids(int index, ::google::protobuf::int64 value) {
  get_info_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetMultiInfosReq.get_info_ids)
}
void GetMultiInfosReq::add_get_info_ids(::google::protobuf::int64 value) {
  get_info_ids_.Add(value);
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.GetMultiInfosReq.get_info_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetMultiInfosReq::get_info_ids() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.messages.GetMultiInfosReq.get_info_ids)
  return get_info_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetMultiInfosReq::mutable_get_info_ids() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.messages.GetMultiInfosReq.get_info_ids)
  return &get_info_ids_;
}

// optional bytes s_parameter = 3;
bool GetMultiInfosReq::has_s_parameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetMultiInfosReq::set_has_s_parameter() {
  _has_bits_[0] |= 0x00000002u;
}
void GetMultiInfosReq::clear_has_s_parameter() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetMultiInfosReq::clear_s_parameter() {
  s_parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s_parameter();
}
const ::std::string& GetMultiInfosReq::s_parameter() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetMultiInfosReq.s_parameter)
  return s_parameter_.GetNoArena();
}
void GetMultiInfosReq::set_s_parameter(const ::std::string& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetMultiInfosReq.s_parameter)
}
#if LANG_CXX11
void GetMultiInfosReq::set_s_parameter(::std::string&& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.GetMultiInfosReq.s_parameter)
}
#endif
void GetMultiInfosReq::set_s_parameter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.GetMultiInfosReq.s_parameter)
}
void GetMultiInfosReq::set_s_parameter(const void* value, size_t size) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.GetMultiInfosReq.s_parameter)
}
::std::string* GetMultiInfosReq::mutable_s_parameter() {
  set_has_s_parameter();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetMultiInfosReq.s_parameter)
  return s_parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetMultiInfosReq::release_s_parameter() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.GetMultiInfosReq.s_parameter)
  clear_has_s_parameter();
  return s_parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetMultiInfosReq::set_allocated_s_parameter(::std::string* s_parameter) {
  if (s_parameter != NULL) {
    set_has_s_parameter();
  } else {
    clear_has_s_parameter();
  }
  s_parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s_parameter);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.GetMultiInfosReq.s_parameter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMultiInfosResp::kInfoTypeFieldNumber;
const int GetMultiInfosResp::kInfosFieldNumber;
const int GetMultiInfosResp::kLastInfoIdFieldNumber;
const int GetMultiInfosResp::kSParameterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMultiInfosResp::GetMultiInfosResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.GetMultiInfosResp)
}
GetMultiInfosResp::GetMultiInfosResp(const GetMultiInfosResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info_type()) {
    info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
  }
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s_parameter()) {
    s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
  }
  last_info_id_ = from.last_info_id_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.GetMultiInfosResp)
}

void GetMultiInfosResp::SharedCtor() {
  _cached_size_ = 0;
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_info_id_ = GOOGLE_LONGLONG(0);
}

GetMultiInfosResp::~GetMultiInfosResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.GetMultiInfosResp)
  SharedDtor();
}

void GetMultiInfosResp::SharedDtor() {
  info_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_parameter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetMultiInfosResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMultiInfosResp::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMultiInfosResp& GetMultiInfosResp::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMultiInfosResp* GetMultiInfosResp::New(::google::protobuf::Arena* arena) const {
  GetMultiInfosResp* n = new GetMultiInfosResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMultiInfosResp::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.GetMultiInfosResp)
  infos_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_info_type()) {
      GOOGLE_DCHECK(!info_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*info_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_s_parameter()) {
      GOOGLE_DCHECK(!s_parameter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*s_parameter_.UnsafeRawStringPointer())->clear();
    }
  }
  last_info_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMultiInfosResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.GetMultiInfosResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.GetMultiInfosResp.info_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.messages.Info infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_info_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_last_info_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_info_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes s_parameter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.GetMultiInfosResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.GetMultiInfosResp)
  return false;
#undef DO_
}

void GetMultiInfosResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.GetMultiInfosResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.GetMultiInfosResp.info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // repeated .qihoo.protocol.messages.Info infos = 2;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional int64 last_info_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_info_id(), output);
  }

  // optional bytes s_parameter = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->s_parameter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.GetMultiInfosResp)
}

::google::protobuf::uint8* GetMultiInfosResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.GetMultiInfosResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.GetMultiInfosResp.info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // repeated .qihoo.protocol.messages.Info infos = 2;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->infos(i), deterministic, target);
  }

  // optional int64 last_info_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_info_id(), target);
  }

  // optional bytes s_parameter = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->s_parameter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.GetMultiInfosResp)
  return target;
}

size_t GetMultiInfosResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.GetMultiInfosResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string info_type = 1;
  if (has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info_type());
  }
  // repeated .qihoo.protocol.messages.Info infos = 2;
  {
    unsigned int count = this->infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(i));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes s_parameter = 4;
    if (has_s_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_parameter());
    }

    // optional int64 last_info_id = 3;
    if (has_last_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_info_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMultiInfosResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.GetMultiInfosResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMultiInfosResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMultiInfosResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.GetMultiInfosResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.GetMultiInfosResp)
    MergeFrom(*source);
  }
}

void GetMultiInfosResp::MergeFrom(const GetMultiInfosResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.GetMultiInfosResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_info_type();
      info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_s_parameter();
      s_parameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_parameter_);
    }
    if (cached_has_bits & 0x00000004u) {
      last_info_id_ = from.last_info_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMultiInfosResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.GetMultiInfosResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultiInfosResp::CopyFrom(const GetMultiInfosResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.GetMultiInfosResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiInfosResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->infos())) return false;
  return true;
}

void GetMultiInfosResp::Swap(GetMultiInfosResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMultiInfosResp::InternalSwap(GetMultiInfosResp* other) {
  infos_.InternalSwap(&other->infos_);
  info_type_.Swap(&other->info_type_);
  s_parameter_.Swap(&other->s_parameter_);
  std::swap(last_info_id_, other->last_info_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMultiInfosResp::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMultiInfosResp

// required string info_type = 1;
bool GetMultiInfosResp::has_info_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetMultiInfosResp::set_has_info_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GetMultiInfosResp::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetMultiInfosResp::clear_info_type() {
  info_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info_type();
}
const ::std::string& GetMultiInfosResp::info_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetMultiInfosResp.info_type)
  return info_type_.GetNoArena();
}
void GetMultiInfosResp::set_info_type(const ::std::string& value) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetMultiInfosResp.info_type)
}
#if LANG_CXX11
void GetMultiInfosResp::set_info_type(::std::string&& value) {
  set_has_info_type();
  info_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.GetMultiInfosResp.info_type)
}
#endif
void GetMultiInfosResp::set_info_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.GetMultiInfosResp.info_type)
}
void GetMultiInfosResp::set_info_type(const char* value, size_t size) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.GetMultiInfosResp.info_type)
}
::std::string* GetMultiInfosResp::mutable_info_type() {
  set_has_info_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetMultiInfosResp.info_type)
  return info_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetMultiInfosResp::release_info_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.GetMultiInfosResp.info_type)
  clear_has_info_type();
  return info_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetMultiInfosResp::set_allocated_info_type(::std::string* info_type) {
  if (info_type != NULL) {
    set_has_info_type();
  } else {
    clear_has_info_type();
  }
  info_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.GetMultiInfosResp.info_type)
}

// repeated .qihoo.protocol.messages.Info infos = 2;
int GetMultiInfosResp::infos_size() const {
  return infos_.size();
}
void GetMultiInfosResp::clear_infos() {
  infos_.Clear();
}
const ::qihoo::protocol::messages::Info& GetMultiInfosResp::infos(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetMultiInfosResp.infos)
  return infos_.Get(index);
}
::qihoo::protocol::messages::Info* GetMultiInfosResp::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetMultiInfosResp.infos)
  return infos_.Mutable(index);
}
::qihoo::protocol::messages::Info* GetMultiInfosResp::add_infos() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.GetMultiInfosResp.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::Info >*
GetMultiInfosResp::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.messages.GetMultiInfosResp.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::Info >&
GetMultiInfosResp::infos() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.messages.GetMultiInfosResp.infos)
  return infos_;
}

// optional int64 last_info_id = 3;
bool GetMultiInfosResp::has_last_info_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetMultiInfosResp::set_has_last_info_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GetMultiInfosResp::clear_has_last_info_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetMultiInfosResp::clear_last_info_id() {
  last_info_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_info_id();
}
::google::protobuf::int64 GetMultiInfosResp::last_info_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetMultiInfosResp.last_info_id)
  return last_info_id_;
}
void GetMultiInfosResp::set_last_info_id(::google::protobuf::int64 value) {
  set_has_last_info_id();
  last_info_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetMultiInfosResp.last_info_id)
}

// optional bytes s_parameter = 4;
bool GetMultiInfosResp::has_s_parameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetMultiInfosResp::set_has_s_parameter() {
  _has_bits_[0] |= 0x00000002u;
}
void GetMultiInfosResp::clear_has_s_parameter() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetMultiInfosResp::clear_s_parameter() {
  s_parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s_parameter();
}
const ::std::string& GetMultiInfosResp::s_parameter() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.GetMultiInfosResp.s_parameter)
  return s_parameter_.GetNoArena();
}
void GetMultiInfosResp::set_s_parameter(const ::std::string& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.GetMultiInfosResp.s_parameter)
}
#if LANG_CXX11
void GetMultiInfosResp::set_s_parameter(::std::string&& value) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.GetMultiInfosResp.s_parameter)
}
#endif
void GetMultiInfosResp::set_s_parameter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.GetMultiInfosResp.s_parameter)
}
void GetMultiInfosResp::set_s_parameter(const void* value, size_t size) {
  set_has_s_parameter();
  s_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.GetMultiInfosResp.s_parameter)
}
::std::string* GetMultiInfosResp::mutable_s_parameter() {
  set_has_s_parameter();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.GetMultiInfosResp.s_parameter)
  return s_parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetMultiInfosResp::release_s_parameter() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.GetMultiInfosResp.s_parameter)
  clear_has_s_parameter();
  return s_parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetMultiInfosResp::set_allocated_s_parameter(::std::string* s_parameter) {
  if (s_parameter != NULL) {
    set_has_s_parameter();
  } else {
    clear_has_s_parameter();
  }
  s_parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s_parameter);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.GetMultiInfosResp.s_parameter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutReq::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutReq::LogoutReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.LogoutReq)
}
LogoutReq::LogoutReq(const LogoutReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.LogoutReq)
}

void LogoutReq::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogoutReq::~LogoutReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.LogoutReq)
  SharedDtor();
}

void LogoutReq::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutReq::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogoutReq& LogoutReq::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogoutReq* LogoutReq::New(::google::protobuf::Arena* arena) const {
  LogoutReq* n = new LogoutReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.LogoutReq)
  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.LogoutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.LogoutReq.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.LogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.LogoutReq)
  return false;
#undef DO_
}

void LogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.LogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LogoutReq.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.LogoutReq)
}

::google::protobuf::uint8* LogoutReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.LogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.LogoutReq.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.LogoutReq)
  return target;
}

size_t LogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.LogoutReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string reason = 1;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.LogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.LogoutReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.LogoutReq)
    MergeFrom(*source);
  }
}

void LogoutReq::MergeFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.LogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason()) {
    set_has_reason();
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void LogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {
  return true;
}

void LogoutReq::Swap(LogoutReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutReq::InternalSwap(LogoutReq* other) {
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutReq::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutReq

// optional string reason = 1;
bool LogoutReq::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogoutReq::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void LogoutReq::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogoutReq::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& LogoutReq::reason() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LogoutReq.reason)
  return reason_.GetNoArena();
}
void LogoutReq::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LogoutReq.reason)
}
#if LANG_CXX11
void LogoutReq::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.LogoutReq.reason)
}
#endif
void LogoutReq::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.LogoutReq.reason)
}
void LogoutReq::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.LogoutReq.reason)
}
::std::string* LogoutReq::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.LogoutReq.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogoutReq::release_reason() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.LogoutReq.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogoutReq::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.LogoutReq.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutResp::LogoutResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.LogoutResp)
}
LogoutResp::LogoutResp(const LogoutResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.LogoutResp)
}

void LogoutResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

LogoutResp::~LogoutResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.LogoutResp)
  SharedDtor();
}

void LogoutResp::SharedDtor() {
}

void LogoutResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResp::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogoutResp& LogoutResp::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogoutResp* LogoutResp::New(::google::protobuf::Arena* arena) const {
  LogoutResp* n = new LogoutResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutResp::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.LogoutResp)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.LogoutResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.LogoutResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.LogoutResp)
  return false;
#undef DO_
}

void LogoutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.LogoutResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.LogoutResp)
}

::google::protobuf::uint8* LogoutResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.LogoutResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.LogoutResp)
  return target;
}

size_t LogoutResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.LogoutResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.LogoutResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.LogoutResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.LogoutResp)
    MergeFrom(*source);
  }
}

void LogoutResp::MergeFrom(const LogoutResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.LogoutResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void LogoutResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.LogoutResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResp::CopyFrom(const LogoutResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.LogoutResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LogoutResp::Swap(LogoutResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutResp::InternalSwap(LogoutResp* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutResp::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutResp

// required uint32 result = 1;
bool LogoutResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogoutResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void LogoutResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogoutResp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 LogoutResp::result() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.LogoutResp.result)
  return result_;
}
void LogoutResp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.LogoutResp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitLoginReq::kClientRamFieldNumber;
const int InitLoginReq::kSigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitLoginReq::InitLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.InitLoginReq)
}
InitLoginReq::InitLoginReq(const InitLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_ram()) {
    client_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ram_);
  }
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sig()) {
    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.InitLoginReq)
}

void InitLoginReq::SharedCtor() {
  _cached_size_ = 0;
  client_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitLoginReq::~InitLoginReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.InitLoginReq)
  SharedDtor();
}

void InitLoginReq::SharedDtor() {
  client_ram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitLoginReq::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitLoginReq& InitLoginReq::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitLoginReq* InitLoginReq::New(::google::protobuf::Arena* arena) const {
  InitLoginReq* n = new InitLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.InitLoginReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_client_ram()) {
      GOOGLE_DCHECK(!client_ram_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_ram_.UnsafeRawStringPointer())->clear();
    }
    if (has_sig()) {
      GOOGLE_DCHECK(!sig_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sig_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.InitLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_ram = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_ram().data(), this->client_ram().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.InitLoginReq.client_ram");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sig = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.InitLoginReq.sig");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.InitLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.InitLoginReq)
  return false;
#undef DO_
}

void InitLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.InitLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_ram = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ram().data(), this->client_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.InitLoginReq.client_ram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_ram(), output);
  }

  // optional string sig = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.InitLoginReq.sig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sig(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.InitLoginReq)
}

::google::protobuf::uint8* InitLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.InitLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_ram = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ram().data(), this->client_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.InitLoginReq.client_ram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_ram(), target);
  }

  // optional string sig = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.InitLoginReq.sig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sig(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.InitLoginReq)
  return target;
}

size_t InitLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.InitLoginReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string client_ram = 1;
  if (has_client_ram()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_ram());
  }
  // optional string sig = 2;
  if (has_sig()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sig());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.InitLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InitLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.InitLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.InitLoginReq)
    MergeFrom(*source);
  }
}

void InitLoginReq::MergeFrom(const InitLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.InitLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_client_ram();
      client_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ram_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sig();
      sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
    }
  }
}

void InitLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.InitLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitLoginReq::CopyFrom(const InitLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.InitLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InitLoginReq::Swap(InitLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitLoginReq::InternalSwap(InitLoginReq* other) {
  client_ram_.Swap(&other->client_ram_);
  sig_.Swap(&other->sig_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitLoginReq::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitLoginReq

// required string client_ram = 1;
bool InitLoginReq::has_client_ram() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitLoginReq::set_has_client_ram() {
  _has_bits_[0] |= 0x00000001u;
}
void InitLoginReq::clear_has_client_ram() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitLoginReq::clear_client_ram() {
  client_ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_ram();
}
const ::std::string& InitLoginReq::client_ram() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.InitLoginReq.client_ram)
  return client_ram_.GetNoArena();
}
void InitLoginReq::set_client_ram(const ::std::string& value) {
  set_has_client_ram();
  client_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.InitLoginReq.client_ram)
}
#if LANG_CXX11
void InitLoginReq::set_client_ram(::std::string&& value) {
  set_has_client_ram();
  client_ram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.InitLoginReq.client_ram)
}
#endif
void InitLoginReq::set_client_ram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_ram();
  client_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.InitLoginReq.client_ram)
}
void InitLoginReq::set_client_ram(const char* value, size_t size) {
  set_has_client_ram();
  client_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.InitLoginReq.client_ram)
}
::std::string* InitLoginReq::mutable_client_ram() {
  set_has_client_ram();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.InitLoginReq.client_ram)
  return client_ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InitLoginReq::release_client_ram() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.InitLoginReq.client_ram)
  clear_has_client_ram();
  return client_ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitLoginReq::set_allocated_client_ram(::std::string* client_ram) {
  if (client_ram != NULL) {
    set_has_client_ram();
  } else {
    clear_has_client_ram();
  }
  client_ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ram);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.InitLoginReq.client_ram)
}

// optional string sig = 2;
bool InitLoginReq::has_sig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitLoginReq::set_has_sig() {
  _has_bits_[0] |= 0x00000002u;
}
void InitLoginReq::clear_has_sig() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitLoginReq::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sig();
}
const ::std::string& InitLoginReq::sig() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.InitLoginReq.sig)
  return sig_.GetNoArena();
}
void InitLoginReq::set_sig(const ::std::string& value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.InitLoginReq.sig)
}
#if LANG_CXX11
void InitLoginReq::set_sig(::std::string&& value) {
  set_has_sig();
  sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.InitLoginReq.sig)
}
#endif
void InitLoginReq::set_sig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.InitLoginReq.sig)
}
void InitLoginReq::set_sig(const char* value, size_t size) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.InitLoginReq.sig)
}
::std::string* InitLoginReq::mutable_sig() {
  set_has_sig();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.InitLoginReq.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InitLoginReq::release_sig() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.InitLoginReq.sig)
  clear_has_sig();
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitLoginReq::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    set_has_sig();
  } else {
    clear_has_sig();
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.InitLoginReq.sig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitLoginResp::kClientRamFieldNumber;
const int InitLoginResp::kServerRamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitLoginResp::InitLoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.InitLoginResp)
}
InitLoginResp::InitLoginResp(const InitLoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_ram()) {
    client_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ram_);
  }
  server_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_ram()) {
    server_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ram_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.InitLoginResp)
}

void InitLoginResp::SharedCtor() {
  _cached_size_ = 0;
  client_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitLoginResp::~InitLoginResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.InitLoginResp)
  SharedDtor();
}

void InitLoginResp::SharedDtor() {
  client_ram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitLoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitLoginResp::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitLoginResp& InitLoginResp::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitLoginResp* InitLoginResp::New(::google::protobuf::Arena* arena) const {
  InitLoginResp* n = new InitLoginResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.InitLoginResp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_client_ram()) {
      GOOGLE_DCHECK(!client_ram_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_ram_.UnsafeRawStringPointer())->clear();
    }
    if (has_server_ram()) {
      GOOGLE_DCHECK(!server_ram_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*server_ram_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.InitLoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_ram = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_ram().data(), this->client_ram().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.InitLoginResp.client_ram");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string server_ram = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ram().data(), this->server_ram().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.InitLoginResp.server_ram");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.InitLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.InitLoginResp)
  return false;
#undef DO_
}

void InitLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.InitLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_ram = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ram().data(), this->client_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.InitLoginResp.client_ram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_ram(), output);
  }

  // required string server_ram = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ram().data(), this->server_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.InitLoginResp.server_ram");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_ram(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.InitLoginResp)
}

::google::protobuf::uint8* InitLoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.InitLoginResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string client_ram = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ram().data(), this->client_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.InitLoginResp.client_ram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_ram(), target);
  }

  // required string server_ram = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ram().data(), this->server_ram().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.InitLoginResp.server_ram");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_ram(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.InitLoginResp)
  return target;
}

size_t InitLoginResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.InitLoginResp)
  size_t total_size = 0;

  if (has_client_ram()) {
    // required string client_ram = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_ram());
  }

  if (has_server_ram()) {
    // required string server_ram = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ram());
  }

  return total_size;
}
size_t InitLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.InitLoginResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string client_ram = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_ram());

    // required string server_ram = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ram());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.InitLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const InitLoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitLoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.InitLoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.InitLoginResp)
    MergeFrom(*source);
  }
}

void InitLoginResp::MergeFrom(const InitLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.InitLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_client_ram();
      client_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ram_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_server_ram();
      server_ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ram_);
    }
  }
}

void InitLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.InitLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitLoginResp::CopyFrom(const InitLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.InitLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitLoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InitLoginResp::Swap(InitLoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitLoginResp::InternalSwap(InitLoginResp* other) {
  client_ram_.Swap(&other->client_ram_);
  server_ram_.Swap(&other->server_ram_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitLoginResp::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitLoginResp

// required string client_ram = 1;
bool InitLoginResp::has_client_ram() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitLoginResp::set_has_client_ram() {
  _has_bits_[0] |= 0x00000001u;
}
void InitLoginResp::clear_has_client_ram() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitLoginResp::clear_client_ram() {
  client_ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_ram();
}
const ::std::string& InitLoginResp::client_ram() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.InitLoginResp.client_ram)
  return client_ram_.GetNoArena();
}
void InitLoginResp::set_client_ram(const ::std::string& value) {
  set_has_client_ram();
  client_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.InitLoginResp.client_ram)
}
#if LANG_CXX11
void InitLoginResp::set_client_ram(::std::string&& value) {
  set_has_client_ram();
  client_ram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.InitLoginResp.client_ram)
}
#endif
void InitLoginResp::set_client_ram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_ram();
  client_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.InitLoginResp.client_ram)
}
void InitLoginResp::set_client_ram(const char* value, size_t size) {
  set_has_client_ram();
  client_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.InitLoginResp.client_ram)
}
::std::string* InitLoginResp::mutable_client_ram() {
  set_has_client_ram();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.InitLoginResp.client_ram)
  return client_ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InitLoginResp::release_client_ram() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.InitLoginResp.client_ram)
  clear_has_client_ram();
  return client_ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitLoginResp::set_allocated_client_ram(::std::string* client_ram) {
  if (client_ram != NULL) {
    set_has_client_ram();
  } else {
    clear_has_client_ram();
  }
  client_ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ram);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.InitLoginResp.client_ram)
}

// required string server_ram = 2;
bool InitLoginResp::has_server_ram() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitLoginResp::set_has_server_ram() {
  _has_bits_[0] |= 0x00000002u;
}
void InitLoginResp::clear_has_server_ram() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitLoginResp::clear_server_ram() {
  server_ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_ram();
}
const ::std::string& InitLoginResp::server_ram() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.InitLoginResp.server_ram)
  return server_ram_.GetNoArena();
}
void InitLoginResp::set_server_ram(const ::std::string& value) {
  set_has_server_ram();
  server_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.InitLoginResp.server_ram)
}
#if LANG_CXX11
void InitLoginResp::set_server_ram(::std::string&& value) {
  set_has_server_ram();
  server_ram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.InitLoginResp.server_ram)
}
#endif
void InitLoginResp::set_server_ram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_ram();
  server_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.InitLoginResp.server_ram)
}
void InitLoginResp::set_server_ram(const char* value, size_t size) {
  set_has_server_ram();
  server_ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.InitLoginResp.server_ram)
}
::std::string* InitLoginResp::mutable_server_ram() {
  set_has_server_ram();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.InitLoginResp.server_ram)
  return server_ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InitLoginResp::release_server_ram() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.InitLoginResp.server_ram)
  clear_has_server_ram();
  return server_ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitLoginResp::set_allocated_server_ram(::std::string* server_ram) {
  if (server_ram != NULL) {
    set_has_server_ram();
  } else {
    clear_has_server_ram();
  }
  server_ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ram);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.InitLoginResp.server_ram)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Service_Req::kServiceIdFieldNumber;
const int Service_Req::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Service_Req::Service_Req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Service_Req)
}
Service_Req::Service_Req(const Service_Req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request()) {
    request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
  service_id_ = from.service_id_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Service_Req)
}

void Service_Req::SharedCtor() {
  _cached_size_ = 0;
  request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_id_ = 0u;
}

Service_Req::~Service_Req() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Service_Req)
  SharedDtor();
}

void Service_Req::SharedDtor() {
  request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Service_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service_Req::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Service_Req& Service_Req::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Service_Req* Service_Req::New(::google::protobuf::Arena* arena) const {
  Service_Req* n = new Service_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Service_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Service_Req)
  if (has_request()) {
    GOOGLE_DCHECK(!request_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*request_.UnsafeRawStringPointer())->clear();
  }
  service_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Service_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Service_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 service_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Service_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Service_Req)
  return false;
#undef DO_
}

void Service_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Service_Req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }

  // required bytes request = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Service_Req)
}

::google::protobuf::uint8* Service_Req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Service_Req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }

  // required bytes request = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->request(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Service_Req)
  return target;
}

size_t Service_Req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.Service_Req)
  size_t total_size = 0;

  if (has_request()) {
    // required bytes request = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->request());
  }

  if (has_service_id()) {
    // required uint32 service_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->service_id());
  }

  return total_size;
}
size_t Service_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Service_Req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes request = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->request());

    // required uint32 service_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->service_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service_Req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Service_Req)
  GOOGLE_DCHECK_NE(&from, this);
  const Service_Req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Service_Req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Service_Req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Service_Req)
    MergeFrom(*source);
  }
}

void Service_Req::MergeFrom(const Service_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Service_Req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request();
      request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_);
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Service_Req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Service_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service_Req::CopyFrom(const Service_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Service_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Service_Req::Swap(Service_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Service_Req::InternalSwap(Service_Req* other) {
  request_.Swap(&other->request_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Service_Req::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Service_Req

// required uint32 service_id = 1;
bool Service_Req::has_service_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Service_Req::set_has_service_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Service_Req::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Service_Req::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 Service_Req::service_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Service_Req.service_id)
  return service_id_;
}
void Service_Req::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Service_Req.service_id)
}

// required bytes request = 2;
bool Service_Req::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Service_Req::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
void Service_Req::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void Service_Req::clear_request() {
  request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request();
}
const ::std::string& Service_Req::request() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Service_Req.request)
  return request_.GetNoArena();
}
void Service_Req::set_request(const ::std::string& value) {
  set_has_request();
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Service_Req.request)
}
#if LANG_CXX11
void Service_Req::set_request(::std::string&& value) {
  set_has_request();
  request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Service_Req.request)
}
#endif
void Service_Req::set_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request();
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Service_Req.request)
}
void Service_Req::set_request(const void* value, size_t size) {
  set_has_request();
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Service_Req.request)
}
::std::string* Service_Req::mutable_request() {
  set_has_request();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Service_Req.request)
  return request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Service_Req::release_request() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Service_Req.request)
  clear_has_request();
  return request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Service_Req::set_allocated_request(::std::string* request) {
  if (request != NULL) {
    set_has_request();
  } else {
    clear_has_request();
  }
  request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Service_Req.request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Service_Resp::kServiceIdFieldNumber;
const int Service_Resp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Service_Resp::Service_Resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Service_Resp)
}
Service_Resp::Service_Resp(const Service_Resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_response()) {
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  service_id_ = from.service_id_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Service_Resp)
}

void Service_Resp::SharedCtor() {
  _cached_size_ = 0;
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_id_ = 0u;
}

Service_Resp::~Service_Resp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Service_Resp)
  SharedDtor();
}

void Service_Resp::SharedDtor() {
  response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Service_Resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service_Resp::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Service_Resp& Service_Resp::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Service_Resp* Service_Resp::New(::google::protobuf::Arena* arena) const {
  Service_Resp* n = new Service_Resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Service_Resp::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Service_Resp)
  if (has_response()) {
    GOOGLE_DCHECK(!response_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*response_.UnsafeRawStringPointer())->clear();
  }
  service_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Service_Resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Service_Resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 service_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Service_Resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Service_Resp)
  return false;
#undef DO_
}

void Service_Resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Service_Resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }

  // required bytes response = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Service_Resp)
}

::google::protobuf::uint8* Service_Resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Service_Resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }

  // required bytes response = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Service_Resp)
  return target;
}

size_t Service_Resp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.Service_Resp)
  size_t total_size = 0;

  if (has_response()) {
    // required bytes response = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->response());
  }

  if (has_service_id()) {
    // required uint32 service_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->service_id());
  }

  return total_size;
}
size_t Service_Resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Service_Resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes response = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->response());

    // required uint32 service_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->service_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service_Resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Service_Resp)
  GOOGLE_DCHECK_NE(&from, this);
  const Service_Resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Service_Resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Service_Resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Service_Resp)
    MergeFrom(*source);
  }
}

void Service_Resp::MergeFrom(const Service_Resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Service_Resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_response();
      response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Service_Resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Service_Resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service_Resp::CopyFrom(const Service_Resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Service_Resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service_Resp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Service_Resp::Swap(Service_Resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Service_Resp::InternalSwap(Service_Resp* other) {
  response_.Swap(&other->response_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Service_Resp::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Service_Resp

// required uint32 service_id = 1;
bool Service_Resp::has_service_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Service_Resp::set_has_service_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Service_Resp::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Service_Resp::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
::google::protobuf::uint32 Service_Resp::service_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Service_Resp.service_id)
  return service_id_;
}
void Service_Resp::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Service_Resp.service_id)
}

// required bytes response = 2;
bool Service_Resp::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Service_Resp::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
void Service_Resp::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
void Service_Resp::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response();
}
const ::std::string& Service_Resp::response() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Service_Resp.response)
  return response_.GetNoArena();
}
void Service_Resp::set_response(const ::std::string& value) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Service_Resp.response)
}
#if LANG_CXX11
void Service_Resp::set_response(::std::string&& value) {
  set_has_response();
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Service_Resp.response)
}
#endif
void Service_Resp::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Service_Resp.response)
}
void Service_Resp::set_response(const void* value, size_t size) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Service_Resp.response)
}
::std::string* Service_Resp::mutable_response() {
  set_has_response();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Service_Resp.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Service_Resp::release_response() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Service_Resp.response)
  clear_has_response();
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Service_Resp::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    set_has_response();
  } else {
    clear_has_response();
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Service_Resp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEQ1User::kUseridFieldNumber;
const int ReqEQ1User::kUserTypeFieldNumber;
const int ReqEQ1User::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEQ1User::ReqEQ1User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ReqEQ1User)
}
ReqEQ1User::ReqEQ1User(const ReqEQ1User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_type()) {
    user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ReqEQ1User)
}

void ReqEQ1User::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

ReqEQ1User::~ReqEQ1User() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ReqEQ1User)
  SharedDtor();
}

void ReqEQ1User::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqEQ1User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEQ1User::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEQ1User& ReqEQ1User::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqEQ1User* ReqEQ1User::New(::google::protobuf::Arena* arena) const {
  ReqEQ1User* n = new ReqEQ1User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqEQ1User::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.ReqEQ1User)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_userid()) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userid_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_type()) {
      GOOGLE_DCHECK(!user_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_type_.UnsafeRawStringPointer())->clear();
    }
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqEQ1User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ReqEQ1User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.ReqEQ1User.userid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_type().data(), this->user_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.ReqEQ1User.user_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ReqEQ1User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ReqEQ1User)
  return false;
#undef DO_
}

void ReqEQ1User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ReqEQ1User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReqEQ1User.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string user_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_type().data(), this->user_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReqEQ1User.user_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_type(), output);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ReqEQ1User)
}

::google::protobuf::uint8* ReqEQ1User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ReqEQ1User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReqEQ1User.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string user_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_type().data(), this->user_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReqEQ1User.user_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_type(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ReqEQ1User)
  return target;
}

size_t ReqEQ1User::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.ReqEQ1User)
  size_t total_size = 0;

  if (has_userid()) {
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_user_type()) {
    // required string user_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_type());
  }

  return total_size;
}
size_t ReqEQ1User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.ReqEQ1User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string user_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 app_id = 3;
  if (has_app_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEQ1User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.ReqEQ1User)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEQ1User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEQ1User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.ReqEQ1User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.ReqEQ1User)
    MergeFrom(*source);
  }
}

void ReqEQ1User::MergeFrom(const ReqEQ1User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.ReqEQ1User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_type();
      user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqEQ1User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.ReqEQ1User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEQ1User::CopyFrom(const ReqEQ1User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.ReqEQ1User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEQ1User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReqEQ1User::Swap(ReqEQ1User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEQ1User::InternalSwap(ReqEQ1User* other) {
  userid_.Swap(&other->userid_);
  user_type_.Swap(&other->user_type_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqEQ1User::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqEQ1User

// required string userid = 1;
bool ReqEQ1User::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqEQ1User::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqEQ1User::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqEQ1User::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& ReqEQ1User::userid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ReqEQ1User.userid)
  return userid_.GetNoArena();
}
void ReqEQ1User::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ReqEQ1User.userid)
}
#if LANG_CXX11
void ReqEQ1User::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.ReqEQ1User.userid)
}
#endif
void ReqEQ1User::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.ReqEQ1User.userid)
}
void ReqEQ1User::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.ReqEQ1User.userid)
}
::std::string* ReqEQ1User::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.ReqEQ1User.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqEQ1User::release_userid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.ReqEQ1User.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqEQ1User::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.ReqEQ1User.userid)
}

// required string user_type = 2;
bool ReqEQ1User::has_user_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqEQ1User::set_has_user_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqEQ1User::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqEQ1User::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_type();
}
const ::std::string& ReqEQ1User::user_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ReqEQ1User.user_type)
  return user_type_.GetNoArena();
}
void ReqEQ1User::set_user_type(const ::std::string& value) {
  set_has_user_type();
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ReqEQ1User.user_type)
}
#if LANG_CXX11
void ReqEQ1User::set_user_type(::std::string&& value) {
  set_has_user_type();
  user_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.ReqEQ1User.user_type)
}
#endif
void ReqEQ1User::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_type();
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.ReqEQ1User.user_type)
}
void ReqEQ1User::set_user_type(const char* value, size_t size) {
  set_has_user_type();
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.ReqEQ1User.user_type)
}
::std::string* ReqEQ1User::mutable_user_type() {
  set_has_user_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.ReqEQ1User.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqEQ1User::release_user_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.ReqEQ1User.user_type)
  clear_has_user_type();
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqEQ1User::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    set_has_user_type();
  } else {
    clear_has_user_type();
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.ReqEQ1User.user_type)
}

// optional uint32 app_id = 3;
bool ReqEQ1User::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqEQ1User::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqEQ1User::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqEQ1User::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 ReqEQ1User::app_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ReqEQ1User.app_id)
  return app_id_;
}
void ReqEQ1User::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ReqEQ1User.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespEQ1User::kUseridFieldNumber;
const int RespEQ1User::kUserTypeFieldNumber;
const int RespEQ1User::kStatusFieldNumber;
const int RespEQ1User::kJidFieldNumber;
const int RespEQ1User::kAppIdFieldNumber;
const int RespEQ1User::kPlatformFieldNumber;
const int RespEQ1User::kMobileTypeFieldNumber;
const int RespEQ1User::kClientVerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespEQ1User::RespEQ1User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.RespEQ1User)
}
RespEQ1User::RespEQ1User(const RespEQ1User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_type()) {
    user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
  }
  jid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_jid()) {
    jid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jid_);
  }
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform()) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  mobile_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mobile_type()) {
    mobile_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_type_);
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&client_ver_) -
    reinterpret_cast<char*>(&status_) + sizeof(client_ver_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.RespEQ1User)
}

void RespEQ1User::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&client_ver_) -
    reinterpret_cast<char*>(&status_) + sizeof(client_ver_));
}

RespEQ1User::~RespEQ1User() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.RespEQ1User)
  SharedDtor();
}

void RespEQ1User::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RespEQ1User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespEQ1User::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespEQ1User& RespEQ1User::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

RespEQ1User* RespEQ1User::New(::google::protobuf::Arena* arena) const {
  RespEQ1User* n = new RespEQ1User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RespEQ1User::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.RespEQ1User)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_userid()) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userid_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_type()) {
      GOOGLE_DCHECK(!user_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_jid()) {
      GOOGLE_DCHECK(!jid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*jid_.UnsafeRawStringPointer())->clear();
    }
    if (has_platform()) {
      GOOGLE_DCHECK(!platform_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*platform_.UnsafeRawStringPointer())->clear();
    }
    if (has_mobile_type()) {
      GOOGLE_DCHECK(!mobile_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mobile_type_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&client_ver_) -
      reinterpret_cast<char*>(&status_) + sizeof(client_ver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RespEQ1User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.RespEQ1User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.RespEQ1User.userid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_type().data(), this->user_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.RespEQ1User.user_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string jid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jid().data(), this->jid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.RespEQ1User.jid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string platform = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.RespEQ1User.platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mobile_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobile_type().data(), this->mobile_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.RespEQ1User.mobile_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ver = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_client_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.RespEQ1User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.RespEQ1User)
  return false;
#undef DO_
}

void RespEQ1User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.RespEQ1User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string user_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_type().data(), this->user_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.user_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_type(), output);
  }

  // required int32 status = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional string jid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jid().data(), this->jid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.jid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jid(), output);
  }

  // optional uint32 app_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->app_id(), output);
  }

  // optional string platform = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->platform(), output);
  }

  // optional string mobile_type = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_type().data(), this->mobile_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.mobile_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->mobile_type(), output);
  }

  // optional uint32 client_ver = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->client_ver(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.RespEQ1User)
}

::google::protobuf::uint8* RespEQ1User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.RespEQ1User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string user_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_type().data(), this->user_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.user_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_type(), target);
  }

  // required int32 status = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // optional string jid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jid().data(), this->jid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.jid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jid(), target);
  }

  // optional uint32 app_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->app_id(), target);
  }

  // optional string platform = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->platform(), target);
  }

  // optional string mobile_type = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobile_type().data(), this->mobile_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RespEQ1User.mobile_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mobile_type(), target);
  }

  // optional uint32 client_ver = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->client_ver(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.RespEQ1User)
  return target;
}

size_t RespEQ1User::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.RespEQ1User)
  size_t total_size = 0;

  if (has_userid()) {
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_user_type()) {
    // required string user_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_type());
  }

  if (has_status()) {
    // required int32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
size_t RespEQ1User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.RespEQ1User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string user_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_type());

    // required int32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional string jid = 4;
    if (has_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jid());
    }

    // optional string platform = 6;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string mobile_type = 7;
    if (has_mobile_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_type());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional uint32 app_id = 5;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 client_ver = 8;
    if (has_client_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ver());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespEQ1User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.RespEQ1User)
  GOOGLE_DCHECK_NE(&from, this);
  const RespEQ1User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespEQ1User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.RespEQ1User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.RespEQ1User)
    MergeFrom(*source);
  }
}

void RespEQ1User::MergeFrom(const RespEQ1User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.RespEQ1User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_type();
      user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_jid();
      jid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_mobile_type();
      mobile_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000040u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_ver_ = from.client_ver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RespEQ1User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.RespEQ1User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespEQ1User::CopyFrom(const RespEQ1User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.RespEQ1User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespEQ1User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  return true;
}

void RespEQ1User::Swap(RespEQ1User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespEQ1User::InternalSwap(RespEQ1User* other) {
  userid_.Swap(&other->userid_);
  user_type_.Swap(&other->user_type_);
  jid_.Swap(&other->jid_);
  platform_.Swap(&other->platform_);
  mobile_type_.Swap(&other->mobile_type_);
  std::swap(status_, other->status_);
  std::swap(app_id_, other->app_id_);
  std::swap(client_ver_, other->client_ver_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespEQ1User::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RespEQ1User

// required string userid = 1;
bool RespEQ1User::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RespEQ1User::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void RespEQ1User::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RespEQ1User::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& RespEQ1User::userid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RespEQ1User.userid)
  return userid_.GetNoArena();
}
void RespEQ1User::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RespEQ1User.userid)
}
#if LANG_CXX11
void RespEQ1User::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.RespEQ1User.userid)
}
#endif
void RespEQ1User::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.RespEQ1User.userid)
}
void RespEQ1User::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.RespEQ1User.userid)
}
::std::string* RespEQ1User::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.RespEQ1User.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RespEQ1User::release_userid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.RespEQ1User.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RespEQ1User::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.RespEQ1User.userid)
}

// required string user_type = 2;
bool RespEQ1User::has_user_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RespEQ1User::set_has_user_type() {
  _has_bits_[0] |= 0x00000002u;
}
void RespEQ1User::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void RespEQ1User::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_type();
}
const ::std::string& RespEQ1User::user_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RespEQ1User.user_type)
  return user_type_.GetNoArena();
}
void RespEQ1User::set_user_type(const ::std::string& value) {
  set_has_user_type();
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RespEQ1User.user_type)
}
#if LANG_CXX11
void RespEQ1User::set_user_type(::std::string&& value) {
  set_has_user_type();
  user_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.RespEQ1User.user_type)
}
#endif
void RespEQ1User::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_type();
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.RespEQ1User.user_type)
}
void RespEQ1User::set_user_type(const char* value, size_t size) {
  set_has_user_type();
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.RespEQ1User.user_type)
}
::std::string* RespEQ1User::mutable_user_type() {
  set_has_user_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.RespEQ1User.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RespEQ1User::release_user_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.RespEQ1User.user_type)
  clear_has_user_type();
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RespEQ1User::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    set_has_user_type();
  } else {
    clear_has_user_type();
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.RespEQ1User.user_type)
}

// required int32 status = 3;
bool RespEQ1User::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RespEQ1User::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void RespEQ1User::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void RespEQ1User::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 RespEQ1User::status() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RespEQ1User.status)
  return status_;
}
void RespEQ1User::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RespEQ1User.status)
}

// optional string jid = 4;
bool RespEQ1User::has_jid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RespEQ1User::set_has_jid() {
  _has_bits_[0] |= 0x00000004u;
}
void RespEQ1User::clear_has_jid() {
  _has_bits_[0] &= ~0x00000004u;
}
void RespEQ1User::clear_jid() {
  jid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jid();
}
const ::std::string& RespEQ1User::jid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RespEQ1User.jid)
  return jid_.GetNoArena();
}
void RespEQ1User::set_jid(const ::std::string& value) {
  set_has_jid();
  jid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RespEQ1User.jid)
}
#if LANG_CXX11
void RespEQ1User::set_jid(::std::string&& value) {
  set_has_jid();
  jid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.RespEQ1User.jid)
}
#endif
void RespEQ1User::set_jid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_jid();
  jid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.RespEQ1User.jid)
}
void RespEQ1User::set_jid(const char* value, size_t size) {
  set_has_jid();
  jid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.RespEQ1User.jid)
}
::std::string* RespEQ1User::mutable_jid() {
  set_has_jid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.RespEQ1User.jid)
  return jid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RespEQ1User::release_jid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.RespEQ1User.jid)
  clear_has_jid();
  return jid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RespEQ1User::set_allocated_jid(::std::string* jid) {
  if (jid != NULL) {
    set_has_jid();
  } else {
    clear_has_jid();
  }
  jid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.RespEQ1User.jid)
}

// optional uint32 app_id = 5;
bool RespEQ1User::has_app_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RespEQ1User::set_has_app_id() {
  _has_bits_[0] |= 0x00000040u;
}
void RespEQ1User::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void RespEQ1User::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 RespEQ1User::app_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RespEQ1User.app_id)
  return app_id_;
}
void RespEQ1User::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RespEQ1User.app_id)
}

// optional string platform = 6;
bool RespEQ1User::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RespEQ1User::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
void RespEQ1User::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
void RespEQ1User::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
const ::std::string& RespEQ1User::platform() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RespEQ1User.platform)
  return platform_.GetNoArena();
}
void RespEQ1User::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RespEQ1User.platform)
}
#if LANG_CXX11
void RespEQ1User::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.RespEQ1User.platform)
}
#endif
void RespEQ1User::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.RespEQ1User.platform)
}
void RespEQ1User::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.RespEQ1User.platform)
}
::std::string* RespEQ1User::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.RespEQ1User.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RespEQ1User::release_platform() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.RespEQ1User.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RespEQ1User::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.RespEQ1User.platform)
}

// optional string mobile_type = 7;
bool RespEQ1User::has_mobile_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RespEQ1User::set_has_mobile_type() {
  _has_bits_[0] |= 0x00000010u;
}
void RespEQ1User::clear_has_mobile_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void RespEQ1User::clear_mobile_type() {
  mobile_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile_type();
}
const ::std::string& RespEQ1User::mobile_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RespEQ1User.mobile_type)
  return mobile_type_.GetNoArena();
}
void RespEQ1User::set_mobile_type(const ::std::string& value) {
  set_has_mobile_type();
  mobile_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RespEQ1User.mobile_type)
}
#if LANG_CXX11
void RespEQ1User::set_mobile_type(::std::string&& value) {
  set_has_mobile_type();
  mobile_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.RespEQ1User.mobile_type)
}
#endif
void RespEQ1User::set_mobile_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile_type();
  mobile_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.RespEQ1User.mobile_type)
}
void RespEQ1User::set_mobile_type(const char* value, size_t size) {
  set_has_mobile_type();
  mobile_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.RespEQ1User.mobile_type)
}
::std::string* RespEQ1User::mutable_mobile_type() {
  set_has_mobile_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.RespEQ1User.mobile_type)
  return mobile_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RespEQ1User::release_mobile_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.RespEQ1User.mobile_type)
  clear_has_mobile_type();
  return mobile_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RespEQ1User::set_allocated_mobile_type(::std::string* mobile_type) {
  if (mobile_type != NULL) {
    set_has_mobile_type();
  } else {
    clear_has_mobile_type();
  }
  mobile_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.RespEQ1User.mobile_type)
}

// optional uint32 client_ver = 8;
bool RespEQ1User::has_client_ver() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RespEQ1User::set_has_client_ver() {
  _has_bits_[0] |= 0x00000080u;
}
void RespEQ1User::clear_has_client_ver() {
  _has_bits_[0] &= ~0x00000080u;
}
void RespEQ1User::clear_client_ver() {
  client_ver_ = 0u;
  clear_has_client_ver();
}
::google::protobuf::uint32 RespEQ1User::client_ver() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RespEQ1User.client_ver)
  return client_ver_;
}
void RespEQ1User::set_client_ver(::google::protobuf::uint32 value) {
  set_has_client_ver();
  client_ver_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RespEQ1User.client_ver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ex1QueryUserStatusReq::kUserListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ex1QueryUserStatusReq::Ex1QueryUserStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Ex1QueryUserStatusReq)
}
Ex1QueryUserStatusReq::Ex1QueryUserStatusReq(const Ex1QueryUserStatusReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_list_(from.user_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Ex1QueryUserStatusReq)
}

void Ex1QueryUserStatusReq::SharedCtor() {
  _cached_size_ = 0;
}

Ex1QueryUserStatusReq::~Ex1QueryUserStatusReq() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  SharedDtor();
}

void Ex1QueryUserStatusReq::SharedDtor() {
}

void Ex1QueryUserStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ex1QueryUserStatusReq::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ex1QueryUserStatusReq& Ex1QueryUserStatusReq::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ex1QueryUserStatusReq* Ex1QueryUserStatusReq::New(::google::protobuf::Arena* arena) const {
  Ex1QueryUserStatusReq* n = new Ex1QueryUserStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ex1QueryUserStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  user_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ex1QueryUserStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.messages.ReqEQ1User user_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  return false;
#undef DO_
}

void Ex1QueryUserStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.messages.ReqEQ1User user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Ex1QueryUserStatusReq)
}

::google::protobuf::uint8* Ex1QueryUserStatusReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.messages.ReqEQ1User user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->user_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  return target;
}

size_t Ex1QueryUserStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .qihoo.protocol.messages.ReqEQ1User user_list = 1;
  {
    unsigned int count = this->user_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ex1QueryUserStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Ex1QueryUserStatusReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ex1QueryUserStatusReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Ex1QueryUserStatusReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Ex1QueryUserStatusReq)
    MergeFrom(*source);
  }
}

void Ex1QueryUserStatusReq::MergeFrom(const Ex1QueryUserStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_list_.MergeFrom(from.user_list_);
}

void Ex1QueryUserStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ex1QueryUserStatusReq::CopyFrom(const Ex1QueryUserStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Ex1QueryUserStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ex1QueryUserStatusReq::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void Ex1QueryUserStatusReq::Swap(Ex1QueryUserStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ex1QueryUserStatusReq::InternalSwap(Ex1QueryUserStatusReq* other) {
  user_list_.InternalSwap(&other->user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ex1QueryUserStatusReq::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ex1QueryUserStatusReq

// repeated .qihoo.protocol.messages.ReqEQ1User user_list = 1;
int Ex1QueryUserStatusReq::user_list_size() const {
  return user_list_.size();
}
void Ex1QueryUserStatusReq::clear_user_list() {
  user_list_.Clear();
}
const ::qihoo::protocol::messages::ReqEQ1User& Ex1QueryUserStatusReq::user_list(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Ex1QueryUserStatusReq.user_list)
  return user_list_.Get(index);
}
::qihoo::protocol::messages::ReqEQ1User* Ex1QueryUserStatusReq::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Ex1QueryUserStatusReq.user_list)
  return user_list_.Mutable(index);
}
::qihoo::protocol::messages::ReqEQ1User* Ex1QueryUserStatusReq::add_user_list() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.Ex1QueryUserStatusReq.user_list)
  return user_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::ReqEQ1User >*
Ex1QueryUserStatusReq::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.messages.Ex1QueryUserStatusReq.user_list)
  return &user_list_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::ReqEQ1User >&
Ex1QueryUserStatusReq::user_list() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.messages.Ex1QueryUserStatusReq.user_list)
  return user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ex1QueryUserStatusResp::kUserListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ex1QueryUserStatusResp::Ex1QueryUserStatusResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Ex1QueryUserStatusResp)
}
Ex1QueryUserStatusResp::Ex1QueryUserStatusResp(const Ex1QueryUserStatusResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_list_(from.user_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Ex1QueryUserStatusResp)
}

void Ex1QueryUserStatusResp::SharedCtor() {
  _cached_size_ = 0;
}

Ex1QueryUserStatusResp::~Ex1QueryUserStatusResp() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  SharedDtor();
}

void Ex1QueryUserStatusResp::SharedDtor() {
}

void Ex1QueryUserStatusResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ex1QueryUserStatusResp::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ex1QueryUserStatusResp& Ex1QueryUserStatusResp::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ex1QueryUserStatusResp* Ex1QueryUserStatusResp::New(::google::protobuf::Arena* arena) const {
  Ex1QueryUserStatusResp* n = new Ex1QueryUserStatusResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ex1QueryUserStatusResp::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  user_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ex1QueryUserStatusResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.messages.RespEQ1User user_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  return false;
#undef DO_
}

void Ex1QueryUserStatusResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.messages.RespEQ1User user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Ex1QueryUserStatusResp)
}

::google::protobuf::uint8* Ex1QueryUserStatusResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.messages.RespEQ1User user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->user_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  return target;
}

size_t Ex1QueryUserStatusResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .qihoo.protocol.messages.RespEQ1User user_list = 1;
  {
    unsigned int count = this->user_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ex1QueryUserStatusResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  GOOGLE_DCHECK_NE(&from, this);
  const Ex1QueryUserStatusResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ex1QueryUserStatusResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Ex1QueryUserStatusResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Ex1QueryUserStatusResp)
    MergeFrom(*source);
  }
}

void Ex1QueryUserStatusResp::MergeFrom(const Ex1QueryUserStatusResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_list_.MergeFrom(from.user_list_);
}

void Ex1QueryUserStatusResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ex1QueryUserStatusResp::CopyFrom(const Ex1QueryUserStatusResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Ex1QueryUserStatusResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ex1QueryUserStatusResp::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void Ex1QueryUserStatusResp::Swap(Ex1QueryUserStatusResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ex1QueryUserStatusResp::InternalSwap(Ex1QueryUserStatusResp* other) {
  user_list_.InternalSwap(&other->user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ex1QueryUserStatusResp::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ex1QueryUserStatusResp

// repeated .qihoo.protocol.messages.RespEQ1User user_list = 1;
int Ex1QueryUserStatusResp::user_list_size() const {
  return user_list_.size();
}
void Ex1QueryUserStatusResp::clear_user_list() {
  user_list_.Clear();
}
const ::qihoo::protocol::messages::RespEQ1User& Ex1QueryUserStatusResp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Ex1QueryUserStatusResp.user_list)
  return user_list_.Get(index);
}
::qihoo::protocol::messages::RespEQ1User* Ex1QueryUserStatusResp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Ex1QueryUserStatusResp.user_list)
  return user_list_.Mutable(index);
}
::qihoo::protocol::messages::RespEQ1User* Ex1QueryUserStatusResp::add_user_list() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.Ex1QueryUserStatusResp.user_list)
  return user_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::RespEQ1User >*
Ex1QueryUserStatusResp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.messages.Ex1QueryUserStatusResp.user_list)
  return &user_list_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::RespEQ1User >&
Ex1QueryUserStatusResp::user_list() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.messages.Ex1QueryUserStatusResp.user_list)
  return user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kLoginFieldNumber;
const int Request::kChatFieldNumber;
const int Request::kGetInfoFieldNumber;
const int Request::kLogoutFieldNumber;
const int Request::kInitLoginReqFieldNumber;
const int Request::kServiceReqFieldNumber;
const int Request::kE1QueryUserFieldNumber;
const int Request::kGetMultiInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::qihoo::protocol::messages::LoginReq(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_chat()) {
    chat_ = new ::qihoo::protocol::messages::ChatReq(*from.chat_);
  } else {
    chat_ = NULL;
  }
  if (from.has_get_info()) {
    get_info_ = new ::qihoo::protocol::messages::GetInfoReq(*from.get_info_);
  } else {
    get_info_ = NULL;
  }
  if (from.has_logout()) {
    logout_ = new ::qihoo::protocol::messages::LogoutReq(*from.logout_);
  } else {
    logout_ = NULL;
  }
  if (from.has_init_login_req()) {
    init_login_req_ = new ::qihoo::protocol::messages::InitLoginReq(*from.init_login_req_);
  } else {
    init_login_req_ = NULL;
  }
  if (from.has_service_req()) {
    service_req_ = new ::qihoo::protocol::messages::Service_Req(*from.service_req_);
  } else {
    service_req_ = NULL;
  }
  if (from.has_e1_query_user()) {
    e1_query_user_ = new ::qihoo::protocol::messages::Ex1QueryUserStatusReq(*from.e1_query_user_);
  } else {
    e1_query_user_ = NULL;
  }
  if (from.has_get_multi_infos()) {
    get_multi_infos_ = new ::qihoo::protocol::messages::GetMultiInfosReq(*from.get_multi_infos_);
  } else {
    get_multi_infos_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&get_multi_infos_) -
    reinterpret_cast<char*>(&login_) + sizeof(get_multi_infos_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete chat_;
  }
  if (this != internal_default_instance()) {
    delete get_info_;
  }
  if (this != internal_default_instance()) {
    delete logout_;
  }
  if (this != internal_default_instance()) {
    delete init_login_req_;
  }
  if (this != internal_default_instance()) {
    delete service_req_;
  }
  if (this != internal_default_instance()) {
    delete e1_query_user_;
  }
  if (this != internal_default_instance()) {
    delete get_multi_infos_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Request)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::qihoo::protocol::messages::LoginReq::Clear();
    }
    if (has_chat()) {
      GOOGLE_DCHECK(chat_ != NULL);
      chat_->::qihoo::protocol::messages::ChatReq::Clear();
    }
    if (has_get_info()) {
      GOOGLE_DCHECK(get_info_ != NULL);
      get_info_->::qihoo::protocol::messages::GetInfoReq::Clear();
    }
    if (has_logout()) {
      GOOGLE_DCHECK(logout_ != NULL);
      logout_->::qihoo::protocol::messages::LogoutReq::Clear();
    }
    if (has_init_login_req()) {
      GOOGLE_DCHECK(init_login_req_ != NULL);
      init_login_req_->::qihoo::protocol::messages::InitLoginReq::Clear();
    }
    if (has_service_req()) {
      GOOGLE_DCHECK(service_req_ != NULL);
      service_req_->::qihoo::protocol::messages::Service_Req::Clear();
    }
    if (has_e1_query_user()) {
      GOOGLE_DCHECK(e1_query_user_ != NULL);
      e1_query_user_->::qihoo::protocol::messages::Ex1QueryUserStatusReq::Clear();
    }
    if (has_get_multi_infos()) {
      GOOGLE_DCHECK(get_multi_infos_ != NULL);
      get_multi_infos_->::qihoo::protocol::messages::GetMultiInfosReq::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.messages.LoginReq login = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.ChatReq chat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.GetInfoReq get_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.LogoutReq logout = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.InitLoginReq init_login_req = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_login_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.Service_Req service_req = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.Ex1QueryUserStatusReq e1_query_user = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_e1_query_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.GetMultiInfosReq get_multi_infos = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_multi_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.messages.LoginReq login = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->login_, output);
  }

  // optional .qihoo.protocol.messages.ChatReq chat = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->chat_, output);
  }

  // optional .qihoo.protocol.messages.GetInfoReq get_info = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->get_info_, output);
  }

  // optional .qihoo.protocol.messages.LogoutReq logout = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->logout_, output);
  }

  // optional .qihoo.protocol.messages.InitLoginReq init_login_req = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->init_login_req_, output);
  }

  // optional .qihoo.protocol.messages.Service_Req service_req = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->service_req_, output);
  }

  // optional .qihoo.protocol.messages.Ex1QueryUserStatusReq e1_query_user = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->e1_query_user_, output);
  }

  // optional .qihoo.protocol.messages.GetMultiInfosReq get_multi_infos = 100;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->get_multi_infos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.messages.LoginReq login = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->login_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.ChatReq chat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->chat_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.GetInfoReq get_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->get_info_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.LogoutReq logout = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->logout_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.InitLoginReq init_login_req = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->init_login_req_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.Service_Req service_req = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->service_req_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.Ex1QueryUserStatusReq e1_query_user = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->e1_query_user_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.GetMultiInfosReq get_multi_infos = 100;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->get_multi_infos_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .qihoo.protocol.messages.LoginReq login = 2;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .qihoo.protocol.messages.ChatReq chat = 3;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chat_);
    }

    // optional .qihoo.protocol.messages.GetInfoReq get_info = 5;
    if (has_get_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->get_info_);
    }

    // optional .qihoo.protocol.messages.LogoutReq logout = 6;
    if (has_logout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logout_);
    }

    // optional .qihoo.protocol.messages.InitLoginReq init_login_req = 9;
    if (has_init_login_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->init_login_req_);
    }

    // optional .qihoo.protocol.messages.Service_Req service_req = 11;
    if (has_service_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->service_req_);
    }

    // optional .qihoo.protocol.messages.Ex1QueryUserStatusReq e1_query_user = 12;
    if (has_e1_query_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->e1_query_user_);
    }

    // optional .qihoo.protocol.messages.GetMultiInfosReq get_multi_infos = 100;
    if (has_get_multi_infos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->get_multi_infos_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::qihoo::protocol::messages::LoginReq::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chat()->::qihoo::protocol::messages::ChatReq::MergeFrom(from.chat());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_get_info()->::qihoo::protocol::messages::GetInfoReq::MergeFrom(from.get_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_logout()->::qihoo::protocol::messages::LogoutReq::MergeFrom(from.logout());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_init_login_req()->::qihoo::protocol::messages::InitLoginReq::MergeFrom(from.init_login_req());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_service_req()->::qihoo::protocol::messages::Service_Req::MergeFrom(from.service_req());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_e1_query_user()->::qihoo::protocol::messages::Ex1QueryUserStatusReq::MergeFrom(from.e1_query_user());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_get_multi_infos()->::qihoo::protocol::messages::GetMultiInfosReq::MergeFrom(from.get_multi_infos());
    }
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if (has_login()) {
    if (!this->login_->IsInitialized()) return false;
  }
  if (has_chat()) {
    if (!this->chat_->IsInitialized()) return false;
  }
  if (has_get_info()) {
    if (!this->get_info_->IsInitialized()) return false;
  }
  if (has_init_login_req()) {
    if (!this->init_login_req_->IsInitialized()) return false;
  }
  if (has_service_req()) {
    if (!this->service_req_->IsInitialized()) return false;
  }
  if (has_e1_query_user()) {
    if (!this->e1_query_user_->IsInitialized()) return false;
  }
  if (has_get_multi_infos()) {
    if (!this->get_multi_infos_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(login_, other->login_);
  std::swap(chat_, other->chat_);
  std::swap(get_info_, other->get_info_);
  std::swap(logout_, other->logout_);
  std::swap(init_login_req_, other->init_login_req_);
  std::swap(service_req_, other->service_req_);
  std::swap(e1_query_user_, other->e1_query_user_);
  std::swap(get_multi_infos_, other->get_multi_infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .qihoo.protocol.messages.LoginReq login = 2;
bool Request::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_login() {
  if (login_ != NULL) login_->::qihoo::protocol::messages::LoginReq::Clear();
  clear_has_login();
}
const ::qihoo::protocol::messages::LoginReq& Request::login() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Request.login)
  return login_ != NULL ? *login_
                         : *::qihoo::protocol::messages::LoginReq::internal_default_instance();
}
::qihoo::protocol::messages::LoginReq* Request::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::qihoo::protocol::messages::LoginReq;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Request.login)
  return login_;
}
::qihoo::protocol::messages::LoginReq* Request::release_login() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Request.login)
  clear_has_login();
  ::qihoo::protocol::messages::LoginReq* temp = login_;
  login_ = NULL;
  return temp;
}
void Request::set_allocated_login(::qihoo::protocol::messages::LoginReq* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Request.login)
}

// optional .qihoo.protocol.messages.ChatReq chat = 3;
bool Request::has_chat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_chat() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_chat() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_chat() {
  if (chat_ != NULL) chat_->::qihoo::protocol::messages::ChatReq::Clear();
  clear_has_chat();
}
const ::qihoo::protocol::messages::ChatReq& Request::chat() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Request.chat)
  return chat_ != NULL ? *chat_
                         : *::qihoo::protocol::messages::ChatReq::internal_default_instance();
}
::qihoo::protocol::messages::ChatReq* Request::mutable_chat() {
  set_has_chat();
  if (chat_ == NULL) {
    chat_ = new ::qihoo::protocol::messages::ChatReq;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Request.chat)
  return chat_;
}
::qihoo::protocol::messages::ChatReq* Request::release_chat() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Request.chat)
  clear_has_chat();
  ::qihoo::protocol::messages::ChatReq* temp = chat_;
  chat_ = NULL;
  return temp;
}
void Request::set_allocated_chat(::qihoo::protocol::messages::ChatReq* chat) {
  delete chat_;
  chat_ = chat;
  if (chat) {
    set_has_chat();
  } else {
    clear_has_chat();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Request.chat)
}

// optional .qihoo.protocol.messages.GetInfoReq get_info = 5;
bool Request::has_get_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_get_info() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_get_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_get_info() {
  if (get_info_ != NULL) get_info_->::qihoo::protocol::messages::GetInfoReq::Clear();
  clear_has_get_info();
}
const ::qihoo::protocol::messages::GetInfoReq& Request::get_info() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Request.get_info)
  return get_info_ != NULL ? *get_info_
                         : *::qihoo::protocol::messages::GetInfoReq::internal_default_instance();
}
::qihoo::protocol::messages::GetInfoReq* Request::mutable_get_info() {
  set_has_get_info();
  if (get_info_ == NULL) {
    get_info_ = new ::qihoo::protocol::messages::GetInfoReq;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Request.get_info)
  return get_info_;
}
::qihoo::protocol::messages::GetInfoReq* Request::release_get_info() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Request.get_info)
  clear_has_get_info();
  ::qihoo::protocol::messages::GetInfoReq* temp = get_info_;
  get_info_ = NULL;
  return temp;
}
void Request::set_allocated_get_info(::qihoo::protocol::messages::GetInfoReq* get_info) {
  delete get_info_;
  get_info_ = get_info;
  if (get_info) {
    set_has_get_info();
  } else {
    clear_has_get_info();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Request.get_info)
}

// optional .qihoo.protocol.messages.LogoutReq logout = 6;
bool Request::has_logout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_logout() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_logout() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_logout() {
  if (logout_ != NULL) logout_->::qihoo::protocol::messages::LogoutReq::Clear();
  clear_has_logout();
}
const ::qihoo::protocol::messages::LogoutReq& Request::logout() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Request.logout)
  return logout_ != NULL ? *logout_
                         : *::qihoo::protocol::messages::LogoutReq::internal_default_instance();
}
::qihoo::protocol::messages::LogoutReq* Request::mutable_logout() {
  set_has_logout();
  if (logout_ == NULL) {
    logout_ = new ::qihoo::protocol::messages::LogoutReq;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Request.logout)
  return logout_;
}
::qihoo::protocol::messages::LogoutReq* Request::release_logout() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Request.logout)
  clear_has_logout();
  ::qihoo::protocol::messages::LogoutReq* temp = logout_;
  logout_ = NULL;
  return temp;
}
void Request::set_allocated_logout(::qihoo::protocol::messages::LogoutReq* logout) {
  delete logout_;
  logout_ = logout;
  if (logout) {
    set_has_logout();
  } else {
    clear_has_logout();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Request.logout)
}

// optional .qihoo.protocol.messages.InitLoginReq init_login_req = 9;
bool Request::has_init_login_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_init_login_req() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_init_login_req() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_init_login_req() {
  if (init_login_req_ != NULL) init_login_req_->::qihoo::protocol::messages::InitLoginReq::Clear();
  clear_has_init_login_req();
}
const ::qihoo::protocol::messages::InitLoginReq& Request::init_login_req() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Request.init_login_req)
  return init_login_req_ != NULL ? *init_login_req_
                         : *::qihoo::protocol::messages::InitLoginReq::internal_default_instance();
}
::qihoo::protocol::messages::InitLoginReq* Request::mutable_init_login_req() {
  set_has_init_login_req();
  if (init_login_req_ == NULL) {
    init_login_req_ = new ::qihoo::protocol::messages::InitLoginReq;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Request.init_login_req)
  return init_login_req_;
}
::qihoo::protocol::messages::InitLoginReq* Request::release_init_login_req() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Request.init_login_req)
  clear_has_init_login_req();
  ::qihoo::protocol::messages::InitLoginReq* temp = init_login_req_;
  init_login_req_ = NULL;
  return temp;
}
void Request::set_allocated_init_login_req(::qihoo::protocol::messages::InitLoginReq* init_login_req) {
  delete init_login_req_;
  init_login_req_ = init_login_req;
  if (init_login_req) {
    set_has_init_login_req();
  } else {
    clear_has_init_login_req();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Request.init_login_req)
}

// optional .qihoo.protocol.messages.Service_Req service_req = 11;
bool Request::has_service_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_service_req() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_service_req() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_service_req() {
  if (service_req_ != NULL) service_req_->::qihoo::protocol::messages::Service_Req::Clear();
  clear_has_service_req();
}
const ::qihoo::protocol::messages::Service_Req& Request::service_req() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Request.service_req)
  return service_req_ != NULL ? *service_req_
                         : *::qihoo::protocol::messages::Service_Req::internal_default_instance();
}
::qihoo::protocol::messages::Service_Req* Request::mutable_service_req() {
  set_has_service_req();
  if (service_req_ == NULL) {
    service_req_ = new ::qihoo::protocol::messages::Service_Req;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Request.service_req)
  return service_req_;
}
::qihoo::protocol::messages::Service_Req* Request::release_service_req() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Request.service_req)
  clear_has_service_req();
  ::qihoo::protocol::messages::Service_Req* temp = service_req_;
  service_req_ = NULL;
  return temp;
}
void Request::set_allocated_service_req(::qihoo::protocol::messages::Service_Req* service_req) {
  delete service_req_;
  service_req_ = service_req;
  if (service_req) {
    set_has_service_req();
  } else {
    clear_has_service_req();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Request.service_req)
}

// optional .qihoo.protocol.messages.Ex1QueryUserStatusReq e1_query_user = 12;
bool Request::has_e1_query_user() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request::set_has_e1_query_user() {
  _has_bits_[0] |= 0x00000040u;
}
void Request::clear_has_e1_query_user() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request::clear_e1_query_user() {
  if (e1_query_user_ != NULL) e1_query_user_->::qihoo::protocol::messages::Ex1QueryUserStatusReq::Clear();
  clear_has_e1_query_user();
}
const ::qihoo::protocol::messages::Ex1QueryUserStatusReq& Request::e1_query_user() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Request.e1_query_user)
  return e1_query_user_ != NULL ? *e1_query_user_
                         : *::qihoo::protocol::messages::Ex1QueryUserStatusReq::internal_default_instance();
}
::qihoo::protocol::messages::Ex1QueryUserStatusReq* Request::mutable_e1_query_user() {
  set_has_e1_query_user();
  if (e1_query_user_ == NULL) {
    e1_query_user_ = new ::qihoo::protocol::messages::Ex1QueryUserStatusReq;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Request.e1_query_user)
  return e1_query_user_;
}
::qihoo::protocol::messages::Ex1QueryUserStatusReq* Request::release_e1_query_user() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Request.e1_query_user)
  clear_has_e1_query_user();
  ::qihoo::protocol::messages::Ex1QueryUserStatusReq* temp = e1_query_user_;
  e1_query_user_ = NULL;
  return temp;
}
void Request::set_allocated_e1_query_user(::qihoo::protocol::messages::Ex1QueryUserStatusReq* e1_query_user) {
  delete e1_query_user_;
  e1_query_user_ = e1_query_user;
  if (e1_query_user) {
    set_has_e1_query_user();
  } else {
    clear_has_e1_query_user();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Request.e1_query_user)
}

// optional .qihoo.protocol.messages.GetMultiInfosReq get_multi_infos = 100;
bool Request::has_get_multi_infos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Request::set_has_get_multi_infos() {
  _has_bits_[0] |= 0x00000080u;
}
void Request::clear_has_get_multi_infos() {
  _has_bits_[0] &= ~0x00000080u;
}
void Request::clear_get_multi_infos() {
  if (get_multi_infos_ != NULL) get_multi_infos_->::qihoo::protocol::messages::GetMultiInfosReq::Clear();
  clear_has_get_multi_infos();
}
const ::qihoo::protocol::messages::GetMultiInfosReq& Request::get_multi_infos() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Request.get_multi_infos)
  return get_multi_infos_ != NULL ? *get_multi_infos_
                         : *::qihoo::protocol::messages::GetMultiInfosReq::internal_default_instance();
}
::qihoo::protocol::messages::GetMultiInfosReq* Request::mutable_get_multi_infos() {
  set_has_get_multi_infos();
  if (get_multi_infos_ == NULL) {
    get_multi_infos_ = new ::qihoo::protocol::messages::GetMultiInfosReq;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Request.get_multi_infos)
  return get_multi_infos_;
}
::qihoo::protocol::messages::GetMultiInfosReq* Request::release_get_multi_infos() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Request.get_multi_infos)
  clear_has_get_multi_infos();
  ::qihoo::protocol::messages::GetMultiInfosReq* temp = get_multi_infos_;
  get_multi_infos_ = NULL;
  return temp;
}
void Request::set_allocated_get_multi_infos(::qihoo::protocol::messages::GetMultiInfosReq* get_multi_infos) {
  delete get_multi_infos_;
  get_multi_infos_ = get_multi_infos;
  if (get_multi_infos) {
    set_has_get_multi_infos();
  } else {
    clear_has_get_multi_infos();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Request.get_multi_infos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kErrorFieldNumber;
const int Response::kLoginFieldNumber;
const int Response::kChatFieldNumber;
const int Response::kGetInfoFieldNumber;
const int Response::kLogoutFieldNumber;
const int Response::kInitLoginRespFieldNumber;
const int Response::kServiceRespFieldNumber;
const int Response::kE1QueryUserFieldNumber;
const int Response::kGetMultiInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::qihoo::protocol::messages::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_login()) {
    login_ = new ::qihoo::protocol::messages::LoginResp(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_chat()) {
    chat_ = new ::qihoo::protocol::messages::ChatResp(*from.chat_);
  } else {
    chat_ = NULL;
  }
  if (from.has_get_info()) {
    get_info_ = new ::qihoo::protocol::messages::GetInfoResp(*from.get_info_);
  } else {
    get_info_ = NULL;
  }
  if (from.has_logout()) {
    logout_ = new ::qihoo::protocol::messages::LogoutResp(*from.logout_);
  } else {
    logout_ = NULL;
  }
  if (from.has_init_login_resp()) {
    init_login_resp_ = new ::qihoo::protocol::messages::InitLoginResp(*from.init_login_resp_);
  } else {
    init_login_resp_ = NULL;
  }
  if (from.has_service_resp()) {
    service_resp_ = new ::qihoo::protocol::messages::Service_Resp(*from.service_resp_);
  } else {
    service_resp_ = NULL;
  }
  if (from.has_e1_query_user()) {
    e1_query_user_ = new ::qihoo::protocol::messages::Ex1QueryUserStatusResp(*from.e1_query_user_);
  } else {
    e1_query_user_ = NULL;
  }
  if (from.has_get_multi_infos()) {
    get_multi_infos_ = new ::qihoo::protocol::messages::GetMultiInfosResp(*from.get_multi_infos_);
  } else {
    get_multi_infos_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&get_multi_infos_) -
    reinterpret_cast<char*>(&error_) + sizeof(get_multi_infos_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete chat_;
  }
  if (this != internal_default_instance()) {
    delete get_info_;
  }
  if (this != internal_default_instance()) {
    delete logout_;
  }
  if (this != internal_default_instance()) {
    delete init_login_resp_;
  }
  if (this != internal_default_instance()) {
    delete service_resp_;
  }
  if (this != internal_default_instance()) {
    delete e1_query_user_;
  }
  if (this != internal_default_instance()) {
    delete get_multi_infos_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Response)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::qihoo::protocol::messages::Error::Clear();
    }
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::qihoo::protocol::messages::LoginResp::Clear();
    }
    if (has_chat()) {
      GOOGLE_DCHECK(chat_ != NULL);
      chat_->::qihoo::protocol::messages::ChatResp::Clear();
    }
    if (has_get_info()) {
      GOOGLE_DCHECK(get_info_ != NULL);
      get_info_->::qihoo::protocol::messages::GetInfoResp::Clear();
    }
    if (has_logout()) {
      GOOGLE_DCHECK(logout_ != NULL);
      logout_->::qihoo::protocol::messages::LogoutResp::Clear();
    }
    if (has_init_login_resp()) {
      GOOGLE_DCHECK(init_login_resp_ != NULL);
      init_login_resp_->::qihoo::protocol::messages::InitLoginResp::Clear();
    }
    if (has_service_resp()) {
      GOOGLE_DCHECK(service_resp_ != NULL);
      service_resp_->::qihoo::protocol::messages::Service_Resp::Clear();
    }
    if (has_e1_query_user()) {
      GOOGLE_DCHECK(e1_query_user_ != NULL);
      e1_query_user_->::qihoo::protocol::messages::Ex1QueryUserStatusResp::Clear();
    }
  }
  if (has_get_multi_infos()) {
    GOOGLE_DCHECK(get_multi_infos_ != NULL);
    get_multi_infos_->::qihoo::protocol::messages::GetMultiInfosResp::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.messages.Error error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.LoginResp login = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.ChatResp chat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.GetInfoResp get_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.LogoutResp logout = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.InitLoginResp init_login_resp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_login_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.Service_Resp service_resp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.Ex1QueryUserStatusResp e1_query_user = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_e1_query_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.GetMultiInfosResp get_multi_infos = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_multi_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.messages.Error error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional .qihoo.protocol.messages.LoginResp login = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->login_, output);
  }

  // optional .qihoo.protocol.messages.ChatResp chat = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->chat_, output);
  }

  // optional .qihoo.protocol.messages.GetInfoResp get_info = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->get_info_, output);
  }

  // optional .qihoo.protocol.messages.LogoutResp logout = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->logout_, output);
  }

  // optional .qihoo.protocol.messages.InitLoginResp init_login_resp = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->init_login_resp_, output);
  }

  // optional .qihoo.protocol.messages.Service_Resp service_resp = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->service_resp_, output);
  }

  // optional .qihoo.protocol.messages.Ex1QueryUserStatusResp e1_query_user = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->e1_query_user_, output);
  }

  // optional .qihoo.protocol.messages.GetMultiInfosResp get_multi_infos = 100;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->get_multi_infos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.messages.Error error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.LoginResp login = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->login_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.ChatResp chat = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->chat_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.GetInfoResp get_info = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->get_info_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.LogoutResp logout = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->logout_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.InitLoginResp init_login_resp = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->init_login_resp_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.Service_Resp service_resp = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->service_resp_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.Ex1QueryUserStatusResp e1_query_user = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->e1_query_user_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.GetMultiInfosResp get_multi_infos = 100;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->get_multi_infos_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .qihoo.protocol.messages.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional .qihoo.protocol.messages.LoginResp login = 3;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .qihoo.protocol.messages.ChatResp chat = 4;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chat_);
    }

    // optional .qihoo.protocol.messages.GetInfoResp get_info = 6;
    if (has_get_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->get_info_);
    }

    // optional .qihoo.protocol.messages.LogoutResp logout = 7;
    if (has_logout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logout_);
    }

    // optional .qihoo.protocol.messages.InitLoginResp init_login_resp = 10;
    if (has_init_login_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->init_login_resp_);
    }

    // optional .qihoo.protocol.messages.Service_Resp service_resp = 12;
    if (has_service_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->service_resp_);
    }

    // optional .qihoo.protocol.messages.Ex1QueryUserStatusResp e1_query_user = 13;
    if (has_e1_query_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->e1_query_user_);
    }

  }
  // optional .qihoo.protocol.messages.GetMultiInfosResp get_multi_infos = 100;
  if (has_get_multi_infos()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->get_multi_infos_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::qihoo::protocol::messages::Error::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_login()->::qihoo::protocol::messages::LoginResp::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chat()->::qihoo::protocol::messages::ChatResp::MergeFrom(from.chat());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_get_info()->::qihoo::protocol::messages::GetInfoResp::MergeFrom(from.get_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_logout()->::qihoo::protocol::messages::LogoutResp::MergeFrom(from.logout());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_init_login_resp()->::qihoo::protocol::messages::InitLoginResp::MergeFrom(from.init_login_resp());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_service_resp()->::qihoo::protocol::messages::Service_Resp::MergeFrom(from.service_resp());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_e1_query_user()->::qihoo::protocol::messages::Ex1QueryUserStatusResp::MergeFrom(from.e1_query_user());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_get_multi_infos()->::qihoo::protocol::messages::GetMultiInfosResp::MergeFrom(from.get_multi_infos());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  if (has_login()) {
    if (!this->login_->IsInitialized()) return false;
  }
  if (has_chat()) {
    if (!this->chat_->IsInitialized()) return false;
  }
  if (has_get_info()) {
    if (!this->get_info_->IsInitialized()) return false;
  }
  if (has_logout()) {
    if (!this->logout_->IsInitialized()) return false;
  }
  if (has_init_login_resp()) {
    if (!this->init_login_resp_->IsInitialized()) return false;
  }
  if (has_service_resp()) {
    if (!this->service_resp_->IsInitialized()) return false;
  }
  if (has_e1_query_user()) {
    if (!this->e1_query_user_->IsInitialized()) return false;
  }
  if (has_get_multi_infos()) {
    if (!this->get_multi_infos_->IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(error_, other->error_);
  std::swap(login_, other->login_);
  std::swap(chat_, other->chat_);
  std::swap(get_info_, other->get_info_);
  std::swap(logout_, other->logout_);
  std::swap(init_login_resp_, other->init_login_resp_);
  std::swap(service_resp_, other->service_resp_);
  std::swap(e1_query_user_, other->e1_query_user_);
  std::swap(get_multi_infos_, other->get_multi_infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .qihoo.protocol.messages.Error error = 1;
bool Response::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_error() {
  if (error_ != NULL) error_->::qihoo::protocol::messages::Error::Clear();
  clear_has_error();
}
const ::qihoo::protocol::messages::Error& Response::error() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Response.error)
  return error_ != NULL ? *error_
                         : *::qihoo::protocol::messages::Error::internal_default_instance();
}
::qihoo::protocol::messages::Error* Response::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::qihoo::protocol::messages::Error;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Response.error)
  return error_;
}
::qihoo::protocol::messages::Error* Response::release_error() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Response.error)
  clear_has_error();
  ::qihoo::protocol::messages::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void Response::set_allocated_error(::qihoo::protocol::messages::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Response.error)
}

// optional .qihoo.protocol.messages.LoginResp login = 3;
bool Response::has_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_login() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_login() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_login() {
  if (login_ != NULL) login_->::qihoo::protocol::messages::LoginResp::Clear();
  clear_has_login();
}
const ::qihoo::protocol::messages::LoginResp& Response::login() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Response.login)
  return login_ != NULL ? *login_
                         : *::qihoo::protocol::messages::LoginResp::internal_default_instance();
}
::qihoo::protocol::messages::LoginResp* Response::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::qihoo::protocol::messages::LoginResp;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Response.login)
  return login_;
}
::qihoo::protocol::messages::LoginResp* Response::release_login() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Response.login)
  clear_has_login();
  ::qihoo::protocol::messages::LoginResp* temp = login_;
  login_ = NULL;
  return temp;
}
void Response::set_allocated_login(::qihoo::protocol::messages::LoginResp* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Response.login)
}

// optional .qihoo.protocol.messages.ChatResp chat = 4;
bool Response::has_chat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_chat() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_chat() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_chat() {
  if (chat_ != NULL) chat_->::qihoo::protocol::messages::ChatResp::Clear();
  clear_has_chat();
}
const ::qihoo::protocol::messages::ChatResp& Response::chat() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Response.chat)
  return chat_ != NULL ? *chat_
                         : *::qihoo::protocol::messages::ChatResp::internal_default_instance();
}
::qihoo::protocol::messages::ChatResp* Response::mutable_chat() {
  set_has_chat();
  if (chat_ == NULL) {
    chat_ = new ::qihoo::protocol::messages::ChatResp;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Response.chat)
  return chat_;
}
::qihoo::protocol::messages::ChatResp* Response::release_chat() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Response.chat)
  clear_has_chat();
  ::qihoo::protocol::messages::ChatResp* temp = chat_;
  chat_ = NULL;
  return temp;
}
void Response::set_allocated_chat(::qihoo::protocol::messages::ChatResp* chat) {
  delete chat_;
  chat_ = chat;
  if (chat) {
    set_has_chat();
  } else {
    clear_has_chat();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Response.chat)
}

// optional .qihoo.protocol.messages.GetInfoResp get_info = 6;
bool Response::has_get_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Response::set_has_get_info() {
  _has_bits_[0] |= 0x00000008u;
}
void Response::clear_has_get_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void Response::clear_get_info() {
  if (get_info_ != NULL) get_info_->::qihoo::protocol::messages::GetInfoResp::Clear();
  clear_has_get_info();
}
const ::qihoo::protocol::messages::GetInfoResp& Response::get_info() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Response.get_info)
  return get_info_ != NULL ? *get_info_
                         : *::qihoo::protocol::messages::GetInfoResp::internal_default_instance();
}
::qihoo::protocol::messages::GetInfoResp* Response::mutable_get_info() {
  set_has_get_info();
  if (get_info_ == NULL) {
    get_info_ = new ::qihoo::protocol::messages::GetInfoResp;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Response.get_info)
  return get_info_;
}
::qihoo::protocol::messages::GetInfoResp* Response::release_get_info() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Response.get_info)
  clear_has_get_info();
  ::qihoo::protocol::messages::GetInfoResp* temp = get_info_;
  get_info_ = NULL;
  return temp;
}
void Response::set_allocated_get_info(::qihoo::protocol::messages::GetInfoResp* get_info) {
  delete get_info_;
  get_info_ = get_info;
  if (get_info) {
    set_has_get_info();
  } else {
    clear_has_get_info();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Response.get_info)
}

// optional .qihoo.protocol.messages.LogoutResp logout = 7;
bool Response::has_logout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Response::set_has_logout() {
  _has_bits_[0] |= 0x00000010u;
}
void Response::clear_has_logout() {
  _has_bits_[0] &= ~0x00000010u;
}
void Response::clear_logout() {
  if (logout_ != NULL) logout_->::qihoo::protocol::messages::LogoutResp::Clear();
  clear_has_logout();
}
const ::qihoo::protocol::messages::LogoutResp& Response::logout() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Response.logout)
  return logout_ != NULL ? *logout_
                         : *::qihoo::protocol::messages::LogoutResp::internal_default_instance();
}
::qihoo::protocol::messages::LogoutResp* Response::mutable_logout() {
  set_has_logout();
  if (logout_ == NULL) {
    logout_ = new ::qihoo::protocol::messages::LogoutResp;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Response.logout)
  return logout_;
}
::qihoo::protocol::messages::LogoutResp* Response::release_logout() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Response.logout)
  clear_has_logout();
  ::qihoo::protocol::messages::LogoutResp* temp = logout_;
  logout_ = NULL;
  return temp;
}
void Response::set_allocated_logout(::qihoo::protocol::messages::LogoutResp* logout) {
  delete logout_;
  logout_ = logout;
  if (logout) {
    set_has_logout();
  } else {
    clear_has_logout();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Response.logout)
}

// optional .qihoo.protocol.messages.InitLoginResp init_login_resp = 10;
bool Response::has_init_login_resp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Response::set_has_init_login_resp() {
  _has_bits_[0] |= 0x00000020u;
}
void Response::clear_has_init_login_resp() {
  _has_bits_[0] &= ~0x00000020u;
}
void Response::clear_init_login_resp() {
  if (init_login_resp_ != NULL) init_login_resp_->::qihoo::protocol::messages::InitLoginResp::Clear();
  clear_has_init_login_resp();
}
const ::qihoo::protocol::messages::InitLoginResp& Response::init_login_resp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Response.init_login_resp)
  return init_login_resp_ != NULL ? *init_login_resp_
                         : *::qihoo::protocol::messages::InitLoginResp::internal_default_instance();
}
::qihoo::protocol::messages::InitLoginResp* Response::mutable_init_login_resp() {
  set_has_init_login_resp();
  if (init_login_resp_ == NULL) {
    init_login_resp_ = new ::qihoo::protocol::messages::InitLoginResp;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Response.init_login_resp)
  return init_login_resp_;
}
::qihoo::protocol::messages::InitLoginResp* Response::release_init_login_resp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Response.init_login_resp)
  clear_has_init_login_resp();
  ::qihoo::protocol::messages::InitLoginResp* temp = init_login_resp_;
  init_login_resp_ = NULL;
  return temp;
}
void Response::set_allocated_init_login_resp(::qihoo::protocol::messages::InitLoginResp* init_login_resp) {
  delete init_login_resp_;
  init_login_resp_ = init_login_resp;
  if (init_login_resp) {
    set_has_init_login_resp();
  } else {
    clear_has_init_login_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Response.init_login_resp)
}

// optional .qihoo.protocol.messages.Service_Resp service_resp = 12;
bool Response::has_service_resp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Response::set_has_service_resp() {
  _has_bits_[0] |= 0x00000040u;
}
void Response::clear_has_service_resp() {
  _has_bits_[0] &= ~0x00000040u;
}
void Response::clear_service_resp() {
  if (service_resp_ != NULL) service_resp_->::qihoo::protocol::messages::Service_Resp::Clear();
  clear_has_service_resp();
}
const ::qihoo::protocol::messages::Service_Resp& Response::service_resp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Response.service_resp)
  return service_resp_ != NULL ? *service_resp_
                         : *::qihoo::protocol::messages::Service_Resp::internal_default_instance();
}
::qihoo::protocol::messages::Service_Resp* Response::mutable_service_resp() {
  set_has_service_resp();
  if (service_resp_ == NULL) {
    service_resp_ = new ::qihoo::protocol::messages::Service_Resp;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Response.service_resp)
  return service_resp_;
}
::qihoo::protocol::messages::Service_Resp* Response::release_service_resp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Response.service_resp)
  clear_has_service_resp();
  ::qihoo::protocol::messages::Service_Resp* temp = service_resp_;
  service_resp_ = NULL;
  return temp;
}
void Response::set_allocated_service_resp(::qihoo::protocol::messages::Service_Resp* service_resp) {
  delete service_resp_;
  service_resp_ = service_resp;
  if (service_resp) {
    set_has_service_resp();
  } else {
    clear_has_service_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Response.service_resp)
}

// optional .qihoo.protocol.messages.Ex1QueryUserStatusResp e1_query_user = 13;
bool Response::has_e1_query_user() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Response::set_has_e1_query_user() {
  _has_bits_[0] |= 0x00000080u;
}
void Response::clear_has_e1_query_user() {
  _has_bits_[0] &= ~0x00000080u;
}
void Response::clear_e1_query_user() {
  if (e1_query_user_ != NULL) e1_query_user_->::qihoo::protocol::messages::Ex1QueryUserStatusResp::Clear();
  clear_has_e1_query_user();
}
const ::qihoo::protocol::messages::Ex1QueryUserStatusResp& Response::e1_query_user() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Response.e1_query_user)
  return e1_query_user_ != NULL ? *e1_query_user_
                         : *::qihoo::protocol::messages::Ex1QueryUserStatusResp::internal_default_instance();
}
::qihoo::protocol::messages::Ex1QueryUserStatusResp* Response::mutable_e1_query_user() {
  set_has_e1_query_user();
  if (e1_query_user_ == NULL) {
    e1_query_user_ = new ::qihoo::protocol::messages::Ex1QueryUserStatusResp;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Response.e1_query_user)
  return e1_query_user_;
}
::qihoo::protocol::messages::Ex1QueryUserStatusResp* Response::release_e1_query_user() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Response.e1_query_user)
  clear_has_e1_query_user();
  ::qihoo::protocol::messages::Ex1QueryUserStatusResp* temp = e1_query_user_;
  e1_query_user_ = NULL;
  return temp;
}
void Response::set_allocated_e1_query_user(::qihoo::protocol::messages::Ex1QueryUserStatusResp* e1_query_user) {
  delete e1_query_user_;
  e1_query_user_ = e1_query_user;
  if (e1_query_user) {
    set_has_e1_query_user();
  } else {
    clear_has_e1_query_user();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Response.e1_query_user)
}

// optional .qihoo.protocol.messages.GetMultiInfosResp get_multi_infos = 100;
bool Response::has_get_multi_infos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Response::set_has_get_multi_infos() {
  _has_bits_[0] |= 0x00000100u;
}
void Response::clear_has_get_multi_infos() {
  _has_bits_[0] &= ~0x00000100u;
}
void Response::clear_get_multi_infos() {
  if (get_multi_infos_ != NULL) get_multi_infos_->::qihoo::protocol::messages::GetMultiInfosResp::Clear();
  clear_has_get_multi_infos();
}
const ::qihoo::protocol::messages::GetMultiInfosResp& Response::get_multi_infos() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Response.get_multi_infos)
  return get_multi_infos_ != NULL ? *get_multi_infos_
                         : *::qihoo::protocol::messages::GetMultiInfosResp::internal_default_instance();
}
::qihoo::protocol::messages::GetMultiInfosResp* Response::mutable_get_multi_infos() {
  set_has_get_multi_infos();
  if (get_multi_infos_ == NULL) {
    get_multi_infos_ = new ::qihoo::protocol::messages::GetMultiInfosResp;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Response.get_multi_infos)
  return get_multi_infos_;
}
::qihoo::protocol::messages::GetMultiInfosResp* Response::release_get_multi_infos() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Response.get_multi_infos)
  clear_has_get_multi_infos();
  ::qihoo::protocol::messages::GetMultiInfosResp* temp = get_multi_infos_;
  get_multi_infos_ = NULL;
  return temp;
}
void Response::set_allocated_get_multi_infos(::qihoo::protocol::messages::GetMultiInfosResp* get_multi_infos) {
  delete get_multi_infos_;
  get_multi_infos_ = get_multi_infos;
  if (get_multi_infos) {
    set_has_get_multi_infos();
  } else {
    clear_has_get_multi_infos();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Response.get_multi_infos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewMessageNotify::kInfoTypeFieldNumber;
const int NewMessageNotify::kInfoContentFieldNumber;
const int NewMessageNotify::kInfoIdFieldNumber;
const int NewMessageNotify::kQueryAfterSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewMessageNotify::NewMessageNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.NewMessageNotify)
}
NewMessageNotify::NewMessageNotify(const NewMessageNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info_type()) {
    info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
  }
  info_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_info_content()) {
    info_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_content_);
  }
  ::memcpy(&info_id_, &from.info_id_,
    reinterpret_cast<char*>(&query_after_seconds_) -
    reinterpret_cast<char*>(&info_id_) + sizeof(query_after_seconds_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.NewMessageNotify)
}

void NewMessageNotify::SharedCtor() {
  _cached_size_ = 0;
  info_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_id_, 0, reinterpret_cast<char*>(&query_after_seconds_) -
    reinterpret_cast<char*>(&info_id_) + sizeof(query_after_seconds_));
}

NewMessageNotify::~NewMessageNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.NewMessageNotify)
  SharedDtor();
}

void NewMessageNotify::SharedDtor() {
  info_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewMessageNotify::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewMessageNotify& NewMessageNotify::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewMessageNotify* NewMessageNotify::New(::google::protobuf::Arena* arena) const {
  NewMessageNotify* n = new NewMessageNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewMessageNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.NewMessageNotify)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_info_type()) {
      GOOGLE_DCHECK(!info_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*info_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_info_content()) {
      GOOGLE_DCHECK(!info_content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*info_content_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&info_id_, 0, reinterpret_cast<char*>(&query_after_seconds_) -
      reinterpret_cast<char*>(&info_id_) + sizeof(query_after_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.NewMessageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info_type().data(), this->info_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.NewMessageNotify.info_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes info_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 info_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_info_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &info_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_after_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_query_after_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_after_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.NewMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.NewMessageNotify)
  return false;
#undef DO_
}

void NewMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.NewMessageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.NewMessageNotify.info_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info_type(), output);
  }

  // optional bytes info_content = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->info_content(), output);
  }

  // optional int64 info_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->info_id(), output);
  }

  // optional uint32 query_after_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->query_after_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.NewMessageNotify)
}

::google::protobuf::uint8* NewMessageNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.NewMessageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string info_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info_type().data(), this->info_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.NewMessageNotify.info_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info_type(), target);
  }

  // optional bytes info_content = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->info_content(), target);
  }

  // optional int64 info_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->info_id(), target);
  }

  // optional uint32 query_after_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->query_after_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.NewMessageNotify)
  return target;
}

size_t NewMessageNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.NewMessageNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string info_type = 1;
  if (has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info_type());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional bytes info_content = 2;
    if (has_info_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info_content());
    }

    // optional int64 info_id = 3;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->info_id());
    }

    // optional uint32 query_after_seconds = 4;
    if (has_query_after_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_after_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.NewMessageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMessageNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewMessageNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.NewMessageNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.NewMessageNotify)
    MergeFrom(*source);
  }
}

void NewMessageNotify::MergeFrom(const NewMessageNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.NewMessageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_info_type();
      info_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_info_content();
      info_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_content_);
    }
    if (cached_has_bits & 0x00000004u) {
      info_id_ = from.info_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      query_after_seconds_ = from.query_after_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.NewMessageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMessageNotify::CopyFrom(const NewMessageNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.NewMessageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMessageNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void NewMessageNotify::Swap(NewMessageNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewMessageNotify::InternalSwap(NewMessageNotify* other) {
  info_type_.Swap(&other->info_type_);
  info_content_.Swap(&other->info_content_);
  std::swap(info_id_, other->info_id_);
  std::swap(query_after_seconds_, other->query_after_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewMessageNotify::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewMessageNotify

// required string info_type = 1;
bool NewMessageNotify::has_info_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewMessageNotify::set_has_info_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NewMessageNotify::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewMessageNotify::clear_info_type() {
  info_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info_type();
}
const ::std::string& NewMessageNotify::info_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.NewMessageNotify.info_type)
  return info_type_.GetNoArena();
}
void NewMessageNotify::set_info_type(const ::std::string& value) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.NewMessageNotify.info_type)
}
#if LANG_CXX11
void NewMessageNotify::set_info_type(::std::string&& value) {
  set_has_info_type();
  info_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.NewMessageNotify.info_type)
}
#endif
void NewMessageNotify::set_info_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.NewMessageNotify.info_type)
}
void NewMessageNotify::set_info_type(const char* value, size_t size) {
  set_has_info_type();
  info_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.NewMessageNotify.info_type)
}
::std::string* NewMessageNotify::mutable_info_type() {
  set_has_info_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.NewMessageNotify.info_type)
  return info_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewMessageNotify::release_info_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.NewMessageNotify.info_type)
  clear_has_info_type();
  return info_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewMessageNotify::set_allocated_info_type(::std::string* info_type) {
  if (info_type != NULL) {
    set_has_info_type();
  } else {
    clear_has_info_type();
  }
  info_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.NewMessageNotify.info_type)
}

// optional bytes info_content = 2;
bool NewMessageNotify::has_info_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewMessageNotify::set_has_info_content() {
  _has_bits_[0] |= 0x00000002u;
}
void NewMessageNotify::clear_has_info_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewMessageNotify::clear_info_content() {
  info_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info_content();
}
const ::std::string& NewMessageNotify::info_content() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.NewMessageNotify.info_content)
  return info_content_.GetNoArena();
}
void NewMessageNotify::set_info_content(const ::std::string& value) {
  set_has_info_content();
  info_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.NewMessageNotify.info_content)
}
#if LANG_CXX11
void NewMessageNotify::set_info_content(::std::string&& value) {
  set_has_info_content();
  info_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.NewMessageNotify.info_content)
}
#endif
void NewMessageNotify::set_info_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_info_content();
  info_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.NewMessageNotify.info_content)
}
void NewMessageNotify::set_info_content(const void* value, size_t size) {
  set_has_info_content();
  info_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.NewMessageNotify.info_content)
}
::std::string* NewMessageNotify::mutable_info_content() {
  set_has_info_content();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.NewMessageNotify.info_content)
  return info_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewMessageNotify::release_info_content() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.NewMessageNotify.info_content)
  clear_has_info_content();
  return info_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewMessageNotify::set_allocated_info_content(::std::string* info_content) {
  if (info_content != NULL) {
    set_has_info_content();
  } else {
    clear_has_info_content();
  }
  info_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info_content);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.NewMessageNotify.info_content)
}

// optional int64 info_id = 3;
bool NewMessageNotify::has_info_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewMessageNotify::set_has_info_id() {
  _has_bits_[0] |= 0x00000004u;
}
void NewMessageNotify::clear_has_info_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewMessageNotify::clear_info_id() {
  info_id_ = GOOGLE_LONGLONG(0);
  clear_has_info_id();
}
::google::protobuf::int64 NewMessageNotify::info_id() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.NewMessageNotify.info_id)
  return info_id_;
}
void NewMessageNotify::set_info_id(::google::protobuf::int64 value) {
  set_has_info_id();
  info_id_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.NewMessageNotify.info_id)
}

// optional uint32 query_after_seconds = 4;
bool NewMessageNotify::has_query_after_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewMessageNotify::set_has_query_after_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
void NewMessageNotify::clear_has_query_after_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewMessageNotify::clear_query_after_seconds() {
  query_after_seconds_ = 0u;
  clear_has_query_after_seconds();
}
::google::protobuf::uint32 NewMessageNotify::query_after_seconds() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.NewMessageNotify.query_after_seconds)
  return query_after_seconds_;
}
void NewMessageNotify::set_query_after_seconds(::google::protobuf::uint32 value) {
  set_has_query_after_seconds();
  query_after_seconds_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.NewMessageNotify.query_after_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReLoginNotify::kNewIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReLoginNotify::ReLoginNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ReLoginNotify)
}
ReLoginNotify::ReLoginNotify(const ReLoginNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_new_ip()) {
    new_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_ip_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ReLoginNotify)
}

void ReLoginNotify::SharedCtor() {
  _cached_size_ = 0;
  new_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReLoginNotify::~ReLoginNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ReLoginNotify)
  SharedDtor();
}

void ReLoginNotify::SharedDtor() {
  new_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReLoginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLoginNotify::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReLoginNotify& ReLoginNotify::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReLoginNotify* ReLoginNotify::New(::google::protobuf::Arena* arena) const {
  ReLoginNotify* n = new ReLoginNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReLoginNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.ReLoginNotify)
  if (has_new_ip()) {
    GOOGLE_DCHECK(!new_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*new_ip_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReLoginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ReLoginNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string new_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_ip().data(), this->new_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.ReLoginNotify.new_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ReLoginNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ReLoginNotify)
  return false;
#undef DO_
}

void ReLoginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ReLoginNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string new_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_ip().data(), this->new_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReLoginNotify.new_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->new_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ReLoginNotify)
}

::google::protobuf::uint8* ReLoginNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ReLoginNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string new_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_ip().data(), this->new_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReLoginNotify.new_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ReLoginNotify)
  return target;
}

size_t ReLoginNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.ReLoginNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string new_ip = 1;
  if (has_new_ip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLoginNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.ReLoginNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLoginNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReLoginNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.ReLoginNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.ReLoginNotify)
    MergeFrom(*source);
  }
}

void ReLoginNotify::MergeFrom(const ReLoginNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.ReLoginNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_ip()) {
    set_has_new_ip();
    new_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_ip_);
  }
}

void ReLoginNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.ReLoginNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLoginNotify::CopyFrom(const ReLoginNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.ReLoginNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLoginNotify::IsInitialized() const {
  return true;
}

void ReLoginNotify::Swap(ReLoginNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReLoginNotify::InternalSwap(ReLoginNotify* other) {
  new_ip_.Swap(&other->new_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReLoginNotify::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReLoginNotify

// optional string new_ip = 1;
bool ReLoginNotify::has_new_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReLoginNotify::set_has_new_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void ReLoginNotify::clear_has_new_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReLoginNotify::clear_new_ip() {
  new_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_ip();
}
const ::std::string& ReLoginNotify::new_ip() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ReLoginNotify.new_ip)
  return new_ip_.GetNoArena();
}
void ReLoginNotify::set_new_ip(const ::std::string& value) {
  set_has_new_ip();
  new_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ReLoginNotify.new_ip)
}
#if LANG_CXX11
void ReLoginNotify::set_new_ip(::std::string&& value) {
  set_has_new_ip();
  new_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.ReLoginNotify.new_ip)
}
#endif
void ReLoginNotify::set_new_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_ip();
  new_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.ReLoginNotify.new_ip)
}
void ReLoginNotify::set_new_ip(const char* value, size_t size) {
  set_has_new_ip();
  new_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.ReLoginNotify.new_ip)
}
::std::string* ReLoginNotify::mutable_new_ip() {
  set_has_new_ip();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.ReLoginNotify.new_ip)
  return new_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReLoginNotify::release_new_ip() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.ReLoginNotify.new_ip)
  clear_has_new_ip();
  return new_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReLoginNotify::set_allocated_new_ip(::std::string* new_ip) {
  if (new_ip != NULL) {
    set_has_new_ip();
  } else {
    clear_has_new_ip();
  }
  new_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_ip);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.ReLoginNotify.new_ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReConnectNotify::kIpFieldNumber;
const int ReConnectNotify::kPortFieldNumber;
const int ReConnectNotify::kMoreIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReConnectNotify::ReConnectNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.ReConnectNotify)
}
ReConnectNotify::ReConnectNotify(const ReConnectNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      more_ips_(from.more_ips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.ReConnectNotify)
}

void ReConnectNotify::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

ReConnectNotify::~ReConnectNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.ReConnectNotify)
  SharedDtor();
}

void ReConnectNotify::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReConnectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReConnectNotify::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReConnectNotify& ReConnectNotify::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReConnectNotify* ReConnectNotify::New(::google::protobuf::Arena* arena) const {
  ReConnectNotify* n = new ReConnectNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReConnectNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.ReConnectNotify)
  more_ips_.Clear();
  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReConnectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.ReConnectNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.ReConnectNotify.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string more_ips = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_more_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->more_ips(this->more_ips_size() - 1).data(),
            this->more_ips(this->more_ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.ReConnectNotify.more_ips");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.ReConnectNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.ReConnectNotify)
  return false;
#undef DO_
}

void ReConnectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.ReConnectNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReConnectNotify.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // repeated string more_ips = 3;
  for (int i = 0, n = this->more_ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->more_ips(i).data(), this->more_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReConnectNotify.more_ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->more_ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.ReConnectNotify)
}

::google::protobuf::uint8* ReConnectNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.ReConnectNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReConnectNotify.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // repeated string more_ips = 3;
  for (int i = 0, n = this->more_ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->more_ips(i).data(), this->more_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.ReConnectNotify.more_ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->more_ips(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.ReConnectNotify)
  return target;
}

size_t ReConnectNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.ReConnectNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string more_ips = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->more_ips_size());
  for (int i = 0, n = this->more_ips_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->more_ips(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReConnectNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.ReConnectNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ReConnectNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReConnectNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.ReConnectNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.ReConnectNotify)
    MergeFrom(*source);
  }
}

void ReConnectNotify::MergeFrom(const ReConnectNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.ReConnectNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  more_ips_.MergeFrom(from.more_ips_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReConnectNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.ReConnectNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReConnectNotify::CopyFrom(const ReConnectNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.ReConnectNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReConnectNotify::IsInitialized() const {
  return true;
}

void ReConnectNotify::Swap(ReConnectNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReConnectNotify::InternalSwap(ReConnectNotify* other) {
  more_ips_.InternalSwap(&other->more_ips_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReConnectNotify::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReConnectNotify

// optional string ip = 1;
bool ReConnectNotify::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReConnectNotify::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void ReConnectNotify::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReConnectNotify::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& ReConnectNotify::ip() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ReConnectNotify.ip)
  return ip_.GetNoArena();
}
void ReConnectNotify::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ReConnectNotify.ip)
}
#if LANG_CXX11
void ReConnectNotify::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.ReConnectNotify.ip)
}
#endif
void ReConnectNotify::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.ReConnectNotify.ip)
}
void ReConnectNotify::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.ReConnectNotify.ip)
}
::std::string* ReConnectNotify::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.ReConnectNotify.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReConnectNotify::release_ip() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.ReConnectNotify.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReConnectNotify::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.ReConnectNotify.ip)
}

// optional uint32 port = 2;
bool ReConnectNotify::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReConnectNotify::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void ReConnectNotify::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReConnectNotify::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 ReConnectNotify::port() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ReConnectNotify.port)
  return port_;
}
void ReConnectNotify::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ReConnectNotify.port)
}

// repeated string more_ips = 3;
int ReConnectNotify::more_ips_size() const {
  return more_ips_.size();
}
void ReConnectNotify::clear_more_ips() {
  more_ips_.Clear();
}
const ::std::string& ReConnectNotify::more_ips(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.ReConnectNotify.more_ips)
  return more_ips_.Get(index);
}
::std::string* ReConnectNotify::mutable_more_ips(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.ReConnectNotify.more_ips)
  return more_ips_.Mutable(index);
}
void ReConnectNotify::set_more_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ReConnectNotify.more_ips)
  more_ips_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ReConnectNotify::set_more_ips(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.ReConnectNotify.more_ips)
  more_ips_.Mutable(index)->assign(std::move(value));
}
#endif
void ReConnectNotify::set_more_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  more_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.ReConnectNotify.more_ips)
}
void ReConnectNotify::set_more_ips(int index, const char* value, size_t size) {
  more_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.ReConnectNotify.more_ips)
}
::std::string* ReConnectNotify::add_more_ips() {
  // @@protoc_insertion_point(field_add_mutable:qihoo.protocol.messages.ReConnectNotify.more_ips)
  return more_ips_.Add();
}
void ReConnectNotify::add_more_ips(const ::std::string& value) {
  more_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.ReConnectNotify.more_ips)
}
#if LANG_CXX11
void ReConnectNotify::add_more_ips(::std::string&& value) {
  more_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.ReConnectNotify.more_ips)
}
#endif
void ReConnectNotify::add_more_ips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  more_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:qihoo.protocol.messages.ReConnectNotify.more_ips)
}
void ReConnectNotify::add_more_ips(const char* value, size_t size) {
  more_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:qihoo.protocol.messages.ReConnectNotify.more_ips)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReConnectNotify::more_ips() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.messages.ReConnectNotify.more_ips)
  return more_ips_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ReConnectNotify::mutable_more_ips() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.messages.ReConnectNotify.more_ips)
  return &more_ips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notify::kNewinfoNtfFieldNumber;
const int Notify::kReloginNtfFieldNumber;
const int Notify::kReconnectNtfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notify::Notify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Notify)
}
Notify::Notify(const Notify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_newinfo_ntf()) {
    newinfo_ntf_ = new ::qihoo::protocol::messages::NewMessageNotify(*from.newinfo_ntf_);
  } else {
    newinfo_ntf_ = NULL;
  }
  if (from.has_relogin_ntf()) {
    relogin_ntf_ = new ::qihoo::protocol::messages::ReLoginNotify(*from.relogin_ntf_);
  } else {
    relogin_ntf_ = NULL;
  }
  if (from.has_reconnect_ntf()) {
    reconnect_ntf_ = new ::qihoo::protocol::messages::ReConnectNotify(*from.reconnect_ntf_);
  } else {
    reconnect_ntf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Notify)
}

void Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&newinfo_ntf_, 0, reinterpret_cast<char*>(&reconnect_ntf_) -
    reinterpret_cast<char*>(&newinfo_ntf_) + sizeof(reconnect_ntf_));
}

Notify::~Notify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Notify)
  SharedDtor();
}

void Notify::SharedDtor() {
  if (this != internal_default_instance()) {
    delete newinfo_ntf_;
  }
  if (this != internal_default_instance()) {
    delete relogin_ntf_;
  }
  if (this != internal_default_instance()) {
    delete reconnect_ntf_;
  }
}

void Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notify::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Notify& Notify::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Notify* Notify::New(::google::protobuf::Arena* arena) const {
  Notify* n = new Notify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Notify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Notify)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_newinfo_ntf()) {
      GOOGLE_DCHECK(newinfo_ntf_ != NULL);
      newinfo_ntf_->::qihoo::protocol::messages::NewMessageNotify::Clear();
    }
    if (has_relogin_ntf()) {
      GOOGLE_DCHECK(relogin_ntf_ != NULL);
      relogin_ntf_->::qihoo::protocol::messages::ReLoginNotify::Clear();
    }
    if (has_reconnect_ntf()) {
      GOOGLE_DCHECK(reconnect_ntf_ != NULL);
      reconnect_ntf_->::qihoo::protocol::messages::ReConnectNotify::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Notify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.messages.NewMessageNotify newinfo_ntf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newinfo_ntf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.ReLoginNotify relogin_ntf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relogin_ntf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.ReConnectNotify reconnect_ntf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reconnect_ntf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Notify)
  return false;
#undef DO_
}

void Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.messages.NewMessageNotify newinfo_ntf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->newinfo_ntf_, output);
  }

  // optional .qihoo.protocol.messages.ReLoginNotify relogin_ntf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->relogin_ntf_, output);
  }

  // optional .qihoo.protocol.messages.ReConnectNotify reconnect_ntf = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->reconnect_ntf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Notify)
}

::google::protobuf::uint8* Notify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.messages.NewMessageNotify newinfo_ntf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->newinfo_ntf_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.ReLoginNotify relogin_ntf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->relogin_ntf_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.ReConnectNotify reconnect_ntf = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->reconnect_ntf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Notify)
  return target;
}

size_t Notify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Notify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .qihoo.protocol.messages.NewMessageNotify newinfo_ntf = 1;
    if (has_newinfo_ntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newinfo_ntf_);
    }

    // optional .qihoo.protocol.messages.ReLoginNotify relogin_ntf = 2;
    if (has_relogin_ntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relogin_ntf_);
    }

    // optional .qihoo.protocol.messages.ReConnectNotify reconnect_ntf = 3;
    if (has_reconnect_ntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reconnect_ntf_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Notify)
  GOOGLE_DCHECK_NE(&from, this);
  const Notify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Notify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Notify)
    MergeFrom(*source);
  }
}

void Notify::MergeFrom(const Notify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Notify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_newinfo_ntf()->::qihoo::protocol::messages::NewMessageNotify::MergeFrom(from.newinfo_ntf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_relogin_ntf()->::qihoo::protocol::messages::ReLoginNotify::MergeFrom(from.relogin_ntf());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reconnect_ntf()->::qihoo::protocol::messages::ReConnectNotify::MergeFrom(from.reconnect_ntf());
    }
  }
}

void Notify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notify::CopyFrom(const Notify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notify::IsInitialized() const {
  if (has_newinfo_ntf()) {
    if (!this->newinfo_ntf_->IsInitialized()) return false;
  }
  return true;
}

void Notify::Swap(Notify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notify::InternalSwap(Notify* other) {
  std::swap(newinfo_ntf_, other->newinfo_ntf_);
  std::swap(relogin_ntf_, other->relogin_ntf_);
  std::swap(reconnect_ntf_, other->reconnect_ntf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Notify::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Notify

// optional .qihoo.protocol.messages.NewMessageNotify newinfo_ntf = 1;
bool Notify::has_newinfo_ntf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Notify::set_has_newinfo_ntf() {
  _has_bits_[0] |= 0x00000001u;
}
void Notify::clear_has_newinfo_ntf() {
  _has_bits_[0] &= ~0x00000001u;
}
void Notify::clear_newinfo_ntf() {
  if (newinfo_ntf_ != NULL) newinfo_ntf_->::qihoo::protocol::messages::NewMessageNotify::Clear();
  clear_has_newinfo_ntf();
}
const ::qihoo::protocol::messages::NewMessageNotify& Notify::newinfo_ntf() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Notify.newinfo_ntf)
  return newinfo_ntf_ != NULL ? *newinfo_ntf_
                         : *::qihoo::protocol::messages::NewMessageNotify::internal_default_instance();
}
::qihoo::protocol::messages::NewMessageNotify* Notify::mutable_newinfo_ntf() {
  set_has_newinfo_ntf();
  if (newinfo_ntf_ == NULL) {
    newinfo_ntf_ = new ::qihoo::protocol::messages::NewMessageNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Notify.newinfo_ntf)
  return newinfo_ntf_;
}
::qihoo::protocol::messages::NewMessageNotify* Notify::release_newinfo_ntf() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Notify.newinfo_ntf)
  clear_has_newinfo_ntf();
  ::qihoo::protocol::messages::NewMessageNotify* temp = newinfo_ntf_;
  newinfo_ntf_ = NULL;
  return temp;
}
void Notify::set_allocated_newinfo_ntf(::qihoo::protocol::messages::NewMessageNotify* newinfo_ntf) {
  delete newinfo_ntf_;
  newinfo_ntf_ = newinfo_ntf;
  if (newinfo_ntf) {
    set_has_newinfo_ntf();
  } else {
    clear_has_newinfo_ntf();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Notify.newinfo_ntf)
}

// optional .qihoo.protocol.messages.ReLoginNotify relogin_ntf = 2;
bool Notify::has_relogin_ntf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Notify::set_has_relogin_ntf() {
  _has_bits_[0] |= 0x00000002u;
}
void Notify::clear_has_relogin_ntf() {
  _has_bits_[0] &= ~0x00000002u;
}
void Notify::clear_relogin_ntf() {
  if (relogin_ntf_ != NULL) relogin_ntf_->::qihoo::protocol::messages::ReLoginNotify::Clear();
  clear_has_relogin_ntf();
}
const ::qihoo::protocol::messages::ReLoginNotify& Notify::relogin_ntf() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Notify.relogin_ntf)
  return relogin_ntf_ != NULL ? *relogin_ntf_
                         : *::qihoo::protocol::messages::ReLoginNotify::internal_default_instance();
}
::qihoo::protocol::messages::ReLoginNotify* Notify::mutable_relogin_ntf() {
  set_has_relogin_ntf();
  if (relogin_ntf_ == NULL) {
    relogin_ntf_ = new ::qihoo::protocol::messages::ReLoginNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Notify.relogin_ntf)
  return relogin_ntf_;
}
::qihoo::protocol::messages::ReLoginNotify* Notify::release_relogin_ntf() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Notify.relogin_ntf)
  clear_has_relogin_ntf();
  ::qihoo::protocol::messages::ReLoginNotify* temp = relogin_ntf_;
  relogin_ntf_ = NULL;
  return temp;
}
void Notify::set_allocated_relogin_ntf(::qihoo::protocol::messages::ReLoginNotify* relogin_ntf) {
  delete relogin_ntf_;
  relogin_ntf_ = relogin_ntf;
  if (relogin_ntf) {
    set_has_relogin_ntf();
  } else {
    clear_has_relogin_ntf();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Notify.relogin_ntf)
}

// optional .qihoo.protocol.messages.ReConnectNotify reconnect_ntf = 3;
bool Notify::has_reconnect_ntf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Notify::set_has_reconnect_ntf() {
  _has_bits_[0] |= 0x00000004u;
}
void Notify::clear_has_reconnect_ntf() {
  _has_bits_[0] &= ~0x00000004u;
}
void Notify::clear_reconnect_ntf() {
  if (reconnect_ntf_ != NULL) reconnect_ntf_->::qihoo::protocol::messages::ReConnectNotify::Clear();
  clear_has_reconnect_ntf();
}
const ::qihoo::protocol::messages::ReConnectNotify& Notify::reconnect_ntf() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Notify.reconnect_ntf)
  return reconnect_ntf_ != NULL ? *reconnect_ntf_
                         : *::qihoo::protocol::messages::ReConnectNotify::internal_default_instance();
}
::qihoo::protocol::messages::ReConnectNotify* Notify::mutable_reconnect_ntf() {
  set_has_reconnect_ntf();
  if (reconnect_ntf_ == NULL) {
    reconnect_ntf_ = new ::qihoo::protocol::messages::ReConnectNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Notify.reconnect_ntf)
  return reconnect_ntf_;
}
::qihoo::protocol::messages::ReConnectNotify* Notify::release_reconnect_ntf() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Notify.reconnect_ntf)
  clear_has_reconnect_ntf();
  ::qihoo::protocol::messages::ReConnectNotify* temp = reconnect_ntf_;
  reconnect_ntf_ = NULL;
  return temp;
}
void Notify::set_allocated_reconnect_ntf(::qihoo::protocol::messages::ReConnectNotify* reconnect_ntf) {
  delete reconnect_ntf_;
  reconnect_ntf_ = reconnect_ntf;
  if (reconnect_ntf) {
    set_has_reconnect_ntf();
  } else {
    clear_has_reconnect_ntf();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Notify.reconnect_ntf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ack::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ack::Ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Ack)
}
Ack::Ack(const Ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Ack)
}

void Ack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Ack)
  SharedDtor();
}

void Ack::SharedDtor() {
}

void Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ack& Ack::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ack* Ack::New(::google::protobuf::Arena* arena) const {
  Ack* n = new Ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Ack)
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Ack)
  return false;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Ack)
}

::google::protobuf::uint8* Ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  const Ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Ack)
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Ack::Swap(Ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ack::InternalSwap(Ack* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ack

// required uint32 result = 1;
bool Ack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void Ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ack::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 Ack::result() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Ack.result)
  return result_;
}
void Ack::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Ack.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteInfo::kUsernameFieldNumber;
const int RouteInfo::kMsgExchangerFieldNumber;
const int RouteInfo::kMsgRouterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteInfo::RouteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.RouteInfo)
}
RouteInfo::RouteInfo(const RouteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  msg_exchanger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_exchanger()) {
    msg_exchanger_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_exchanger_);
  }
  msg_router_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_router()) {
    msg_router_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_router_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.RouteInfo)
}

void RouteInfo::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_exchanger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_router_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.RouteInfo)
  SharedDtor();
}

void RouteInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_exchanger_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_router_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RouteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteInfo::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteInfo& RouteInfo::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteInfo* RouteInfo::New(::google::protobuf::Arena* arena) const {
  RouteInfo* n = new RouteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.RouteInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_msg_exchanger()) {
      GOOGLE_DCHECK(!msg_exchanger_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_exchanger_.UnsafeRawStringPointer())->clear();
    }
    if (has_msg_router()) {
      GOOGLE_DCHECK(!msg_router_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_router_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RouteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.RouteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string msg_exchanger = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_exchanger()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_exchanger().data(), this->msg_exchanger().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.RouteInfo.msg_exchanger");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string msg_router = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_router()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_router().data(), this->msg_router().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.RouteInfo.msg_router");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.RouteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.RouteInfo)
  return false;
#undef DO_
}

void RouteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.RouteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->username(), output);
  }

  // required string msg_exchanger = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_exchanger().data(), this->msg_exchanger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RouteInfo.msg_exchanger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg_exchanger(), output);
  }

  // required string msg_router = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_router().data(), this->msg_router().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RouteInfo.msg_router");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg_router(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.RouteInfo)
}

::google::protobuf::uint8* RouteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.RouteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes username = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // required string msg_exchanger = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_exchanger().data(), this->msg_exchanger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RouteInfo.msg_exchanger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_exchanger(), target);
  }

  // required string msg_router = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_router().data(), this->msg_router().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.RouteInfo.msg_router");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_router(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.RouteInfo)
  return target;
}

size_t RouteInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.RouteInfo)
  size_t total_size = 0;

  if (has_username()) {
    // required bytes username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->username());
  }

  if (has_msg_exchanger()) {
    // required string msg_exchanger = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_exchanger());
  }

  if (has_msg_router()) {
    // required string msg_router = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_router());
  }

  return total_size;
}
size_t RouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.RouteInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->username());

    // required string msg_exchanger = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_exchanger());

    // required string msg_router = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_router());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.RouteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.RouteInfo)
    MergeFrom(*source);
  }
}

void RouteInfo::MergeFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msg_exchanger();
      msg_exchanger_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_exchanger_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_msg_router();
      msg_router_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_router_);
    }
  }
}

void RouteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RouteInfo::Swap(RouteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteInfo::InternalSwap(RouteInfo* other) {
  username_.Swap(&other->username_);
  msg_exchanger_.Swap(&other->msg_exchanger_);
  msg_router_.Swap(&other->msg_router_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteInfo::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteInfo

// required bytes username = 1;
bool RouteInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RouteInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void RouteInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void RouteInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& RouteInfo::username() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RouteInfo.username)
  return username_.GetNoArena();
}
void RouteInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RouteInfo.username)
}
#if LANG_CXX11
void RouteInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.RouteInfo.username)
}
#endif
void RouteInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.RouteInfo.username)
}
void RouteInfo::set_username(const void* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.RouteInfo.username)
}
::std::string* RouteInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.RouteInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteInfo::release_username() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.RouteInfo.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.RouteInfo.username)
}

// required string msg_exchanger = 2;
bool RouteInfo::has_msg_exchanger() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RouteInfo::set_has_msg_exchanger() {
  _has_bits_[0] |= 0x00000002u;
}
void RouteInfo::clear_has_msg_exchanger() {
  _has_bits_[0] &= ~0x00000002u;
}
void RouteInfo::clear_msg_exchanger() {
  msg_exchanger_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_exchanger();
}
const ::std::string& RouteInfo::msg_exchanger() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RouteInfo.msg_exchanger)
  return msg_exchanger_.GetNoArena();
}
void RouteInfo::set_msg_exchanger(const ::std::string& value) {
  set_has_msg_exchanger();
  msg_exchanger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RouteInfo.msg_exchanger)
}
#if LANG_CXX11
void RouteInfo::set_msg_exchanger(::std::string&& value) {
  set_has_msg_exchanger();
  msg_exchanger_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.RouteInfo.msg_exchanger)
}
#endif
void RouteInfo::set_msg_exchanger(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_exchanger();
  msg_exchanger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.RouteInfo.msg_exchanger)
}
void RouteInfo::set_msg_exchanger(const char* value, size_t size) {
  set_has_msg_exchanger();
  msg_exchanger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.RouteInfo.msg_exchanger)
}
::std::string* RouteInfo::mutable_msg_exchanger() {
  set_has_msg_exchanger();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.RouteInfo.msg_exchanger)
  return msg_exchanger_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteInfo::release_msg_exchanger() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.RouteInfo.msg_exchanger)
  clear_has_msg_exchanger();
  return msg_exchanger_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteInfo::set_allocated_msg_exchanger(::std::string* msg_exchanger) {
  if (msg_exchanger != NULL) {
    set_has_msg_exchanger();
  } else {
    clear_has_msg_exchanger();
  }
  msg_exchanger_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_exchanger);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.RouteInfo.msg_exchanger)
}

// required string msg_router = 3;
bool RouteInfo::has_msg_router() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RouteInfo::set_has_msg_router() {
  _has_bits_[0] |= 0x00000004u;
}
void RouteInfo::clear_has_msg_router() {
  _has_bits_[0] &= ~0x00000004u;
}
void RouteInfo::clear_msg_router() {
  msg_router_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_router();
}
const ::std::string& RouteInfo::msg_router() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.RouteInfo.msg_router)
  return msg_router_.GetNoArena();
}
void RouteInfo::set_msg_router(const ::std::string& value) {
  set_has_msg_router();
  msg_router_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.RouteInfo.msg_router)
}
#if LANG_CXX11
void RouteInfo::set_msg_router(::std::string&& value) {
  set_has_msg_router();
  msg_router_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.RouteInfo.msg_router)
}
#endif
void RouteInfo::set_msg_router(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_router();
  msg_router_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.RouteInfo.msg_router)
}
void RouteInfo::set_msg_router(const char* value, size_t size) {
  set_has_msg_router();
  msg_router_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.RouteInfo.msg_router)
}
::std::string* RouteInfo::mutable_msg_router() {
  set_has_msg_router();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.RouteInfo.msg_router)
  return msg_router_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteInfo::release_msg_router() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.RouteInfo.msg_router)
  clear_has_msg_router();
  return msg_router_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteInfo::set_allocated_msg_router(::std::string* msg_router) {
  if (msg_router != NULL) {
    set_has_msg_router();
  } else {
    clear_has_msg_router();
  }
  msg_router_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_router);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.RouteInfo.msg_router)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proxy::kSenderFieldNumber;
const int Proxy::kReceiverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proxy::Proxy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Proxy)
}
Proxy::Proxy(const Proxy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      receiver_(from.receiver_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender()) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Proxy)
}

void Proxy::SharedCtor() {
  _cached_size_ = 0;
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Proxy::~Proxy() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Proxy)
  SharedDtor();
}

void Proxy::SharedDtor() {
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Proxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proxy::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Proxy& Proxy::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Proxy* Proxy::New(::google::protobuf::Arena* arena) const {
  Proxy* n = new Proxy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Proxy::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Proxy)
  receiver_.Clear();
  if (has_sender()) {
    GOOGLE_DCHECK(!sender_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sender_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Proxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Proxy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.Proxy.sender");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.messages.RouteInfo receiver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receiver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Proxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Proxy)
  return false;
#undef DO_
}

void Proxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Proxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sender = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Proxy.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender(), output);
  }

  // repeated .qihoo.protocol.messages.RouteInfo receiver = 2;
  for (unsigned int i = 0, n = this->receiver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiver(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Proxy)
}

::google::protobuf::uint8* Proxy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Proxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sender = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Proxy.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // repeated .qihoo.protocol.messages.RouteInfo receiver = 2;
  for (unsigned int i = 0, n = this->receiver_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->receiver(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Proxy)
  return target;
}

size_t Proxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Proxy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string sender = 1;
  if (has_sender()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }
  // repeated .qihoo.protocol.messages.RouteInfo receiver = 2;
  {
    unsigned int count = this->receiver_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiver(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proxy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Proxy)
  GOOGLE_DCHECK_NE(&from, this);
  const Proxy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Proxy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Proxy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Proxy)
    MergeFrom(*source);
  }
}

void Proxy::MergeFrom(const Proxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Proxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receiver_.MergeFrom(from.receiver_);
  if (from.has_sender()) {
    set_has_sender();
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
}

void Proxy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Proxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proxy::CopyFrom(const Proxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Proxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proxy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->receiver())) return false;
  return true;
}

void Proxy::Swap(Proxy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proxy::InternalSwap(Proxy* other) {
  receiver_.InternalSwap(&other->receiver_);
  sender_.Swap(&other->sender_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Proxy::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Proxy

// required string sender = 1;
bool Proxy::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Proxy::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
void Proxy::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
void Proxy::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender();
}
const ::std::string& Proxy::sender() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Proxy.sender)
  return sender_.GetNoArena();
}
void Proxy::set_sender(const ::std::string& value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Proxy.sender)
}
#if LANG_CXX11
void Proxy::set_sender(::std::string&& value) {
  set_has_sender();
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Proxy.sender)
}
#endif
void Proxy::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Proxy.sender)
}
void Proxy::set_sender(const char* value, size_t size) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Proxy.sender)
}
::std::string* Proxy::mutable_sender() {
  set_has_sender();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Proxy.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Proxy::release_sender() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Proxy.sender)
  clear_has_sender();
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Proxy::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Proxy.sender)
}

// repeated .qihoo.protocol.messages.RouteInfo receiver = 2;
int Proxy::receiver_size() const {
  return receiver_.size();
}
void Proxy::clear_receiver() {
  receiver_.Clear();
}
const ::qihoo::protocol::messages::RouteInfo& Proxy::receiver(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Proxy.receiver)
  return receiver_.Get(index);
}
::qihoo::protocol::messages::RouteInfo* Proxy::mutable_receiver(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Proxy.receiver)
  return receiver_.Mutable(index);
}
::qihoo::protocol::messages::RouteInfo* Proxy::add_receiver() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.messages.Proxy.receiver)
  return receiver_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::RouteInfo >*
Proxy::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.messages.Proxy.receiver)
  return &receiver_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::messages::RouteInfo >&
Proxy::receiver() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.messages.Proxy.receiver)
  return receiver_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kMsgidFieldNumber;
const int Message::kSnFieldNumber;
const int Message::kSenderFieldNumber;
const int Message::kReceiverFieldNumber;
const int Message::kReceiverTypeFieldNumber;
const int Message::kReqFieldNumber;
const int Message::kRespFieldNumber;
const int Message::kNotifyFieldNumber;
const int Message::kAckFieldNumber;
const int Message::kProxyMesgFieldNumber;
const int Message::kClientDataFieldNumber;
const int Message::kSenderTypeFieldNumber;
const int Message::kSenderJidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommunicationData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.messages.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender()) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  receiver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_receiver()) {
    receiver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_);
  }
  receiver_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_receiver_type()) {
    receiver_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_type_);
  }
  sender_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_type()) {
    sender_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_type_);
  }
  sender_jid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_jid()) {
    sender_jid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_jid_);
  }
  if (from.has_req()) {
    req_ = new ::qihoo::protocol::messages::Request(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::qihoo::protocol::messages::Response(*from.resp_);
  } else {
    resp_ = NULL;
  }
  if (from.has_notify()) {
    notify_ = new ::qihoo::protocol::messages::Notify(*from.notify_);
  } else {
    notify_ = NULL;
  }
  if (from.has_ack()) {
    ack_ = new ::qihoo::protocol::messages::Ack(*from.ack_);
  } else {
    ack_ = NULL;
  }
  if (from.has_proxy_mesg()) {
    proxy_mesg_ = new ::qihoo::protocol::messages::Proxy(*from.proxy_mesg_);
  } else {
    proxy_mesg_ = NULL;
  }
  ::memcpy(&sn_, &from.sn_,
    reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&sn_) + sizeof(msgid_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.messages.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_jid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_, 0, reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&req_) + sizeof(msgid_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.messages.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_jid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete req_;
  }
  if (this != internal_default_instance()) {
    delete resp_;
  }
  if (this != internal_default_instance()) {
    delete notify_;
  }
  if (this != internal_default_instance()) {
    delete ack_;
  }
  if (this != internal_default_instance()) {
    delete proxy_mesg_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  protobuf_CommunicationData_2eproto::InitDefaults();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.messages.Message)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_sender()) {
      GOOGLE_DCHECK(!sender_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sender_.UnsafeRawStringPointer())->clear();
    }
    if (has_receiver()) {
      GOOGLE_DCHECK(!receiver_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*receiver_.UnsafeRawStringPointer())->clear();
    }
    if (has_receiver_type()) {
      GOOGLE_DCHECK(!receiver_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*receiver_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_sender_type()) {
      GOOGLE_DCHECK(!sender_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sender_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_sender_jid()) {
      GOOGLE_DCHECK(!sender_jid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sender_jid_.UnsafeRawStringPointer())->clear();
    }
    if (has_req()) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->::qihoo::protocol::messages::Request::Clear();
    }
    if (has_resp()) {
      GOOGLE_DCHECK(resp_ != NULL);
      resp_->::qihoo::protocol::messages::Response::Clear();
    }
    if (has_notify()) {
      GOOGLE_DCHECK(notify_ != NULL);
      notify_->::qihoo::protocol::messages::Notify::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_ack()) {
      GOOGLE_DCHECK(ack_ != NULL);
      ack_->::qihoo::protocol::messages::Ack::Clear();
    }
    if (has_proxy_mesg()) {
      GOOGLE_DCHECK(proxy_mesg_ != NULL);
      proxy_mesg_->::qihoo::protocol::messages::Proxy::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7168u) {
    ::memset(&sn_, 0, reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&sn_) + sizeof(msgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.messages.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 sn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.Message.sender");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string receiver = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiver().data(), this->receiver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.Message.receiver");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string receiver_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiver_type().data(), this->receiver_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.Message.receiver_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.Request req = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.Response resp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.Notify notify = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.Ack ack = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.messages.Proxy proxy_mesg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proxy_mesg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_data = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_client_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_type().data(), this->sender_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.Message.sender_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender_jid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_jid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_jid().data(), this->sender_jid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.messages.Message.sender_jid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.messages.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.messages.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.messages.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 msgid = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required uint64 sn = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sn(), output);
  }

  // optional string sender = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender(), output);
  }

  // optional string receiver = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.receiver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->receiver(), output);
  }

  // optional string receiver_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver_type().data(), this->receiver_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.receiver_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->receiver_type(), output);
  }

  // optional .qihoo.protocol.messages.Request req = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->req_, output);
  }

  // optional .qihoo.protocol.messages.Response resp = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->resp_, output);
  }

  // optional .qihoo.protocol.messages.Notify notify = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->notify_, output);
  }

  // optional .qihoo.protocol.messages.Ack ack = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->ack_, output);
  }

  // optional .qihoo.protocol.messages.Proxy proxy_mesg = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->proxy_mesg_, output);
  }

  // optional uint64 client_data = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->client_data(), output);
  }

  // optional string sender_type = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_type().data(), this->sender_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.sender_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sender_type(), output);
  }

  // optional string sender_jid = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_jid().data(), this->sender_jid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.sender_jid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sender_jid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.messages.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.messages.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 msgid = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // required uint64 sn = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sn(), target);
  }

  // optional string sender = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender(), target);
  }

  // optional string receiver = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.receiver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->receiver(), target);
  }

  // optional string receiver_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiver_type().data(), this->receiver_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.receiver_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->receiver_type(), target);
  }

  // optional .qihoo.protocol.messages.Request req = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->req_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.Response resp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->resp_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.Notify notify = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->notify_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.Ack ack = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->ack_, deterministic, target);
  }

  // optional .qihoo.protocol.messages.Proxy proxy_mesg = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->proxy_mesg_, deterministic, target);
  }

  // optional uint64 client_data = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->client_data(), target);
  }

  // optional string sender_type = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_type().data(), this->sender_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.sender_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sender_type(), target);
  }

  // optional string sender_jid = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_jid().data(), this->sender_jid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.messages.Message.sender_jid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sender_jid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.messages.Message)
  return target;
}

size_t Message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.messages.Message)
  size_t total_size = 0;

  if (has_sn()) {
    // required uint64 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sn());
  }

  if (has_msgid()) {
    // required uint32 msgid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  return total_size;
}
size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.messages.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001400) ^ 0x00001400) == 0) {  // All required fields are present.
    // required uint64 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sn());

    // required uint32 msgid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string receiver = 4;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver());
    }

    // optional string receiver_type = 5;
    if (has_receiver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver_type());
    }

    // optional string sender_type = 12;
    if (has_sender_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_type());
    }

    // optional string sender_jid = 13;
    if (has_sender_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_jid());
    }

    // optional .qihoo.protocol.messages.Request req = 6;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->req_);
    }

    // optional .qihoo.protocol.messages.Response resp = 7;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resp_);
    }

    // optional .qihoo.protocol.messages.Notify notify = 8;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->notify_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .qihoo.protocol.messages.Ack ack = 9;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ack_);
    }

    // optional .qihoo.protocol.messages.Proxy proxy_mesg = 10;
    if (has_proxy_mesg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->proxy_mesg_);
    }

  }
  // optional uint64 client_data = 11;
  if (has_client_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->client_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.messages.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.messages.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.messages.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.messages.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sender();
      sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_receiver();
      receiver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_receiver_type();
      receiver_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sender_type();
      sender_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_sender_jid();
      sender_jid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_jid_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_req()->::qihoo::protocol::messages::Request::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_resp()->::qihoo::protocol::messages::Response::MergeFrom(from.resp());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_notify()->::qihoo::protocol::messages::Notify::MergeFrom(from.notify());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_ack()->::qihoo::protocol::messages::Ack::MergeFrom(from.ack());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_proxy_mesg()->::qihoo::protocol::messages::Proxy::MergeFrom(from.proxy_mesg());
    }
    if (cached_has_bits & 0x00000400u) {
      sn_ = from.sn_;
    }
    if (cached_has_bits & 0x00000800u) {
      client_data_ = from.client_data_;
    }
    if (cached_has_bits & 0x00001000u) {
      msgid_ = from.msgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.messages.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.messages.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001400) != 0x00001400) return false;
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp_->IsInitialized()) return false;
  }
  if (has_notify()) {
    if (!this->notify_->IsInitialized()) return false;
  }
  if (has_ack()) {
    if (!this->ack_->IsInitialized()) return false;
  }
  if (has_proxy_mesg()) {
    if (!this->proxy_mesg_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  sender_.Swap(&other->sender_);
  receiver_.Swap(&other->receiver_);
  receiver_type_.Swap(&other->receiver_type_);
  sender_type_.Swap(&other->sender_type_);
  sender_jid_.Swap(&other->sender_jid_);
  std::swap(req_, other->req_);
  std::swap(resp_, other->resp_);
  std::swap(notify_, other->notify_);
  std::swap(ack_, other->ack_);
  std::swap(proxy_mesg_, other->proxy_mesg_);
  std::swap(sn_, other->sn_);
  std::swap(client_data_, other->client_data_);
  std::swap(msgid_, other->msgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_CommunicationData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommunicationData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required uint32 msgid = 1;
bool Message::has_msgid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Message::set_has_msgid() {
  _has_bits_[0] |= 0x00001000u;
}
void Message::clear_has_msgid() {
  _has_bits_[0] &= ~0x00001000u;
}
void Message::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 Message::msgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.msgid)
  return msgid_;
}
void Message::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Message.msgid)
}

// required uint64 sn = 2;
bool Message::has_sn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Message::set_has_sn() {
  _has_bits_[0] |= 0x00000400u;
}
void Message::clear_has_sn() {
  _has_bits_[0] &= ~0x00000400u;
}
void Message::clear_sn() {
  sn_ = GOOGLE_ULONGLONG(0);
  clear_has_sn();
}
::google::protobuf::uint64 Message::sn() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.sn)
  return sn_;
}
void Message::set_sn(::google::protobuf::uint64 value) {
  set_has_sn();
  sn_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Message.sn)
}

// optional string sender = 3;
bool Message::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender();
}
const ::std::string& Message::sender() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.sender)
  return sender_.GetNoArena();
}
void Message::set_sender(const ::std::string& value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Message.sender)
}
#if LANG_CXX11
void Message::set_sender(::std::string&& value) {
  set_has_sender();
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Message.sender)
}
#endif
void Message::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Message.sender)
}
void Message::set_sender(const char* value, size_t size) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Message.sender)
}
::std::string* Message::mutable_sender() {
  set_has_sender();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_sender() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.sender)
  clear_has_sender();
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.sender)
}

// optional string receiver = 4;
bool Message::has_receiver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_receiver() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_receiver();
}
const ::std::string& Message::receiver() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.receiver)
  return receiver_.GetNoArena();
}
void Message::set_receiver(const ::std::string& value) {
  set_has_receiver();
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Message.receiver)
}
#if LANG_CXX11
void Message::set_receiver(::std::string&& value) {
  set_has_receiver();
  receiver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Message.receiver)
}
#endif
void Message::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_receiver();
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Message.receiver)
}
void Message::set_receiver(const char* value, size_t size) {
  set_has_receiver();
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Message.receiver)
}
::std::string* Message::mutable_receiver() {
  set_has_receiver();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_receiver() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.receiver)
  clear_has_receiver();
  return receiver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_receiver(::std::string* receiver) {
  if (receiver != NULL) {
    set_has_receiver();
  } else {
    clear_has_receiver();
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.receiver)
}

// optional string receiver_type = 5;
bool Message::has_receiver_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_receiver_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_receiver_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_receiver_type() {
  receiver_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_receiver_type();
}
const ::std::string& Message::receiver_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.receiver_type)
  return receiver_type_.GetNoArena();
}
void Message::set_receiver_type(const ::std::string& value) {
  set_has_receiver_type();
  receiver_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Message.receiver_type)
}
#if LANG_CXX11
void Message::set_receiver_type(::std::string&& value) {
  set_has_receiver_type();
  receiver_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Message.receiver_type)
}
#endif
void Message::set_receiver_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_receiver_type();
  receiver_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Message.receiver_type)
}
void Message::set_receiver_type(const char* value, size_t size) {
  set_has_receiver_type();
  receiver_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Message.receiver_type)
}
::std::string* Message::mutable_receiver_type() {
  set_has_receiver_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.receiver_type)
  return receiver_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_receiver_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.receiver_type)
  clear_has_receiver_type();
  return receiver_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_receiver_type(::std::string* receiver_type) {
  if (receiver_type != NULL) {
    set_has_receiver_type();
  } else {
    clear_has_receiver_type();
  }
  receiver_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.receiver_type)
}

// optional .qihoo.protocol.messages.Request req = 6;
bool Message::has_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Message::set_has_req() {
  _has_bits_[0] |= 0x00000020u;
}
void Message::clear_has_req() {
  _has_bits_[0] &= ~0x00000020u;
}
void Message::clear_req() {
  if (req_ != NULL) req_->::qihoo::protocol::messages::Request::Clear();
  clear_has_req();
}
const ::qihoo::protocol::messages::Request& Message::req() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.req)
  return req_ != NULL ? *req_
                         : *::qihoo::protocol::messages::Request::internal_default_instance();
}
::qihoo::protocol::messages::Request* Message::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    req_ = new ::qihoo::protocol::messages::Request;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.req)
  return req_;
}
::qihoo::protocol::messages::Request* Message::release_req() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.req)
  clear_has_req();
  ::qihoo::protocol::messages::Request* temp = req_;
  req_ = NULL;
  return temp;
}
void Message::set_allocated_req(::qihoo::protocol::messages::Request* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.req)
}

// optional .qihoo.protocol.messages.Response resp = 7;
bool Message::has_resp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Message::set_has_resp() {
  _has_bits_[0] |= 0x00000040u;
}
void Message::clear_has_resp() {
  _has_bits_[0] &= ~0x00000040u;
}
void Message::clear_resp() {
  if (resp_ != NULL) resp_->::qihoo::protocol::messages::Response::Clear();
  clear_has_resp();
}
const ::qihoo::protocol::messages::Response& Message::resp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.resp)
  return resp_ != NULL ? *resp_
                         : *::qihoo::protocol::messages::Response::internal_default_instance();
}
::qihoo::protocol::messages::Response* Message::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) {
    resp_ = new ::qihoo::protocol::messages::Response;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.resp)
  return resp_;
}
::qihoo::protocol::messages::Response* Message::release_resp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.resp)
  clear_has_resp();
  ::qihoo::protocol::messages::Response* temp = resp_;
  resp_ = NULL;
  return temp;
}
void Message::set_allocated_resp(::qihoo::protocol::messages::Response* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.resp)
}

// optional .qihoo.protocol.messages.Notify notify = 8;
bool Message::has_notify() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Message::set_has_notify() {
  _has_bits_[0] |= 0x00000080u;
}
void Message::clear_has_notify() {
  _has_bits_[0] &= ~0x00000080u;
}
void Message::clear_notify() {
  if (notify_ != NULL) notify_->::qihoo::protocol::messages::Notify::Clear();
  clear_has_notify();
}
const ::qihoo::protocol::messages::Notify& Message::notify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.notify)
  return notify_ != NULL ? *notify_
                         : *::qihoo::protocol::messages::Notify::internal_default_instance();
}
::qihoo::protocol::messages::Notify* Message::mutable_notify() {
  set_has_notify();
  if (notify_ == NULL) {
    notify_ = new ::qihoo::protocol::messages::Notify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.notify)
  return notify_;
}
::qihoo::protocol::messages::Notify* Message::release_notify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.notify)
  clear_has_notify();
  ::qihoo::protocol::messages::Notify* temp = notify_;
  notify_ = NULL;
  return temp;
}
void Message::set_allocated_notify(::qihoo::protocol::messages::Notify* notify) {
  delete notify_;
  notify_ = notify;
  if (notify) {
    set_has_notify();
  } else {
    clear_has_notify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.notify)
}

// optional .qihoo.protocol.messages.Ack ack = 9;
bool Message::has_ack() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Message::set_has_ack() {
  _has_bits_[0] |= 0x00000100u;
}
void Message::clear_has_ack() {
  _has_bits_[0] &= ~0x00000100u;
}
void Message::clear_ack() {
  if (ack_ != NULL) ack_->::qihoo::protocol::messages::Ack::Clear();
  clear_has_ack();
}
const ::qihoo::protocol::messages::Ack& Message::ack() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.ack)
  return ack_ != NULL ? *ack_
                         : *::qihoo::protocol::messages::Ack::internal_default_instance();
}
::qihoo::protocol::messages::Ack* Message::mutable_ack() {
  set_has_ack();
  if (ack_ == NULL) {
    ack_ = new ::qihoo::protocol::messages::Ack;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.ack)
  return ack_;
}
::qihoo::protocol::messages::Ack* Message::release_ack() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.ack)
  clear_has_ack();
  ::qihoo::protocol::messages::Ack* temp = ack_;
  ack_ = NULL;
  return temp;
}
void Message::set_allocated_ack(::qihoo::protocol::messages::Ack* ack) {
  delete ack_;
  ack_ = ack;
  if (ack) {
    set_has_ack();
  } else {
    clear_has_ack();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.ack)
}

// optional .qihoo.protocol.messages.Proxy proxy_mesg = 10;
bool Message::has_proxy_mesg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Message::set_has_proxy_mesg() {
  _has_bits_[0] |= 0x00000200u;
}
void Message::clear_has_proxy_mesg() {
  _has_bits_[0] &= ~0x00000200u;
}
void Message::clear_proxy_mesg() {
  if (proxy_mesg_ != NULL) proxy_mesg_->::qihoo::protocol::messages::Proxy::Clear();
  clear_has_proxy_mesg();
}
const ::qihoo::protocol::messages::Proxy& Message::proxy_mesg() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.proxy_mesg)
  return proxy_mesg_ != NULL ? *proxy_mesg_
                         : *::qihoo::protocol::messages::Proxy::internal_default_instance();
}
::qihoo::protocol::messages::Proxy* Message::mutable_proxy_mesg() {
  set_has_proxy_mesg();
  if (proxy_mesg_ == NULL) {
    proxy_mesg_ = new ::qihoo::protocol::messages::Proxy;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.proxy_mesg)
  return proxy_mesg_;
}
::qihoo::protocol::messages::Proxy* Message::release_proxy_mesg() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.proxy_mesg)
  clear_has_proxy_mesg();
  ::qihoo::protocol::messages::Proxy* temp = proxy_mesg_;
  proxy_mesg_ = NULL;
  return temp;
}
void Message::set_allocated_proxy_mesg(::qihoo::protocol::messages::Proxy* proxy_mesg) {
  delete proxy_mesg_;
  proxy_mesg_ = proxy_mesg;
  if (proxy_mesg) {
    set_has_proxy_mesg();
  } else {
    clear_has_proxy_mesg();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.proxy_mesg)
}

// optional uint64 client_data = 11;
bool Message::has_client_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Message::set_has_client_data() {
  _has_bits_[0] |= 0x00000800u;
}
void Message::clear_has_client_data() {
  _has_bits_[0] &= ~0x00000800u;
}
void Message::clear_client_data() {
  client_data_ = GOOGLE_ULONGLONG(0);
  clear_has_client_data();
}
::google::protobuf::uint64 Message::client_data() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.client_data)
  return client_data_;
}
void Message::set_client_data(::google::protobuf::uint64 value) {
  set_has_client_data();
  client_data_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Message.client_data)
}

// optional string sender_type = 12;
bool Message::has_sender_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message::set_has_sender_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Message::clear_has_sender_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_sender_type() {
  sender_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_type();
}
const ::std::string& Message::sender_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.sender_type)
  return sender_type_.GetNoArena();
}
void Message::set_sender_type(const ::std::string& value) {
  set_has_sender_type();
  sender_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Message.sender_type)
}
#if LANG_CXX11
void Message::set_sender_type(::std::string&& value) {
  set_has_sender_type();
  sender_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Message.sender_type)
}
#endif
void Message::set_sender_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_type();
  sender_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Message.sender_type)
}
void Message::set_sender_type(const char* value, size_t size) {
  set_has_sender_type();
  sender_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Message.sender_type)
}
::std::string* Message::mutable_sender_type() {
  set_has_sender_type();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.sender_type)
  return sender_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_sender_type() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.sender_type)
  clear_has_sender_type();
  return sender_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_sender_type(::std::string* sender_type) {
  if (sender_type != NULL) {
    set_has_sender_type();
  } else {
    clear_has_sender_type();
  }
  sender_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_type);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.sender_type)
}

// optional string sender_jid = 13;
bool Message::has_sender_jid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Message::set_has_sender_jid() {
  _has_bits_[0] |= 0x00000010u;
}
void Message::clear_has_sender_jid() {
  _has_bits_[0] &= ~0x00000010u;
}
void Message::clear_sender_jid() {
  sender_jid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_jid();
}
const ::std::string& Message::sender_jid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.messages.Message.sender_jid)
  return sender_jid_.GetNoArena();
}
void Message::set_sender_jid(const ::std::string& value) {
  set_has_sender_jid();
  sender_jid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.messages.Message.sender_jid)
}
#if LANG_CXX11
void Message::set_sender_jid(::std::string&& value) {
  set_has_sender_jid();
  sender_jid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.messages.Message.sender_jid)
}
#endif
void Message::set_sender_jid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_jid();
  sender_jid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.messages.Message.sender_jid)
}
void Message::set_sender_jid(const char* value, size_t size) {
  set_has_sender_jid();
  sender_jid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.messages.Message.sender_jid)
}
::std::string* Message::mutable_sender_jid() {
  set_has_sender_jid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.messages.Message.sender_jid)
  return sender_jid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_sender_jid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.messages.Message.sender_jid)
  clear_has_sender_jid();
  return sender_jid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_sender_jid(::std::string* sender_jid) {
  if (sender_jid != NULL) {
    set_has_sender_jid();
  } else {
    clear_has_sender_jid();
  }
  sender_jid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_jid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.messages.Message.sender_jid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace protocol
}  // namespace qihoo

// @@protoc_insertion_point(global_scope)
