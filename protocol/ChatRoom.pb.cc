// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRoom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatRoom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qihoo {
namespace protocol {
namespace chatroom {
class CRPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CRPair> {
} _CRPair_default_instance_;
class CRUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CRUser> {
} _CRUser_default_instance_;
class ChatRoomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoom> {
} _ChatRoom_default_instance_;
class CreateChatRoomRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateChatRoomRequest> {
} _CreateChatRoomRequest_default_instance_;
class CreateChatRoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateChatRoomResponse> {
} _CreateChatRoomResponse_default_instance_;
class CreateMultiChatRoomRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateMultiChatRoomRequest> {
} _CreateMultiChatRoomRequest_default_instance_;
class CreateMultiChatRoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateMultiChatRoomResponse> {
} _CreateMultiChatRoomResponse_default_instance_;
class GetChatRoomDetailRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomDetailRequest> {
} _GetChatRoomDetailRequest_default_instance_;
class GetChatRoomDetailResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetChatRoomDetailResponse> {
} _GetChatRoomDetailResponse_default_instance_;
class ApplyJoinChatRoomRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ApplyJoinChatRoomRequest> {
} _ApplyJoinChatRoomRequest_default_instance_;
class ApplyJoinChatRoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ApplyJoinChatRoomResponse> {
} _ApplyJoinChatRoomResponse_default_instance_;
class QuitChatRoomRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitChatRoomRequest> {
} _QuitChatRoomRequest_default_instance_;
class QuitChatRoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitChatRoomResponse> {
} _QuitChatRoomResponse_default_instance_;
class QueryAllGameRoomRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryAllGameRoomRequest> {
} _QueryAllGameRoomRequest_default_instance_;
class QueryAllGameRoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryAllGameRoomResponse> {
} _QueryAllGameRoomResponse_default_instance_;
class QueryChatRoomIDRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryChatRoomIDRequest> {
} _QueryChatRoomIDRequest_default_instance_;
class QueryChatRoomIDResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryChatRoomIDResponse> {
} _QueryChatRoomIDResponse_default_instance_;
class UpdateRoomIDRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateRoomIDRequest> {
} _UpdateRoomIDRequest_default_instance_;
class UpdateRoomIDResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateRoomIDResponse> {
} _UpdateRoomIDResponse_default_instance_;
class UpdateChatRoomRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateChatRoomRequest> {
} _UpdateChatRoomRequest_default_instance_;
class UpdateChatRoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateChatRoomResponse> {
} _UpdateChatRoomResponse_default_instance_;
class KickChatRoomMemberRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KickChatRoomMemberRequest> {
} _KickChatRoomMemberRequest_default_instance_;
class KickChatRoomMemberResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KickChatRoomMemberResponse> {
} _KickChatRoomMemberResponse_default_instance_;
class SyncRoomToDBRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncRoomToDBRequest> {
} _SyncRoomToDBRequest_default_instance_;
class CreateChatRoomNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateChatRoomNotify> {
} _CreateChatRoomNotify_default_instance_;
class MemberJoinChatRoomNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberJoinChatRoomNotify> {
} _MemberJoinChatRoomNotify_default_instance_;
class MemberQuitChatRoomNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberQuitChatRoomNotify> {
} _MemberQuitChatRoomNotify_default_instance_;
class KickMemberNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KickMemberNotify> {
} _KickMemberNotify_default_instance_;
class UpdateChatRoomNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateChatRoomNotify> {
} _UpdateChatRoomNotify_default_instance_;
class ChatRoomMessageRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomMessageRequest> {
} _ChatRoomMessageRequest_default_instance_;
class ChatRoomMessageResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomMessageResponse> {
} _ChatRoomMessageResponse_default_instance_;
class ChatRoomNewMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomNewMsg> {
} _ChatRoomNewMsg_default_instance_;
class ChatRoomErrorMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomErrorMsg> {
} _ChatRoomErrorMsg_default_instance_;
class ChatRoomMNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomMNotify> {
} _ChatRoomMNotify_default_instance_;
class SubscribeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SubscribeRequest> {
} _SubscribeRequest_default_instance_;
class SubscribeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SubscribeResponse> {
} _SubscribeResponse_default_instance_;
class ChatRoomUpToServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomUpToServer> {
} _ChatRoomUpToServer_default_instance_;
class ChatRoomDownToUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomDownToUser> {
} _ChatRoomDownToUser_default_instance_;
class ChatRoomPacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomPacket> {
} _ChatRoomPacket_default_instance_;

namespace protobuf_ChatRoom_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[39];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPair, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, publicsetting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, privatesetting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRUser, userdata_),
  0,
  1,
  ~0u,
  ~0u,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, creater_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, maxmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, memcountlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, roomtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, blacklist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, tempmembers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoom, partnerdata_),
  0,
  5,
  1,
  6,
  7,
  8,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, roomname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, memcountlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, roomtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, creater_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomRequest, properties_),
  0,
  1,
  4,
  2,
  ~0u,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomResponse, room_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomRequest, rooms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomRequest, creater_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomResponse, rooms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMultiChatRoomResponse, creater_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailRequest, offset_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatRoomDetailResponse, room_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, userid_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, userdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomRequest, no_userlist_),
  0,
  2,
  3,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomResponse, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinChatRoomResponse, pull_lost_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomRequest, room_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitChatRoomResponse, room_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAllGameRoomResponse, maplist_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDRequest, gameid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDResponse, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRoomIDResponse, gameid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDRequest, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDRequest, roomid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoomIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomRequest, room_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomResponse, room_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberRequest, room_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatRoomMemberResponse, room_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomToDBRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomToDBRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomToDBRequest, roomid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoomNotify, room_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberJoinChatRoomNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberJoinChatRoomNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberJoinChatRoomNotify, room_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberQuitChatRoomNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberQuitChatRoomNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberQuitChatRoomNotify, room_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberNotify, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickMemberNotify, user_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomNotify, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChatRoomNotify, user_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, msgcontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, clientparameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, clientcache_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, createnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, joinnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, quitnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, kicknotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, updatenotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageRequest, propertylist_),
  4,
  0,
  10,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMessageResponse, msgid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, msgcontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, regmemcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, memcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, maxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomNewMsg, timestamp_),
  0,
  2,
  3,
  1,
  4,
  5,
  6,
  8,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, clientsn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomErrorMsg, errorcode_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, regmemcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMNotify, memcount_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, sub_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, sub_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, payloadtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, createchatroomreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, getchatroominforeq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, applyjoinchatroomreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, quitchatroomreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, updatechatroomreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, kickmemberreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, querychatroomidreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, updategameidreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, queryallgameroomreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, chatroommessagereq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, createrooms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, syncroomtodba_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomUpToServer, subreq_),
  13,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, payloadtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, createchatroomresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, getchatroominforesp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, applyjoinchatroomresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, quitchatroomresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, updatechatroomresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, kickmemberresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, querychatroomidresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, updategameidresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, queryallgameroomresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, chatroommessageresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, newmsgnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, errormsgnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, createrooms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, memberjoinnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, memberquitnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, subresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDownToUser, multinotify_),
  17,
  18,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, to_server_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, to_user_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, client_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomPacket, appid_),
  0,
  2,
  3,
  1,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CRPair)},
  { 9, 20, sizeof(CRUser)},
  { 26, 44, sizeof(ChatRoom)},
  { 57, 69, sizeof(CreateChatRoomRequest)},
  { 76, 82, sizeof(CreateChatRoomResponse)},
  { 83, 90, sizeof(CreateMultiChatRoomRequest)},
  { 92, 99, sizeof(CreateMultiChatRoomResponse)},
  { 101, 109, sizeof(GetChatRoomDetailRequest)},
  { 112, 118, sizeof(GetChatRoomDetailResponse)},
  { 119, 129, sizeof(ApplyJoinChatRoomRequest)},
  { 134, 141, sizeof(ApplyJoinChatRoomResponse)},
  { 143, 150, sizeof(QuitChatRoomRequest)},
  { 152, 158, sizeof(QuitChatRoomResponse)},
  { 159, 164, sizeof(QueryAllGameRoomRequest)},
  { 164, 170, sizeof(QueryAllGameRoomResponse)},
  { 171, 177, sizeof(QueryChatRoomIDRequest)},
  { 178, 185, sizeof(QueryChatRoomIDResponse)},
  { 187, 194, sizeof(UpdateRoomIDRequest)},
  { 196, 201, sizeof(UpdateRoomIDResponse)},
  { 201, 208, sizeof(UpdateChatRoomRequest)},
  { 210, 216, sizeof(UpdateChatRoomResponse)},
  { 217, 225, sizeof(KickChatRoomMemberRequest)},
  { 228, 234, sizeof(KickChatRoomMemberResponse)},
  { 235, 241, sizeof(SyncRoomToDBRequest)},
  { 242, 248, sizeof(CreateChatRoomNotify)},
  { 249, 255, sizeof(MemberJoinChatRoomNotify)},
  { 256, 262, sizeof(MemberQuitChatRoomNotify)},
  { 263, 270, sizeof(KickMemberNotify)},
  { 272, 279, sizeof(UpdateChatRoomNotify)},
  { 281, 298, sizeof(ChatRoomMessageRequest)},
  { 310, 316, sizeof(ChatRoomMessageResponse)},
  { 317, 331, sizeof(ChatRoomNewMsg)},
  { 340, 348, sizeof(ChatRoomErrorMsg)},
  { 351, 360, sizeof(ChatRoomMNotify)},
  { 364, 371, sizeof(SubscribeRequest)},
  { 373, 380, sizeof(SubscribeResponse)},
  { 382, 401, sizeof(ChatRoomUpToServer)},
  { 415, 440, sizeof(ChatRoomDownToUser)},
  { 460, 471, sizeof(ChatRoomPacket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CRPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CRUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateChatRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateChatRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateMultiChatRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateMultiChatRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomDetailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetChatRoomDetailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ApplyJoinChatRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ApplyJoinChatRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitChatRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitChatRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryAllGameRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryAllGameRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryChatRoomIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryChatRoomIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateRoomIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateRoomIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateChatRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateChatRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KickChatRoomMemberRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KickChatRoomMemberResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncRoomToDBRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateChatRoomNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberJoinChatRoomNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberQuitChatRoomNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KickMemberNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateChatRoomNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomNewMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomErrorMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomMNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubscribeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomUpToServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomDownToUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomPacket_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ChatRoom.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 39);
}

}  // namespace

void TableStruct::Shutdown() {
  _CRPair_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CRUser_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ChatRoom_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CreateChatRoomRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CreateChatRoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CreateMultiChatRoomRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CreateMultiChatRoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GetChatRoomDetailRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GetChatRoomDetailResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ApplyJoinChatRoomRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ApplyJoinChatRoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _QuitChatRoomRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _QuitChatRoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _QueryAllGameRoomRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _QueryAllGameRoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _QueryChatRoomIDRequest_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _QueryChatRoomIDResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _UpdateRoomIDRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _UpdateRoomIDResponse_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _UpdateChatRoomRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _UpdateChatRoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _KickChatRoomMemberRequest_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _KickChatRoomMemberResponse_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SyncRoomToDBRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CreateChatRoomNotify_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _MemberJoinChatRoomNotify_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _MemberQuitChatRoomNotify_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _KickMemberNotify_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _UpdateChatRoomNotify_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _ChatRoomMessageRequest_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ChatRoomMessageResponse_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _ChatRoomNewMsg_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _ChatRoomErrorMsg_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _ChatRoomMNotify_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _SubscribeRequest_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _SubscribeResponse_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _ChatRoomUpToServer_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _ChatRoomDownToUser_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _ChatRoomPacket_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CRPair_default_instance_.DefaultConstruct();
  _CRUser_default_instance_.DefaultConstruct();
  _ChatRoom_default_instance_.DefaultConstruct();
  _CreateChatRoomRequest_default_instance_.DefaultConstruct();
  _CreateChatRoomResponse_default_instance_.DefaultConstruct();
  _CreateMultiChatRoomRequest_default_instance_.DefaultConstruct();
  _CreateMultiChatRoomResponse_default_instance_.DefaultConstruct();
  _GetChatRoomDetailRequest_default_instance_.DefaultConstruct();
  _GetChatRoomDetailResponse_default_instance_.DefaultConstruct();
  _ApplyJoinChatRoomRequest_default_instance_.DefaultConstruct();
  _ApplyJoinChatRoomResponse_default_instance_.DefaultConstruct();
  _QuitChatRoomRequest_default_instance_.DefaultConstruct();
  _QuitChatRoomResponse_default_instance_.DefaultConstruct();
  _QueryAllGameRoomRequest_default_instance_.DefaultConstruct();
  _QueryAllGameRoomResponse_default_instance_.DefaultConstruct();
  _QueryChatRoomIDRequest_default_instance_.DefaultConstruct();
  _QueryChatRoomIDResponse_default_instance_.DefaultConstruct();
  _UpdateRoomIDRequest_default_instance_.DefaultConstruct();
  _UpdateRoomIDResponse_default_instance_.DefaultConstruct();
  _UpdateChatRoomRequest_default_instance_.DefaultConstruct();
  _UpdateChatRoomResponse_default_instance_.DefaultConstruct();
  _KickChatRoomMemberRequest_default_instance_.DefaultConstruct();
  _KickChatRoomMemberResponse_default_instance_.DefaultConstruct();
  _SyncRoomToDBRequest_default_instance_.DefaultConstruct();
  _CreateChatRoomNotify_default_instance_.DefaultConstruct();
  _MemberJoinChatRoomNotify_default_instance_.DefaultConstruct();
  _MemberQuitChatRoomNotify_default_instance_.DefaultConstruct();
  _KickMemberNotify_default_instance_.DefaultConstruct();
  _UpdateChatRoomNotify_default_instance_.DefaultConstruct();
  _ChatRoomMessageRequest_default_instance_.DefaultConstruct();
  _ChatRoomMessageResponse_default_instance_.DefaultConstruct();
  _ChatRoomNewMsg_default_instance_.DefaultConstruct();
  _ChatRoomErrorMsg_default_instance_.DefaultConstruct();
  _ChatRoomMNotify_default_instance_.DefaultConstruct();
  _SubscribeRequest_default_instance_.DefaultConstruct();
  _SubscribeResponse_default_instance_.DefaultConstruct();
  _ChatRoomUpToServer_default_instance_.DefaultConstruct();
  _ChatRoomDownToUser_default_instance_.DefaultConstruct();
  _ChatRoomPacket_default_instance_.DefaultConstruct();
  _ChatRoom_default_instance_.get_mutable()->creater_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(
      ::qihoo::protocol::chatroom::CRUser::internal_default_instance());
  _CreateChatRoomRequest_default_instance_.get_mutable()->creater_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(
      ::qihoo::protocol::chatroom::CRUser::internal_default_instance());
  _CreateChatRoomResponse_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _CreateMultiChatRoomRequest_default_instance_.get_mutable()->creater_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(
      ::qihoo::protocol::chatroom::CRUser::internal_default_instance());
  _CreateMultiChatRoomResponse_default_instance_.get_mutable()->creater_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(
      ::qihoo::protocol::chatroom::CRUser::internal_default_instance());
  _GetChatRoomDetailResponse_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _ApplyJoinChatRoomRequest_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _ApplyJoinChatRoomResponse_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _QuitChatRoomRequest_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _QuitChatRoomResponse_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _UpdateChatRoomRequest_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _UpdateChatRoomResponse_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _KickChatRoomMemberRequest_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _KickChatRoomMemberResponse_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _CreateChatRoomNotify_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _MemberJoinChatRoomNotify_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _MemberQuitChatRoomNotify_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _KickMemberNotify_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _KickMemberNotify_default_instance_.get_mutable()->user_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(
      ::qihoo::protocol::chatroom::CRUser::internal_default_instance());
  _UpdateChatRoomNotify_default_instance_.get_mutable()->room_ = const_cast< ::qihoo::protocol::chatroom::ChatRoom*>(
      ::qihoo::protocol::chatroom::ChatRoom::internal_default_instance());
  _UpdateChatRoomNotify_default_instance_.get_mutable()->user_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(
      ::qihoo::protocol::chatroom::CRUser::internal_default_instance());
  _ChatRoomMessageRequest_default_instance_.get_mutable()->sender_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(
      ::qihoo::protocol::chatroom::CRUser::internal_default_instance());
  _ChatRoomMessageRequest_default_instance_.get_mutable()->createnotify_ = const_cast< ::qihoo::protocol::chatroom::CreateChatRoomNotify*>(
      ::qihoo::protocol::chatroom::CreateChatRoomNotify::internal_default_instance());
  _ChatRoomMessageRequest_default_instance_.get_mutable()->joinnotify_ = const_cast< ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify*>(
      ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::internal_default_instance());
  _ChatRoomMessageRequest_default_instance_.get_mutable()->quitnotify_ = const_cast< ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify*>(
      ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::internal_default_instance());
  _ChatRoomMessageRequest_default_instance_.get_mutable()->kicknotify_ = const_cast< ::qihoo::protocol::chatroom::KickMemberNotify*>(
      ::qihoo::protocol::chatroom::KickMemberNotify::internal_default_instance());
  _ChatRoomMessageRequest_default_instance_.get_mutable()->updatenotify_ = const_cast< ::qihoo::protocol::chatroom::UpdateChatRoomNotify*>(
      ::qihoo::protocol::chatroom::UpdateChatRoomNotify::internal_default_instance());
  _ChatRoomNewMsg_default_instance_.get_mutable()->sender_ = const_cast< ::qihoo::protocol::chatroom::CRUser*>(
      ::qihoo::protocol::chatroom::CRUser::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->createchatroomreq_ = const_cast< ::qihoo::protocol::chatroom::CreateChatRoomRequest*>(
      ::qihoo::protocol::chatroom::CreateChatRoomRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->getchatroominforeq_ = const_cast< ::qihoo::protocol::chatroom::GetChatRoomDetailRequest*>(
      ::qihoo::protocol::chatroom::GetChatRoomDetailRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->applyjoinchatroomreq_ = const_cast< ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest*>(
      ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->quitchatroomreq_ = const_cast< ::qihoo::protocol::chatroom::QuitChatRoomRequest*>(
      ::qihoo::protocol::chatroom::QuitChatRoomRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->updatechatroomreq_ = const_cast< ::qihoo::protocol::chatroom::UpdateChatRoomRequest*>(
      ::qihoo::protocol::chatroom::UpdateChatRoomRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->kickmemberreq_ = const_cast< ::qihoo::protocol::chatroom::KickChatRoomMemberRequest*>(
      ::qihoo::protocol::chatroom::KickChatRoomMemberRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->querychatroomidreq_ = const_cast< ::qihoo::protocol::chatroom::QueryChatRoomIDRequest*>(
      ::qihoo::protocol::chatroom::QueryChatRoomIDRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->updategameidreq_ = const_cast< ::qihoo::protocol::chatroom::UpdateRoomIDRequest*>(
      ::qihoo::protocol::chatroom::UpdateRoomIDRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->queryallgameroomreq_ = const_cast< ::qihoo::protocol::chatroom::QueryAllGameRoomRequest*>(
      ::qihoo::protocol::chatroom::QueryAllGameRoomRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->chatroommessagereq_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomMessageRequest*>(
      ::qihoo::protocol::chatroom::ChatRoomMessageRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->createrooms_ = const_cast< ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest*>(
      ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->syncroomtodba_ = const_cast< ::qihoo::protocol::chatroom::SyncRoomToDBRequest*>(
      ::qihoo::protocol::chatroom::SyncRoomToDBRequest::internal_default_instance());
  _ChatRoomUpToServer_default_instance_.get_mutable()->subreq_ = const_cast< ::qihoo::protocol::chatroom::SubscribeRequest*>(
      ::qihoo::protocol::chatroom::SubscribeRequest::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->createchatroomresp_ = const_cast< ::qihoo::protocol::chatroom::CreateChatRoomResponse*>(
      ::qihoo::protocol::chatroom::CreateChatRoomResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->getchatroominforesp_ = const_cast< ::qihoo::protocol::chatroom::GetChatRoomDetailResponse*>(
      ::qihoo::protocol::chatroom::GetChatRoomDetailResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->applyjoinchatroomresp_ = const_cast< ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse*>(
      ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->quitchatroomresp_ = const_cast< ::qihoo::protocol::chatroom::QuitChatRoomResponse*>(
      ::qihoo::protocol::chatroom::QuitChatRoomResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->updatechatroomresp_ = const_cast< ::qihoo::protocol::chatroom::UpdateChatRoomResponse*>(
      ::qihoo::protocol::chatroom::UpdateChatRoomResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->kickmemberresp_ = const_cast< ::qihoo::protocol::chatroom::KickChatRoomMemberResponse*>(
      ::qihoo::protocol::chatroom::KickChatRoomMemberResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->querychatroomidresp_ = const_cast< ::qihoo::protocol::chatroom::QueryChatRoomIDResponse*>(
      ::qihoo::protocol::chatroom::QueryChatRoomIDResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->updategameidresp_ = const_cast< ::qihoo::protocol::chatroom::UpdateRoomIDResponse*>(
      ::qihoo::protocol::chatroom::UpdateRoomIDResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->queryallgameroomresp_ = const_cast< ::qihoo::protocol::chatroom::QueryAllGameRoomResponse*>(
      ::qihoo::protocol::chatroom::QueryAllGameRoomResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->chatroommessageresp_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomMessageResponse*>(
      ::qihoo::protocol::chatroom::ChatRoomMessageResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->newmsgnotify_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomNewMsg*>(
      ::qihoo::protocol::chatroom::ChatRoomNewMsg::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->errormsgnotify_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomErrorMsg*>(
      ::qihoo::protocol::chatroom::ChatRoomErrorMsg::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->createrooms_ = const_cast< ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse*>(
      ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->memberjoinnotify_ = const_cast< ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify*>(
      ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->memberquitnotify_ = const_cast< ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify*>(
      ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::internal_default_instance());
  _ChatRoomDownToUser_default_instance_.get_mutable()->subresp_ = const_cast< ::qihoo::protocol::chatroom::SubscribeResponse*>(
      ::qihoo::protocol::chatroom::SubscribeResponse::internal_default_instance());
  _ChatRoomPacket_default_instance_.get_mutable()->to_server_data_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomUpToServer*>(
      ::qihoo::protocol::chatroom::ChatRoomUpToServer::internal_default_instance());
  _ChatRoomPacket_default_instance_.get_mutable()->to_user_data_ = const_cast< ::qihoo::protocol::chatroom::ChatRoomDownToUser*>(
      ::qihoo::protocol::chatroom::ChatRoomDownToUser::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016ChatRoom.proto\022\027qihoo.protocol.chatroo"
      "m\"$\n\006CRPair\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \001(\014\""
      "\271\001\n\006CRUser\022\016\n\006userid\030\001 \001(\014\022\014\n\004name\030\002 \001(\t"
      "\0226\n\rpublicsetting\030\003 \003(\0132\037.qihoo.protocol"
      ".chatroom.CRPair\0227\n\016privatesetting\030\004 \003(\013"
      "2\037.qihoo.protocol.chatroom.CRPair\022\016\n\006sta"
      "tus\030\005 \001(\005\022\020\n\010userdata\030\006 \001(\014\"\373\002\n\010ChatRoom"
      "\022\016\n\006roomid\030\001 \002(\014\0220\n\007creater\030\002 \001(\0132\037.qiho"
      "o.protocol.chatroom.CRUser\022\014\n\004name\030\003 \001(\t"
      "\022\017\n\007version\030\004 \001(\004\022\020\n\010maxmsgid\030\005 \001(\004\022\025\n\rm"
      "emcountlimit\030\006 \001(\004\022\020\n\010roomtype\030\007 \001(\t\0223\n\n"
      "properties\030\010 \003(\0132\037.qihoo.protocol.chatro"
      "om.CRPair\0220\n\007members\030\t \003(\0132\037.qihoo.proto"
      "col.chatroom.CRUser\022\021\n\tblacklist\030\n \003(\014\022\016"
      "\n\006gameid\030\013 \001(\t\0224\n\013tempmembers\030\014 \003(\0132\037.qi"
      "hoo.protocol.chatroom.CRUser\022\023\n\013partnerd"
      "ata\030\r \001(\014\"\373\001\n\025CreateChatRoomRequest\022\016\n\006g"
      "ameid\030\001 \001(\t\022\020\n\010roomname\030\002 \001(\t\022\025\n\rmemcoun"
      "tlimit\030\003 \001(\004\022\020\n\010roomtype\030\004 \001(\t\0220\n\007member"
      "s\030\005 \003(\0132\037.qihoo.protocol.chatroom.CRUser"
      "\0220\n\007creater\030\006 \001(\0132\037.qihoo.protocol.chatr"
      "oom.CRUser\0223\n\nproperties\030\007 \003(\0132\037.qihoo.p"
      "rotocol.chatroom.CRPair\"I\n\026CreateChatRoo"
      "mResponse\022/\n\004room\030\001 \001(\0132!.qihoo.protocol"
      ".chatroom.ChatRoom\"\215\001\n\032CreateMultiChatRo"
      "omRequest\022=\n\005rooms\030\001 \003(\0132..qihoo.protoco"
      "l.chatroom.CreateChatRoomRequest\0220\n\007crea"
      "ter\030\002 \001(\0132\037.qihoo.protocol.chatroom.CRUs"
      "er\"\201\001\n\033CreateMultiChatRoomResponse\0220\n\005ro"
      "oms\030\001 \003(\0132!.qihoo.protocol.chatroom.Chat"
      "Room\0220\n\007creater\030\002 \001(\0132\037.qihoo.protocol.c"
      "hatroom.CRUser\"I\n\030GetChatRoomDetailReque"
      "st\022\016\n\006roomid\030\001 \002(\014\022\r\n\005index\030\002 \001(\005\022\016\n\006off"
      "set\030\003 \001(\005\"L\n\031GetChatRoomDetailResponse\022/"
      "\n\004room\030\001 \001(\0132!.qihoo.protocol.chatroom.C"
      "hatRoom\"\236\001\n\030ApplyJoinChatRoomRequest\022\016\n\006"
      "roomid\030\001 \002(\014\022/\n\004room\030\002 \001(\0132!.qihoo.proto"
      "col.chatroom.ChatRoom\022\023\n\013userid_type\030\003 \001"
      "(\005\022\020\n\010userdata\030\004 \001(\014\022\032\n\013no_userlist\030\005 \001("
      "\010:\005false\"e\n\031ApplyJoinChatRoomResponse\022/\n"
      "\004room\030\001 \001(\0132!.qihoo.protocol.chatroom.Ch"
      "atRoom\022\027\n\tpull_lost\030\002 \001(\010:\004true\"V\n\023QuitC"
      "hatRoomRequest\022\016\n\006roomid\030\001 \002(\014\022/\n\004room\030\002"
      " \001(\0132!.qihoo.protocol.chatroom.ChatRoom\""
      "G\n\024QuitChatRoomResponse\022/\n\004room\030\001 \001(\0132!."
      "qihoo.protocol.chatroom.ChatRoom\"\031\n\027Quer"
      "yAllGameRoomRequest\"L\n\030QueryAllGameRoomR"
      "esponse\0220\n\007maplist\030\001 \003(\0132\037.qihoo.protoco"
      "l.chatroom.CRPair\"(\n\026QueryChatRoomIDRequ"
      "est\022\016\n\006gameid\030\001 \002(\t\"9\n\027QueryChatRoomIDRe"
      "sponse\022\016\n\006roomid\030\001 \001(\014\022\016\n\006gameid\030\002 \001(\t\"5"
      "\n\023UpdateRoomIDRequest\022\016\n\006gameid\030\001 \002(\t\022\016\n"
      "\006roomid\030\002 \002(\014\"\026\n\024UpdateRoomIDResponse\"X\n"
      "\025UpdateChatRoomRequest\022\016\n\006roomid\030\001 \002(\014\022/"
      "\n\004room\030\002 \002(\0132!.qihoo.protocol.chatroom.C"
      "hatRoom\"I\n\026UpdateChatRoomResponse\022/\n\004roo"
      "m\030\001 \001(\0132!.qihoo.protocol.chatroom.ChatRo"
      "om\"\216\001\n\031KickChatRoomMemberRequest\022\016\n\006room"
      "id\030\001 \002(\014\0220\n\007members\030\002 \003(\0132\037.qihoo.protoc"
      "ol.chatroom.CRUser\022/\n\004room\030\003 \001(\0132!.qihoo"
      ".protocol.chatroom.ChatRoom\"M\n\032KickChatR"
      "oomMemberResponse\022/\n\004room\030\001 \001(\0132!.qihoo."
      "protocol.chatroom.ChatRoom\"%\n\023SyncRoomTo"
      "DBRequest\022\016\n\006roomid\030\001 \002(\014\"G\n\024CreateChatR"
      "oomNotify\022/\n\004room\030\001 \002(\0132!.qihoo.protocol"
      ".chatroom.ChatRoom\"K\n\030MemberJoinChatRoom"
      "Notify\022/\n\004room\030\001 \002(\0132!.qihoo.protocol.ch"
      "atroom.ChatRoom\"K\n\030MemberQuitChatRoomNot"
      "ify\022/\n\004room\030\001 \002(\0132!.qihoo.protocol.chatr"
      "oom.ChatRoom\"r\n\020KickMemberNotify\022/\n\004room"
      "\030\001 \002(\0132!.qihoo.protocol.chatroom.ChatRoo"
      "m\022-\n\004user\030\002 \001(\0132\037.qihoo.protocol.chatroo"
      "m.CRUser\"v\n\024UpdateChatRoomNotify\022/\n\004room"
      "\030\001 \002(\0132!.qihoo.protocol.chatroom.ChatRoo"
      "m\022-\n\004user\030\002 \001(\0132\037.qihoo.protocol.chatroo"
      "m.CRUser\"\272\004\n\026ChatRoomMessageRequest\022/\n\006s"
      "ender\030\001 \001(\0132\037.qihoo.protocol.chatroom.CR"
      "User\022\016\n\006roomid\030\002 \002(\014\022\017\n\007msgtype\030\003 \002(\005\022\022\n"
      "\nmsgcontent\030\004 \001(\014\022\027\n\017clientparameter\030\005 \001"
      "(\014\022\023\n\013clientcache\030\006 \001(\014\022C\n\014createnotify\030"
      "\007 \001(\0132-.qihoo.protocol.chatroom.CreateCh"
      "atRoomNotify\022E\n\njoinnotify\030\010 \001(\01321.qihoo"
      ".protocol.chatroom.MemberJoinChatRoomNot"
      "ify\022E\n\nquitnotify\030\t \001(\01321.qihoo.protocol"
      ".chatroom.MemberQuitChatRoomNotify\022=\n\nki"
      "cknotify\030\n \001(\0132).qihoo.protocol.chatroom"
      ".KickMemberNotify\022C\n\014updatenotify\030\013 \001(\0132"
      "-.qihoo.protocol.chatroom.UpdateChatRoom"
      "Notify\0225\n\014propertylist\030\014 \003(\0132\037.qihoo.pro"
      "tocol.chatroom.CRPair\"(\n\027ChatRoomMessage"
      "Response\022\r\n\005msgid\030\001 \001(\004\"\316\001\n\016ChatRoomNewM"
      "sg\022\016\n\006roomid\030\001 \002(\014\022/\n\006sender\030\002 \001(\0132\037.qih"
      "oo.protocol.chatroom.CRUser\022\017\n\007msgtype\030\003"
      " \001(\005\022\022\n\nmsgcontent\030\004 \001(\014\022\023\n\013regmemcount\030"
      "\005 \001(\005\022\020\n\010memcount\030\006 \001(\005\022\r\n\005msgid\030\007 \001(\r\022\r"
      "\n\005maxid\030\010 \001(\r\022\021\n\ttimestamp\030\t \001(\004\"G\n\020Chat"
      "RoomErrorMsg\022\016\n\006roomid\030\001 \002(\014\022\020\n\010clientsn"
      "\030\002 \002(\004\022\021\n\terrorcode\030\003 \001(\005\"T\n\017ChatRoomMNo"
      "tify\022\014\n\004type\030\001 \002(\005\022\014\n\004data\030\002 \002(\014\022\023\n\013regm"
      "emcount\030\003 \001(\005\022\020\n\010memcount\030\004 \001(\005\"6\n\020Subsc"
      "ribeRequest\022\016\n\006roomid\030\001 \002(\014\022\022\n\003sub\030\002 \001(\010"
      ":\005false\"7\n\021SubscribeResponse\022\016\n\006roomid\030\001"
      " \002(\014\022\022\n\003sub\030\002 \001(\010:\005false\"\353\007\n\022ChatRoomUpT"
      "oServer\022\023\n\013payloadtype\030\001 \002(\r\022I\n\021createch"
      "atroomreq\030\002 \001(\0132..qihoo.protocol.chatroo"
      "m.CreateChatRoomRequest\022M\n\022getchatroomin"
      "foreq\030\003 \001(\01321.qihoo.protocol.chatroom.Ge"
      "tChatRoomDetailRequest\022O\n\024applyjoinchatr"
      "oomreq\030\004 \001(\01321.qihoo.protocol.chatroom.A"
      "pplyJoinChatRoomRequest\022E\n\017quitchatroomr"
      "eq\030\005 \001(\0132,.qihoo.protocol.chatroom.QuitC"
      "hatRoomRequest\022I\n\021updatechatroomreq\030\006 \001("
      "\0132..qihoo.protocol.chatroom.UpdateChatRo"
      "omRequest\022I\n\rkickmemberreq\030\007 \001(\01322.qihoo"
      ".protocol.chatroom.KickChatRoomMemberReq"
      "uest\022K\n\022querychatroomidreq\030\010 \001(\0132/.qihoo"
      ".protocol.chatroom.QueryChatRoomIDReques"
      "t\022E\n\017updategameidreq\030\t \001(\0132,.qihoo.proto"
      "col.chatroom.UpdateRoomIDRequest\022M\n\023quer"
      "yallgameroomreq\030\n \001(\01320.qihoo.protocol.c"
      "hatroom.QueryAllGameRoomRequest\022K\n\022chatr"
      "oommessagereq\030\013 \001(\0132/.qihoo.protocol.cha"
      "troom.ChatRoomMessageRequest\022H\n\013createro"
      "oms\030\014 \001(\01323.qihoo.protocol.chatroom.Crea"
      "teMultiChatRoomRequest\022C\n\rsyncroomtodba\030"
      "\r \001(\0132,.qihoo.protocol.chatroom.SyncRoom"
      "ToDBRequest\0229\n\006subreq\030\016 \001(\0132).qihoo.prot"
      "ocol.chatroom.SubscribeRequest\"\271\n\n\022ChatR"
      "oomDownToUser\022\016\n\006result\030\001 \002(\005\022\023\n\013payload"
      "type\030\002 \002(\r\022K\n\022createchatroomresp\030\003 \001(\0132/"
      ".qihoo.protocol.chatroom.CreateChatRoomR"
      "esponse\022O\n\023getchatroominforesp\030\004 \001(\01322.q"
      "ihoo.protocol.chatroom.GetChatRoomDetail"
      "Response\022Q\n\025applyjoinchatroomresp\030\005 \001(\0132"
      "2.qihoo.protocol.chatroom.ApplyJoinChatR"
      "oomResponse\022G\n\020quitchatroomresp\030\006 \001(\0132-."
      "qihoo.protocol.chatroom.QuitChatRoomResp"
      "onse\022K\n\022updatechatroomresp\030\007 \001(\0132/.qihoo"
      ".protocol.chatroom.UpdateChatRoomRespons"
      "e\022K\n\016kickmemberresp\030\010 \001(\01323.qihoo.protoc"
      "ol.chatroom.KickChatRoomMemberResponse\022M"
      "\n\023querychatroomidresp\030\t \001(\01320.qihoo.prot"
      "ocol.chatroom.QueryChatRoomIDResponse\022G\n"
      "\020updategameidresp\030\n \001(\0132-.qihoo.protocol"
      ".chatroom.UpdateRoomIDResponse\022O\n\024querya"
      "llgameroomresp\030\013 \001(\01321.qihoo.protocol.ch"
      "atroom.QueryAllGameRoomResponse\022M\n\023chatr"
      "oommessageresp\030\014 \001(\01320.qihoo.protocol.ch"
      "atroom.ChatRoomMessageResponse\022=\n\014newmsg"
      "notify\030\r \001(\0132\'.qihoo.protocol.chatroom.C"
      "hatRoomNewMsg\022A\n\016errormsgnotify\030\016 \001(\0132)."
      "qihoo.protocol.chatroom.ChatRoomErrorMsg"
      "\022I\n\013createrooms\030\017 \001(\01324.qihoo.protocol.c"
      "hatroom.CreateMultiChatRoomResponse\022K\n\020m"
      "emberjoinnotify\030\020 \001(\01321.qihoo.protocol.c"
      "hatroom.MemberJoinChatRoomNotify\022K\n\020memb"
      "erquitnotify\030\021 \001(\01321.qihoo.protocol.chat"
      "room.MemberQuitChatRoomNotify\022;\n\007subresp"
      "\030\022 \001(\0132*.qihoo.protocol.chatroom.Subscri"
      "beResponse\022\016\n\006reason\030d \001(\014\022>\n\013multinotif"
      "y\030\310\001 \003(\0132(.qihoo.protocol.chatroom.ChatR"
      "oomMNotify\"\330\001\n\016ChatRoomPacket\022\016\n\006roomid\030"
      "\001 \002(\014\022C\n\016to_server_data\030\002 \001(\0132+.qihoo.pr"
      "otocol.chatroom.ChatRoomUpToServer\022A\n\014to"
      "_user_data\030\003 \001(\0132+.qihoo.protocol.chatro"
      "om.ChatRoomDownToUser\022\014\n\004uuid\030\004 \001(\t\022\021\n\tc"
      "lient_sn\030\005 \001(\004\022\r\n\005appid\030\006 \001(\rB5\n)com.qih"
      "oo.contact.cloud.protocol.messagesB\010Chat"
      "Room"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6724);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatRoom.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ChatRoom_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CRPair::kKeyFieldNumber;
const int CRPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CRPair::CRPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CRPair)
}
CRPair::CRPair(const CRPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CRPair)
}

void CRPair::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CRPair::~CRPair() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CRPair)
  SharedDtor();
}

void CRPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CRPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRPair::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CRPair& CRPair::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

CRPair* CRPair::New(::google::protobuf::Arena* arena) const {
  CRPair* n = new CRPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CRPair::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.CRPair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CRPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CRPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.CRPair.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CRPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CRPair)
  return false;
#undef DO_
}

void CRPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CRPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CRPair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CRPair)
}

::google::protobuf::uint8* CRPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CRPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CRPair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CRPair)
  return target;
}

size_t CRPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.CRPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  // optional bytes value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.CRPair)
  GOOGLE_DCHECK_NE(&from, this);
  const CRPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CRPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.CRPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.CRPair)
    MergeFrom(*source);
  }
}

void CRPair::MergeFrom(const CRPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.CRPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CRPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.CRPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRPair::CopyFrom(const CRPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.CRPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CRPair::Swap(CRPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CRPair::InternalSwap(CRPair* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CRPair::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CRPair

// required string key = 1;
bool CRPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CRPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CRPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CRPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CRPair::key() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRPair.key)
  return key_.GetNoArena();
}
void CRPair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRPair.key)
}
#if LANG_CXX11
void CRPair::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.CRPair.key)
}
#endif
void CRPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRPair.key)
}
void CRPair::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRPair.key)
}
::std::string* CRPair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CRPair::release_key() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CRPair.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CRPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRPair.key)
}

// optional bytes value = 2;
bool CRPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CRPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CRPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CRPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CRPair::value() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRPair.value)
  return value_.GetNoArena();
}
void CRPair::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRPair.value)
}
#if LANG_CXX11
void CRPair::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.CRPair.value)
}
#endif
void CRPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRPair.value)
}
void CRPair::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRPair.value)
}
::std::string* CRPair::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CRPair::release_value() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CRPair.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CRPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRPair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CRUser::kUseridFieldNumber;
const int CRUser::kNameFieldNumber;
const int CRUser::kPublicsettingFieldNumber;
const int CRUser::kPrivatesettingFieldNumber;
const int CRUser::kStatusFieldNumber;
const int CRUser::kUserdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CRUser::CRUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CRUser)
}
CRUser::CRUser(const CRUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      publicsetting_(from.publicsetting_),
      privatesetting_(from.privatesetting_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  userdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userdata()) {
    userdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userdata_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CRUser)
}

void CRUser::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

CRUser::~CRUser() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CRUser)
  SharedDtor();
}

void CRUser::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CRUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRUser::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CRUser& CRUser::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

CRUser* CRUser::New(::google::protobuf::Arena* arena) const {
  CRUser* n = new CRUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CRUser::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.CRUser)
  publicsetting_.Clear();
  privatesetting_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_userid()) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userid_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_userdata()) {
      GOOGLE_DCHECK(!userdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userdata_.UnsafeRawStringPointer())->clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CRUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CRUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.CRUser.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publicsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privatesetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes userdata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CRUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CRUser)
  return false;
#undef DO_
}

void CRUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CRUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CRUser.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
  for (unsigned int i = 0, n = this->publicsetting_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->publicsetting(i), output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
  for (unsigned int i = 0, n = this->privatesetting_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->privatesetting(i), output);
  }

  // optional int32 status = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional bytes userdata = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->userdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CRUser)
}

::google::protobuf::uint8* CRUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CRUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CRUser.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
  for (unsigned int i = 0, n = this->publicsetting_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->publicsetting(i), deterministic, target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
  for (unsigned int i = 0, n = this->privatesetting_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->privatesetting(i), deterministic, target);
  }

  // optional int32 status = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional bytes userdata = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->userdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CRUser)
  return target;
}

size_t CRUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.CRUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
  {
    unsigned int count = this->publicsetting_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publicsetting(i));
    }
  }

  // repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
  {
    unsigned int count = this->privatesetting_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privatesetting(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes userdata = 6;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdata());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.CRUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CRUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CRUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.CRUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.CRUser)
    MergeFrom(*source);
  }
}

void CRUser::MergeFrom(const CRUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.CRUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publicsetting_.MergeFrom(from.publicsetting_);
  privatesetting_.MergeFrom(from.privatesetting_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_userdata();
      userdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userdata_);
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.CRUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRUser::CopyFrom(const CRUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.CRUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRUser::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->publicsetting())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->privatesetting())) return false;
  return true;
}

void CRUser::Swap(CRUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CRUser::InternalSwap(CRUser* other) {
  publicsetting_.InternalSwap(&other->publicsetting_);
  privatesetting_.InternalSwap(&other->privatesetting_);
  userid_.Swap(&other->userid_);
  name_.Swap(&other->name_);
  userdata_.Swap(&other->userdata_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CRUser::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CRUser

// optional bytes userid = 1;
bool CRUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CRUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void CRUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CRUser::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& CRUser::userid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.userid)
  return userid_.GetNoArena();
}
void CRUser::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRUser.userid)
}
#if LANG_CXX11
void CRUser::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.CRUser.userid)
}
#endif
void CRUser::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRUser.userid)
}
void CRUser::set_userid(const void* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRUser.userid)
}
::std::string* CRUser::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CRUser::release_userid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CRUser.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CRUser::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRUser.userid)
}

// optional string name = 2;
bool CRUser::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CRUser::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CRUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CRUser::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CRUser::name() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.name)
  return name_.GetNoArena();
}
void CRUser::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRUser.name)
}
#if LANG_CXX11
void CRUser::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.CRUser.name)
}
#endif
void CRUser::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRUser.name)
}
void CRUser::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRUser.name)
}
::std::string* CRUser::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CRUser::release_name() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CRUser.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CRUser::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRUser.name)
}

// repeated .qihoo.protocol.chatroom.CRPair publicsetting = 3;
int CRUser::publicsetting_size() const {
  return publicsetting_.size();
}
void CRUser::clear_publicsetting() {
  publicsetting_.Clear();
}
const ::qihoo::protocol::chatroom::CRPair& CRUser::publicsetting(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.publicsetting)
  return publicsetting_.Get(index);
}
::qihoo::protocol::chatroom::CRPair* CRUser::mutable_publicsetting(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.publicsetting)
  return publicsetting_.Mutable(index);
}
::qihoo::protocol::chatroom::CRPair* CRUser::add_publicsetting() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CRUser.publicsetting)
  return publicsetting_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
CRUser::mutable_publicsetting() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CRUser.publicsetting)
  return &publicsetting_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
CRUser::publicsetting() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CRUser.publicsetting)
  return publicsetting_;
}

// repeated .qihoo.protocol.chatroom.CRPair privatesetting = 4;
int CRUser::privatesetting_size() const {
  return privatesetting_.size();
}
void CRUser::clear_privatesetting() {
  privatesetting_.Clear();
}
const ::qihoo::protocol::chatroom::CRPair& CRUser::privatesetting(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.privatesetting)
  return privatesetting_.Get(index);
}
::qihoo::protocol::chatroom::CRPair* CRUser::mutable_privatesetting(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.privatesetting)
  return privatesetting_.Mutable(index);
}
::qihoo::protocol::chatroom::CRPair* CRUser::add_privatesetting() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CRUser.privatesetting)
  return privatesetting_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
CRUser::mutable_privatesetting() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CRUser.privatesetting)
  return &privatesetting_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
CRUser::privatesetting() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CRUser.privatesetting)
  return privatesetting_;
}

// optional int32 status = 5;
bool CRUser::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CRUser::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void CRUser::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void CRUser::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 CRUser::status() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.status)
  return status_;
}
void CRUser::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRUser.status)
}

// optional bytes userdata = 6;
bool CRUser::has_userdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CRUser::set_has_userdata() {
  _has_bits_[0] |= 0x00000004u;
}
void CRUser::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000004u;
}
void CRUser::clear_userdata() {
  userdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userdata();
}
const ::std::string& CRUser::userdata() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CRUser.userdata)
  return userdata_.GetNoArena();
}
void CRUser::set_userdata(const ::std::string& value) {
  set_has_userdata();
  userdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CRUser.userdata)
}
#if LANG_CXX11
void CRUser::set_userdata(::std::string&& value) {
  set_has_userdata();
  userdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.CRUser.userdata)
}
#endif
void CRUser::set_userdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userdata();
  userdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CRUser.userdata)
}
void CRUser::set_userdata(const void* value, size_t size) {
  set_has_userdata();
  userdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CRUser.userdata)
}
::std::string* CRUser::mutable_userdata() {
  set_has_userdata();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CRUser.userdata)
  return userdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CRUser::release_userdata() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CRUser.userdata)
  clear_has_userdata();
  return userdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CRUser::set_allocated_userdata(::std::string* userdata) {
  if (userdata != NULL) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  userdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userdata);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CRUser.userdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoom::kRoomidFieldNumber;
const int ChatRoom::kCreaterFieldNumber;
const int ChatRoom::kNameFieldNumber;
const int ChatRoom::kVersionFieldNumber;
const int ChatRoom::kMaxmsgidFieldNumber;
const int ChatRoom::kMemcountlimitFieldNumber;
const int ChatRoom::kRoomtypeFieldNumber;
const int ChatRoom::kPropertiesFieldNumber;
const int ChatRoom::kMembersFieldNumber;
const int ChatRoom::kBlacklistFieldNumber;
const int ChatRoom::kGameidFieldNumber;
const int ChatRoom::kTempmembersFieldNumber;
const int ChatRoom::kPartnerdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoom::ChatRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoom)
}
ChatRoom::ChatRoom(const ChatRoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      properties_(from.properties_),
      members_(from.members_),
      blacklist_(from.blacklist_),
      tempmembers_(from.tempmembers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  roomtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomtype()) {
    roomtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomtype_);
  }
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  partnerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_partnerdata()) {
    partnerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partnerdata_);
  }
  if (from.has_creater()) {
    creater_ = new ::qihoo::protocol::chatroom::CRUser(*from.creater_);
  } else {
    creater_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&memcountlimit_) -
    reinterpret_cast<char*>(&version_) + sizeof(memcountlimit_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoom)
}

void ChatRoom::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partnerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creater_, 0, reinterpret_cast<char*>(&memcountlimit_) -
    reinterpret_cast<char*>(&creater_) + sizeof(memcountlimit_));
}

ChatRoom::~ChatRoom() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoom)
  SharedDtor();
}

void ChatRoom::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partnerdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete creater_;
  }
}

void ChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoom::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoom& ChatRoom::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoom* ChatRoom::New(::google::protobuf::Arena* arena) const {
  ChatRoom* n = new ChatRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ChatRoom)
  properties_.Clear();
  members_.Clear();
  blacklist_.Clear();
  tempmembers_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_roomtype()) {
      GOOGLE_DCHECK(!roomtype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomtype_.UnsafeRawStringPointer())->clear();
    }
    if (has_gameid()) {
      GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gameid_.UnsafeRawStringPointer())->clear();
    }
    if (has_partnerdata()) {
      GOOGLE_DCHECK(!partnerdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*partnerdata_.UnsafeRawStringPointer())->clear();
    }
    if (has_creater()) {
      GOOGLE_DCHECK(creater_ != NULL);
      creater_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&maxmsgid_) -
      reinterpret_cast<char*>(&version_) + sizeof(maxmsgid_));
  }
  memcountlimit_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser creater = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.ChatRoom.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 maxmsgid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_maxmsgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxmsgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 memcountlimit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_memcountlimit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memcountlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string roomtype = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomtype().data(), this->roomtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.ChatRoom.roomtype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair properties = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRUser members = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes blacklist = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_blacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gameid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.ChatRoom.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tempmembers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes partnerdata = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_partnerdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoom)
  return false;
#undef DO_
}

void ChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->creater_, output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.ChatRoom.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint64 version = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->version(), output);
  }

  // optional uint64 maxmsgid = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->maxmsgid(), output);
  }

  // optional uint64 memcountlimit = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->memcountlimit(), output);
  }

  // optional string roomtype = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.ChatRoom.roomtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->roomtype(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 8;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->properties(i), output);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 9;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->members(i), output);
  }

  // repeated bytes blacklist = 10;
  for (int i = 0, n = this->blacklist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->blacklist(i), output);
  }

  // optional string gameid = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.ChatRoom.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->gameid(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
  for (unsigned int i = 0, n = this->tempmembers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tempmembers(i), output);
  }

  // optional bytes partnerdata = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->partnerdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoom)
}

::google::protobuf::uint8* ChatRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->creater_, deterministic, target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.ChatRoom.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint64 version = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->version(), target);
  }

  // optional uint64 maxmsgid = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->maxmsgid(), target);
  }

  // optional uint64 memcountlimit = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->memcountlimit(), target);
  }

  // optional string roomtype = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.ChatRoom.roomtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->roomtype(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 8;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->properties(i), deterministic, target);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 9;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->members(i), deterministic, target);
  }

  // repeated bytes blacklist = 10;
  for (int i = 0, n = this->blacklist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(10, this->blacklist(i), target);
  }

  // optional string gameid = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.ChatRoom.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gameid(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
  for (unsigned int i = 0, n = this->tempmembers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->tempmembers(i), deterministic, target);
  }

  // optional bytes partnerdata = 13;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->partnerdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoom)
  return target;
}

size_t ChatRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ChatRoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  // repeated .qihoo.protocol.chatroom.CRPair properties = 8;
  {
    unsigned int count = this->properties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties(i));
    }
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 9;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // repeated bytes blacklist = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->blacklist_size());
  for (int i = 0, n = this->blacklist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->blacklist(i));
  }

  // repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
  {
    unsigned int count = this->tempmembers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tempmembers(i));
    }
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string roomtype = 7;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomtype());
    }

    // optional string gameid = 11;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional bytes partnerdata = 13;
    if (has_partnerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->partnerdata());
    }

    // optional .qihoo.protocol.chatroom.CRUser creater = 2;
    if (has_creater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->creater_);
    }

    // optional uint64 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // optional uint64 maxmsgid = 5;
    if (has_maxmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxmsgid());
    }

  }
  // optional uint64 memcountlimit = 6;
  if (has_memcountlimit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memcountlimit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ChatRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ChatRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ChatRoom)
    MergeFrom(*source);
  }
}

void ChatRoom::MergeFrom(const ChatRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ChatRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  members_.MergeFrom(from.members_);
  blacklist_.MergeFrom(from.blacklist_);
  tempmembers_.MergeFrom(from.tempmembers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_roomtype();
      roomtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomtype_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_partnerdata();
      partnerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partnerdata_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_creater()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.creater());
    }
    if (cached_has_bits & 0x00000040u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000080u) {
      maxmsgid_ = from.maxmsgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_memcountlimit(from.memcountlimit());
  }
}

void ChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoom::CopyFrom(const ChatRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ChatRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tempmembers())) return false;
  if (has_creater()) {
    if (!this->creater_->IsInitialized()) return false;
  }
  return true;
}

void ChatRoom::Swap(ChatRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoom::InternalSwap(ChatRoom* other) {
  properties_.InternalSwap(&other->properties_);
  members_.InternalSwap(&other->members_);
  blacklist_.InternalSwap(&other->blacklist_);
  tempmembers_.InternalSwap(&other->tempmembers_);
  roomid_.Swap(&other->roomid_);
  name_.Swap(&other->name_);
  roomtype_.Swap(&other->roomtype_);
  gameid_.Swap(&other->gameid_);
  partnerdata_.Swap(&other->partnerdata_);
  std::swap(creater_, other->creater_);
  std::swap(version_, other->version_);
  std::swap(maxmsgid_, other->maxmsgid_);
  std::swap(memcountlimit_, other->memcountlimit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoom::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoom

// required bytes roomid = 1;
bool ChatRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoom::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& ChatRoom::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.roomid)
  return roomid_.GetNoArena();
}
void ChatRoom::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.roomid)
}
#if LANG_CXX11
void ChatRoom::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoom.roomid)
}
#endif
void ChatRoom::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.roomid)
}
void ChatRoom::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.roomid)
}
::std::string* ChatRoom::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoom::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoom.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoom::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.roomid)
}

// optional .qihoo.protocol.chatroom.CRUser creater = 2;
bool ChatRoom::has_creater() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatRoom::set_has_creater() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatRoom::clear_has_creater() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatRoom::clear_creater() {
  if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_creater();
}
const ::qihoo::protocol::chatroom::CRUser& ChatRoom::creater() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.creater)
  return creater_ != NULL ? *creater_
                         : *::qihoo::protocol::chatroom::CRUser::internal_default_instance();
}
::qihoo::protocol::chatroom::CRUser* ChatRoom::mutable_creater() {
  set_has_creater();
  if (creater_ == NULL) {
    creater_ = new ::qihoo::protocol::chatroom::CRUser;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.creater)
  return creater_;
}
::qihoo::protocol::chatroom::CRUser* ChatRoom::release_creater() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoom.creater)
  clear_has_creater();
  ::qihoo::protocol::chatroom::CRUser* temp = creater_;
  creater_ = NULL;
  return temp;
}
void ChatRoom::set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    set_has_creater();
  } else {
    clear_has_creater();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.creater)
}

// optional string name = 3;
bool ChatRoom::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoom::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoom::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoom::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ChatRoom::name() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.name)
  return name_.GetNoArena();
}
void ChatRoom::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.name)
}
#if LANG_CXX11
void ChatRoom::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoom.name)
}
#endif
void ChatRoom::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.name)
}
void ChatRoom::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.name)
}
::std::string* ChatRoom::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoom::release_name() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoom.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoom::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.name)
}

// optional uint64 version = 4;
bool ChatRoom::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChatRoom::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
void ChatRoom::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChatRoom::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
::google::protobuf::uint64 ChatRoom::version() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.version)
  return version_;
}
void ChatRoom::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.version)
}

// optional uint64 maxmsgid = 5;
bool ChatRoom::has_maxmsgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChatRoom::set_has_maxmsgid() {
  _has_bits_[0] |= 0x00000080u;
}
void ChatRoom::clear_has_maxmsgid() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChatRoom::clear_maxmsgid() {
  maxmsgid_ = GOOGLE_ULONGLONG(0);
  clear_has_maxmsgid();
}
::google::protobuf::uint64 ChatRoom::maxmsgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.maxmsgid)
  return maxmsgid_;
}
void ChatRoom::set_maxmsgid(::google::protobuf::uint64 value) {
  set_has_maxmsgid();
  maxmsgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.maxmsgid)
}

// optional uint64 memcountlimit = 6;
bool ChatRoom::has_memcountlimit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChatRoom::set_has_memcountlimit() {
  _has_bits_[0] |= 0x00000100u;
}
void ChatRoom::clear_has_memcountlimit() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChatRoom::clear_memcountlimit() {
  memcountlimit_ = GOOGLE_ULONGLONG(0);
  clear_has_memcountlimit();
}
::google::protobuf::uint64 ChatRoom::memcountlimit() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.memcountlimit)
  return memcountlimit_;
}
void ChatRoom::set_memcountlimit(::google::protobuf::uint64 value) {
  set_has_memcountlimit();
  memcountlimit_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.memcountlimit)
}

// optional string roomtype = 7;
bool ChatRoom::has_roomtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoom::set_has_roomtype() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoom::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoom::clear_roomtype() {
  roomtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomtype();
}
const ::std::string& ChatRoom::roomtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.roomtype)
  return roomtype_.GetNoArena();
}
void ChatRoom::set_roomtype(const ::std::string& value) {
  set_has_roomtype();
  roomtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.roomtype)
}
#if LANG_CXX11
void ChatRoom::set_roomtype(::std::string&& value) {
  set_has_roomtype();
  roomtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoom.roomtype)
}
#endif
void ChatRoom::set_roomtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomtype();
  roomtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.roomtype)
}
void ChatRoom::set_roomtype(const char* value, size_t size) {
  set_has_roomtype();
  roomtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.roomtype)
}
::std::string* ChatRoom::mutable_roomtype() {
  set_has_roomtype();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.roomtype)
  return roomtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoom::release_roomtype() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoom.roomtype)
  clear_has_roomtype();
  return roomtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoom::set_allocated_roomtype(::std::string* roomtype) {
  if (roomtype != NULL) {
    set_has_roomtype();
  } else {
    clear_has_roomtype();
  }
  roomtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomtype);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.roomtype)
}

// repeated .qihoo.protocol.chatroom.CRPair properties = 8;
int ChatRoom::properties_size() const {
  return properties_.size();
}
void ChatRoom::clear_properties() {
  properties_.Clear();
}
const ::qihoo::protocol::chatroom::CRPair& ChatRoom::properties(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.properties)
  return properties_.Get(index);
}
::qihoo::protocol::chatroom::CRPair* ChatRoom::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.properties)
  return properties_.Mutable(index);
}
::qihoo::protocol::chatroom::CRPair* ChatRoom::add_properties() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoom.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
ChatRoom::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoom.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
ChatRoom::properties() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoom.properties)
  return properties_;
}

// repeated .qihoo.protocol.chatroom.CRUser members = 9;
int ChatRoom::members_size() const {
  return members_.size();
}
void ChatRoom::clear_members() {
  members_.Clear();
}
const ::qihoo::protocol::chatroom::CRUser& ChatRoom::members(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.members)
  return members_.Get(index);
}
::qihoo::protocol::chatroom::CRUser* ChatRoom::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.members)
  return members_.Mutable(index);
}
::qihoo::protocol::chatroom::CRUser* ChatRoom::add_members() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoom.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
ChatRoom::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoom.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
ChatRoom::members() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoom.members)
  return members_;
}

// repeated bytes blacklist = 10;
int ChatRoom::blacklist_size() const {
  return blacklist_.size();
}
void ChatRoom::clear_blacklist() {
  blacklist_.Clear();
}
const ::std::string& ChatRoom::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.blacklist)
  return blacklist_.Get(index);
}
::std::string* ChatRoom::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.blacklist)
  return blacklist_.Mutable(index);
}
void ChatRoom::set_blacklist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.blacklist)
  blacklist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ChatRoom::set_blacklist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.blacklist)
  blacklist_.Mutable(index)->assign(std::move(value));
}
#endif
void ChatRoom::set_blacklist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
void ChatRoom::set_blacklist(int index, const void* value, size_t size) {
  blacklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
::std::string* ChatRoom::add_blacklist() {
  // @@protoc_insertion_point(field_add_mutable:qihoo.protocol.chatroom.ChatRoom.blacklist)
  return blacklist_.Add();
}
void ChatRoom::add_blacklist(const ::std::string& value) {
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
#if LANG_CXX11
void ChatRoom::add_blacklist(::std::string&& value) {
  blacklist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
#endif
void ChatRoom::add_blacklist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
void ChatRoom::add_blacklist(const void* value, size_t size) {
  blacklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:qihoo.protocol.chatroom.ChatRoom.blacklist)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatRoom::blacklist() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoom.blacklist)
  return blacklist_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ChatRoom::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoom.blacklist)
  return &blacklist_;
}

// optional string gameid = 11;
bool ChatRoom::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatRoom::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatRoom::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatRoom::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
const ::std::string& ChatRoom::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.gameid)
  return gameid_.GetNoArena();
}
void ChatRoom::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.gameid)
}
#if LANG_CXX11
void ChatRoom::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoom.gameid)
}
#endif
void ChatRoom::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.gameid)
}
void ChatRoom::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.gameid)
}
::std::string* ChatRoom::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoom::release_gameid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoom.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoom::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.gameid)
}

// repeated .qihoo.protocol.chatroom.CRUser tempmembers = 12;
int ChatRoom::tempmembers_size() const {
  return tempmembers_.size();
}
void ChatRoom::clear_tempmembers() {
  tempmembers_.Clear();
}
const ::qihoo::protocol::chatroom::CRUser& ChatRoom::tempmembers(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return tempmembers_.Get(index);
}
::qihoo::protocol::chatroom::CRUser* ChatRoom::mutable_tempmembers(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return tempmembers_.Mutable(index);
}
::qihoo::protocol::chatroom::CRUser* ChatRoom::add_tempmembers() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return tempmembers_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
ChatRoom::mutable_tempmembers() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return &tempmembers_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
ChatRoom::tempmembers() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoom.tempmembers)
  return tempmembers_;
}

// optional bytes partnerdata = 13;
bool ChatRoom::has_partnerdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatRoom::set_has_partnerdata() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatRoom::clear_has_partnerdata() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatRoom::clear_partnerdata() {
  partnerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partnerdata();
}
const ::std::string& ChatRoom::partnerdata() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoom.partnerdata)
  return partnerdata_.GetNoArena();
}
void ChatRoom::set_partnerdata(const ::std::string& value) {
  set_has_partnerdata();
  partnerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoom.partnerdata)
}
#if LANG_CXX11
void ChatRoom::set_partnerdata(::std::string&& value) {
  set_has_partnerdata();
  partnerdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoom.partnerdata)
}
#endif
void ChatRoom::set_partnerdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_partnerdata();
  partnerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoom.partnerdata)
}
void ChatRoom::set_partnerdata(const void* value, size_t size) {
  set_has_partnerdata();
  partnerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoom.partnerdata)
}
::std::string* ChatRoom::mutable_partnerdata() {
  set_has_partnerdata();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoom.partnerdata)
  return partnerdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoom::release_partnerdata() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoom.partnerdata)
  clear_has_partnerdata();
  return partnerdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoom::set_allocated_partnerdata(::std::string* partnerdata) {
  if (partnerdata != NULL) {
    set_has_partnerdata();
  } else {
    clear_has_partnerdata();
  }
  partnerdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partnerdata);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoom.partnerdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChatRoomRequest::kGameidFieldNumber;
const int CreateChatRoomRequest::kRoomnameFieldNumber;
const int CreateChatRoomRequest::kMemcountlimitFieldNumber;
const int CreateChatRoomRequest::kRoomtypeFieldNumber;
const int CreateChatRoomRequest::kMembersFieldNumber;
const int CreateChatRoomRequest::kCreaterFieldNumber;
const int CreateChatRoomRequest::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChatRoomRequest::CreateChatRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateChatRoomRequest)
}
CreateChatRoomRequest::CreateChatRoomRequest(const CreateChatRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomname()) {
    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  roomtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomtype()) {
    roomtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomtype_);
  }
  if (from.has_creater()) {
    creater_ = new ::qihoo::protocol::chatroom::CRUser(*from.creater_);
  } else {
    creater_ = NULL;
  }
  memcountlimit_ = from.memcountlimit_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateChatRoomRequest)
}

void CreateChatRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creater_, 0, reinterpret_cast<char*>(&memcountlimit_) -
    reinterpret_cast<char*>(&creater_) + sizeof(memcountlimit_));
}

CreateChatRoomRequest::~CreateChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateChatRoomRequest)
  SharedDtor();
}

void CreateChatRoomRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete creater_;
  }
}

void CreateChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoomRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateChatRoomRequest& CreateChatRoomRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateChatRoomRequest* CreateChatRoomRequest::New(::google::protobuf::Arena* arena) const {
  CreateChatRoomRequest* n = new CreateChatRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChatRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  members_.Clear();
  properties_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_gameid()) {
      GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gameid_.UnsafeRawStringPointer())->clear();
    }
    if (has_roomname()) {
      GOOGLE_DCHECK(!roomname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomname_.UnsafeRawStringPointer())->clear();
    }
    if (has_roomtype()) {
      GOOGLE_DCHECK(!roomtype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomtype_.UnsafeRawStringPointer())->clear();
    }
    if (has_creater()) {
      GOOGLE_DCHECK(creater_ != NULL);
      creater_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
  }
  memcountlimit_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.CreateChatRoomRequest.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string roomname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.CreateChatRoomRequest.roomname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 memcountlimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_memcountlimit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memcountlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string roomtype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomtype().data(), this->roomtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRUser members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser creater = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair properties = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateChatRoomRequest)
  return false;
#undef DO_
}

void CreateChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CreateChatRoomRequest.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gameid(), output);
  }

  // optional string roomname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CreateChatRoomRequest.roomname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomname(), output);
  }

  // optional uint64 memcountlimit = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->memcountlimit(), output);
  }

  // optional string roomtype = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomtype(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 5;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->members(i), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->creater_, output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 7;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->properties(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateChatRoomRequest)
}

::google::protobuf::uint8* CreateChatRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CreateChatRoomRequest.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }

  // optional string roomname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CreateChatRoomRequest.roomname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // optional uint64 memcountlimit = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->memcountlimit(), target);
  }

  // optional string roomtype = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomtype(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 5;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->members(i), deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->creater_, deterministic, target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 7;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->properties(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateChatRoomRequest)
  return target;
}

size_t CreateChatRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .qihoo.protocol.chatroom.CRUser members = 5;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // repeated .qihoo.protocol.chatroom.CRPair properties = 7;
  {
    unsigned int count = this->properties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional string roomname = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional string roomtype = 4;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomtype());
    }

    // optional .qihoo.protocol.chatroom.CRUser creater = 6;
    if (has_creater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->creater_);
    }

    // optional uint64 memcountlimit = 3;
    if (has_memcountlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memcountlimit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChatRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChatRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.CreateChatRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.CreateChatRoomRequest)
    MergeFrom(*source);
  }
}

void CreateChatRoomRequest::MergeFrom(const CreateChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_roomname();
      roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_roomtype();
      roomtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomtype_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_creater()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.creater());
    }
    if (cached_has_bits & 0x00000010u) {
      memcountlimit_ = from.memcountlimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoomRequest::CopyFrom(const CreateChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.CreateChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoomRequest::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  if (has_creater()) {
    if (!this->creater_->IsInitialized()) return false;
  }
  return true;
}

void CreateChatRoomRequest::Swap(CreateChatRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChatRoomRequest::InternalSwap(CreateChatRoomRequest* other) {
  members_.InternalSwap(&other->members_);
  properties_.InternalSwap(&other->properties_);
  gameid_.Swap(&other->gameid_);
  roomname_.Swap(&other->roomname_);
  roomtype_.Swap(&other->roomtype_);
  std::swap(creater_, other->creater_);
  std::swap(memcountlimit_, other->memcountlimit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChatRoomRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateChatRoomRequest

// optional string gameid = 1;
bool CreateChatRoomRequest::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateChatRoomRequest::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateChatRoomRequest::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateChatRoomRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
const ::std::string& CreateChatRoomRequest::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
  return gameid_.GetNoArena();
}
void CreateChatRoomRequest::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
}
#if LANG_CXX11
void CreateChatRoomRequest::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
}
#endif
void CreateChatRoomRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
}
void CreateChatRoomRequest::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
}
::std::string* CreateChatRoomRequest::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateChatRoomRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateChatRoomRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomRequest.gameid)
}

// optional string roomname = 2;
bool CreateChatRoomRequest::has_roomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateChatRoomRequest::set_has_roomname() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateChatRoomRequest::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateChatRoomRequest::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomname();
}
const ::std::string& CreateChatRoomRequest::roomname() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
  return roomname_.GetNoArena();
}
void CreateChatRoomRequest::set_roomname(const ::std::string& value) {
  set_has_roomname();
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
}
#if LANG_CXX11
void CreateChatRoomRequest::set_roomname(::std::string&& value) {
  set_has_roomname();
  roomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
}
#endif
void CreateChatRoomRequest::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomname();
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
}
void CreateChatRoomRequest::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
}
::std::string* CreateChatRoomRequest::mutable_roomname() {
  set_has_roomname();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateChatRoomRequest::release_roomname() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
  clear_has_roomname();
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateChatRoomRequest::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    set_has_roomname();
  } else {
    clear_has_roomname();
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomRequest.roomname)
}

// optional uint64 memcountlimit = 3;
bool CreateChatRoomRequest::has_memcountlimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreateChatRoomRequest::set_has_memcountlimit() {
  _has_bits_[0] |= 0x00000010u;
}
void CreateChatRoomRequest::clear_has_memcountlimit() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreateChatRoomRequest::clear_memcountlimit() {
  memcountlimit_ = GOOGLE_ULONGLONG(0);
  clear_has_memcountlimit();
}
::google::protobuf::uint64 CreateChatRoomRequest::memcountlimit() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.memcountlimit)
  return memcountlimit_;
}
void CreateChatRoomRequest::set_memcountlimit(::google::protobuf::uint64 value) {
  set_has_memcountlimit();
  memcountlimit_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CreateChatRoomRequest.memcountlimit)
}

// optional string roomtype = 4;
bool CreateChatRoomRequest::has_roomtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateChatRoomRequest::set_has_roomtype() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateChatRoomRequest::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateChatRoomRequest::clear_roomtype() {
  roomtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomtype();
}
const ::std::string& CreateChatRoomRequest::roomtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
  return roomtype_.GetNoArena();
}
void CreateChatRoomRequest::set_roomtype(const ::std::string& value) {
  set_has_roomtype();
  roomtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
}
#if LANG_CXX11
void CreateChatRoomRequest::set_roomtype(::std::string&& value) {
  set_has_roomtype();
  roomtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
}
#endif
void CreateChatRoomRequest::set_roomtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomtype();
  roomtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
}
void CreateChatRoomRequest::set_roomtype(const char* value, size_t size) {
  set_has_roomtype();
  roomtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
}
::std::string* CreateChatRoomRequest::mutable_roomtype() {
  set_has_roomtype();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
  return roomtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateChatRoomRequest::release_roomtype() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
  clear_has_roomtype();
  return roomtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateChatRoomRequest::set_allocated_roomtype(::std::string* roomtype) {
  if (roomtype != NULL) {
    set_has_roomtype();
  } else {
    clear_has_roomtype();
  }
  roomtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomtype);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomRequest.roomtype)
}

// repeated .qihoo.protocol.chatroom.CRUser members = 5;
int CreateChatRoomRequest::members_size() const {
  return members_.size();
}
void CreateChatRoomRequest::clear_members() {
  members_.Clear();
}
const ::qihoo::protocol::chatroom::CRUser& CreateChatRoomRequest::members(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return members_.Get(index);
}
::qihoo::protocol::chatroom::CRUser* CreateChatRoomRequest::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return members_.Mutable(index);
}
::qihoo::protocol::chatroom::CRUser* CreateChatRoomRequest::add_members() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
CreateChatRoomRequest::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
CreateChatRoomRequest::members() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CreateChatRoomRequest.members)
  return members_;
}

// optional .qihoo.protocol.chatroom.CRUser creater = 6;
bool CreateChatRoomRequest::has_creater() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateChatRoomRequest::set_has_creater() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateChatRoomRequest::clear_has_creater() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateChatRoomRequest::clear_creater() {
  if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_creater();
}
const ::qihoo::protocol::chatroom::CRUser& CreateChatRoomRequest::creater() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.creater)
  return creater_ != NULL ? *creater_
                         : *::qihoo::protocol::chatroom::CRUser::internal_default_instance();
}
::qihoo::protocol::chatroom::CRUser* CreateChatRoomRequest::mutable_creater() {
  set_has_creater();
  if (creater_ == NULL) {
    creater_ = new ::qihoo::protocol::chatroom::CRUser;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.creater)
  return creater_;
}
::qihoo::protocol::chatroom::CRUser* CreateChatRoomRequest::release_creater() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CreateChatRoomRequest.creater)
  clear_has_creater();
  ::qihoo::protocol::chatroom::CRUser* temp = creater_;
  creater_ = NULL;
  return temp;
}
void CreateChatRoomRequest::set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    set_has_creater();
  } else {
    clear_has_creater();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomRequest.creater)
}

// repeated .qihoo.protocol.chatroom.CRPair properties = 7;
int CreateChatRoomRequest::properties_size() const {
  return properties_.size();
}
void CreateChatRoomRequest::clear_properties() {
  properties_.Clear();
}
const ::qihoo::protocol::chatroom::CRPair& CreateChatRoomRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return properties_.Get(index);
}
::qihoo::protocol::chatroom::CRPair* CreateChatRoomRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return properties_.Mutable(index);
}
::qihoo::protocol::chatroom::CRPair* CreateChatRoomRequest::add_properties() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
CreateChatRoomRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
CreateChatRoomRequest::properties() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CreateChatRoomRequest.properties)
  return properties_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChatRoomResponse::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChatRoomResponse::CreateChatRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateChatRoomResponse)
}
CreateChatRoomResponse::CreateChatRoomResponse(const CreateChatRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateChatRoomResponse)
}

void CreateChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
}

CreateChatRoomResponse::~CreateChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateChatRoomResponse)
  SharedDtor();
}

void CreateChatRoomResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void CreateChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoomResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateChatRoomResponse& CreateChatRoomResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateChatRoomResponse* CreateChatRoomResponse::New(::google::protobuf::Arena* arena) const {
  CreateChatRoomResponse* n = new CreateChatRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChatRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  if (has_room()) {
    GOOGLE_DCHECK(room_ != NULL);
    room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateChatRoomResponse)
  return false;
#undef DO_
}

void CreateChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateChatRoomResponse)
}

::google::protobuf::uint8* CreateChatRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateChatRoomResponse)
  return target;
}

size_t CreateChatRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChatRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChatRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.CreateChatRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.CreateChatRoomResponse)
    MergeFrom(*source);
  }
}

void CreateChatRoomResponse::MergeFrom(const CreateChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
  }
}

void CreateChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoomResponse::CopyFrom(const CreateChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.CreateChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoomResponse::IsInitialized() const {
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void CreateChatRoomResponse::Swap(CreateChatRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChatRoomResponse::InternalSwap(CreateChatRoomResponse* other) {
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChatRoomResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateChatRoomResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
bool CreateChatRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateChatRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateChatRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateChatRoomResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& CreateChatRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomResponse.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* CreateChatRoomResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomResponse.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* CreateChatRoomResponse::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CreateChatRoomResponse.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void CreateChatRoomResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomResponse.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateMultiChatRoomRequest::kRoomsFieldNumber;
const int CreateMultiChatRoomRequest::kCreaterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateMultiChatRoomRequest::CreateMultiChatRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
}
CreateMultiChatRoomRequest::CreateMultiChatRoomRequest(const CreateMultiChatRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_creater()) {
    creater_ = new ::qihoo::protocol::chatroom::CRUser(*from.creater_);
  } else {
    creater_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
}

void CreateMultiChatRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  creater_ = NULL;
}

CreateMultiChatRoomRequest::~CreateMultiChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  SharedDtor();
}

void CreateMultiChatRoomRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete creater_;
  }
}

void CreateMultiChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMultiChatRoomRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateMultiChatRoomRequest& CreateMultiChatRoomRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateMultiChatRoomRequest* CreateMultiChatRoomRequest::New(::google::protobuf::Arena* arena) const {
  CreateMultiChatRoomRequest* n = new CreateMultiChatRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateMultiChatRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  rooms_.Clear();
  if (has_creater()) {
    GOOGLE_DCHECK(creater_ != NULL);
    creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateMultiChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser creater = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  return false;
#undef DO_
}

void CreateMultiChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->creater_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
}

::google::protobuf::uint8* CreateMultiChatRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rooms(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->creater_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  return target;
}

size_t CreateMultiChatRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
  {
    unsigned int count = this->rooms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rooms(i));
    }
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (has_creater()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->creater_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMultiChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMultiChatRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateMultiChatRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
    MergeFrom(*source);
  }
}

void CreateMultiChatRoomRequest::MergeFrom(const CreateMultiChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
  if (from.has_creater()) {
    mutable_creater()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.creater());
  }
}

void CreateMultiChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMultiChatRoomRequest::CopyFrom(const CreateMultiChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.CreateMultiChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMultiChatRoomRequest::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->rooms())) return false;
  if (has_creater()) {
    if (!this->creater_->IsInitialized()) return false;
  }
  return true;
}

void CreateMultiChatRoomRequest::Swap(CreateMultiChatRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateMultiChatRoomRequest::InternalSwap(CreateMultiChatRoomRequest* other) {
  rooms_.InternalSwap(&other->rooms_);
  std::swap(creater_, other->creater_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateMultiChatRoomRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateMultiChatRoomRequest

// repeated .qihoo.protocol.chatroom.CreateChatRoomRequest rooms = 1;
int CreateMultiChatRoomRequest::rooms_size() const {
  return rooms_.size();
}
void CreateMultiChatRoomRequest::clear_rooms() {
  rooms_.Clear();
}
const ::qihoo::protocol::chatroom::CreateChatRoomRequest& CreateMultiChatRoomRequest::rooms(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return rooms_.Get(index);
}
::qihoo::protocol::chatroom::CreateChatRoomRequest* CreateMultiChatRoomRequest::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return rooms_.Mutable(index);
}
::qihoo::protocol::chatroom::CreateChatRoomRequest* CreateMultiChatRoomRequest::add_rooms() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return rooms_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CreateChatRoomRequest >*
CreateMultiChatRoomRequest::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return &rooms_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CreateChatRoomRequest >&
CreateMultiChatRoomRequest::rooms() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.rooms)
  return rooms_;
}

// optional .qihoo.protocol.chatroom.CRUser creater = 2;
bool CreateMultiChatRoomRequest::has_creater() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateMultiChatRoomRequest::set_has_creater() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateMultiChatRoomRequest::clear_has_creater() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateMultiChatRoomRequest::clear_creater() {
  if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_creater();
}
const ::qihoo::protocol::chatroom::CRUser& CreateMultiChatRoomRequest::creater() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.creater)
  return creater_ != NULL ? *creater_
                         : *::qihoo::protocol::chatroom::CRUser::internal_default_instance();
}
::qihoo::protocol::chatroom::CRUser* CreateMultiChatRoomRequest::mutable_creater() {
  set_has_creater();
  if (creater_ == NULL) {
    creater_ = new ::qihoo::protocol::chatroom::CRUser;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.creater)
  return creater_;
}
::qihoo::protocol::chatroom::CRUser* CreateMultiChatRoomRequest::release_creater() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.creater)
  clear_has_creater();
  ::qihoo::protocol::chatroom::CRUser* temp = creater_;
  creater_ = NULL;
  return temp;
}
void CreateMultiChatRoomRequest::set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    set_has_creater();
  } else {
    clear_has_creater();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateMultiChatRoomRequest.creater)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateMultiChatRoomResponse::kRoomsFieldNumber;
const int CreateMultiChatRoomResponse::kCreaterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateMultiChatRoomResponse::CreateMultiChatRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
}
CreateMultiChatRoomResponse::CreateMultiChatRoomResponse(const CreateMultiChatRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_creater()) {
    creater_ = new ::qihoo::protocol::chatroom::CRUser(*from.creater_);
  } else {
    creater_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
}

void CreateMultiChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  creater_ = NULL;
}

CreateMultiChatRoomResponse::~CreateMultiChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  SharedDtor();
}

void CreateMultiChatRoomResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete creater_;
  }
}

void CreateMultiChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMultiChatRoomResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateMultiChatRoomResponse& CreateMultiChatRoomResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateMultiChatRoomResponse* CreateMultiChatRoomResponse::New(::google::protobuf::Arena* arena) const {
  CreateMultiChatRoomResponse* n = new CreateMultiChatRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateMultiChatRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  rooms_.Clear();
  if (has_creater()) {
    GOOGLE_DCHECK(creater_ != NULL);
    creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateMultiChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser creater = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creater()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  return false;
#undef DO_
}

void CreateMultiChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->creater_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
}

::google::protobuf::uint8* CreateMultiChatRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
  for (unsigned int i = 0, n = this->rooms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rooms(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->creater_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  return target;
}

size_t CreateMultiChatRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
  {
    unsigned int count = this->rooms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rooms(i));
    }
  }

  // optional .qihoo.protocol.chatroom.CRUser creater = 2;
  if (has_creater()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->creater_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMultiChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMultiChatRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateMultiChatRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
    MergeFrom(*source);
  }
}

void CreateMultiChatRoomResponse::MergeFrom(const CreateMultiChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
  if (from.has_creater()) {
    mutable_creater()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.creater());
  }
}

void CreateMultiChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMultiChatRoomResponse::CopyFrom(const CreateMultiChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.CreateMultiChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMultiChatRoomResponse::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->rooms())) return false;
  if (has_creater()) {
    if (!this->creater_->IsInitialized()) return false;
  }
  return true;
}

void CreateMultiChatRoomResponse::Swap(CreateMultiChatRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateMultiChatRoomResponse::InternalSwap(CreateMultiChatRoomResponse* other) {
  rooms_.InternalSwap(&other->rooms_);
  std::swap(creater_, other->creater_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateMultiChatRoomResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateMultiChatRoomResponse

// repeated .qihoo.protocol.chatroom.ChatRoom rooms = 1;
int CreateMultiChatRoomResponse::rooms_size() const {
  return rooms_.size();
}
void CreateMultiChatRoomResponse::clear_rooms() {
  rooms_.Clear();
}
const ::qihoo::protocol::chatroom::ChatRoom& CreateMultiChatRoomResponse::rooms(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return rooms_.Get(index);
}
::qihoo::protocol::chatroom::ChatRoom* CreateMultiChatRoomResponse::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return rooms_.Mutable(index);
}
::qihoo::protocol::chatroom::ChatRoom* CreateMultiChatRoomResponse::add_rooms() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return rooms_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoom >*
CreateMultiChatRoomResponse::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return &rooms_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoom >&
CreateMultiChatRoomResponse::rooms() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.rooms)
  return rooms_;
}

// optional .qihoo.protocol.chatroom.CRUser creater = 2;
bool CreateMultiChatRoomResponse::has_creater() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateMultiChatRoomResponse::set_has_creater() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateMultiChatRoomResponse::clear_has_creater() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateMultiChatRoomResponse::clear_creater() {
  if (creater_ != NULL) creater_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_creater();
}
const ::qihoo::protocol::chatroom::CRUser& CreateMultiChatRoomResponse::creater() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.creater)
  return creater_ != NULL ? *creater_
                         : *::qihoo::protocol::chatroom::CRUser::internal_default_instance();
}
::qihoo::protocol::chatroom::CRUser* CreateMultiChatRoomResponse::mutable_creater() {
  set_has_creater();
  if (creater_ == NULL) {
    creater_ = new ::qihoo::protocol::chatroom::CRUser;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.creater)
  return creater_;
}
::qihoo::protocol::chatroom::CRUser* CreateMultiChatRoomResponse::release_creater() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.creater)
  clear_has_creater();
  ::qihoo::protocol::chatroom::CRUser* temp = creater_;
  creater_ = NULL;
  return temp;
}
void CreateMultiChatRoomResponse::set_allocated_creater(::qihoo::protocol::chatroom::CRUser* creater) {
  delete creater_;
  creater_ = creater;
  if (creater) {
    set_has_creater();
  } else {
    clear_has_creater();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateMultiChatRoomResponse.creater)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomDetailRequest::kRoomidFieldNumber;
const int GetChatRoomDetailRequest::kIndexFieldNumber;
const int GetChatRoomDetailRequest::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomDetailRequest::GetChatRoomDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
}
GetChatRoomDetailRequest::GetChatRoomDetailRequest(const GetChatRoomDetailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&index_) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
}

void GetChatRoomDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&index_) + sizeof(offset_));
}

GetChatRoomDetailRequest::~GetChatRoomDetailRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  SharedDtor();
}

void GetChatRoomDetailRequest::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetChatRoomDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomDetailRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomDetailRequest& GetChatRoomDetailRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomDetailRequest* GetChatRoomDetailRequest::New(::google::protobuf::Arena* arena) const {
  GetChatRoomDetailRequest* n = new GetChatRoomDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  if (has_roomid()) {
    GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*roomid_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&index_, 0, reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&index_) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  return false;
#undef DO_
}

void GetChatRoomDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 offset = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
}

::google::protobuf::uint8* GetChatRoomDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  return target;
}

size_t GetChatRoomDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
    MergeFrom(*source);
  }
}

void GetChatRoomDetailRequest::MergeFrom(const GetChatRoomDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetChatRoomDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomDetailRequest::CopyFrom(const GetChatRoomDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.GetChatRoomDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetChatRoomDetailRequest::Swap(GetChatRoomDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomDetailRequest::InternalSwap(GetChatRoomDetailRequest* other) {
  roomid_.Swap(&other->roomid_);
  std::swap(index_, other->index_);
  std::swap(offset_, other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomDetailRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomDetailRequest

// required bytes roomid = 1;
bool GetChatRoomDetailRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomDetailRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomDetailRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomDetailRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& GetChatRoomDetailRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
  return roomid_.GetNoArena();
}
void GetChatRoomDetailRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
}
#if LANG_CXX11
void GetChatRoomDetailRequest::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
}
#endif
void GetChatRoomDetailRequest::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
}
void GetChatRoomDetailRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
}
::std::string* GetChatRoomDetailRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetChatRoomDetailRequest::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetChatRoomDetailRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.GetChatRoomDetailRequest.roomid)
}

// optional int32 index = 2;
bool GetChatRoomDetailRequest::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetChatRoomDetailRequest::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void GetChatRoomDetailRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetChatRoomDetailRequest::clear_index() {
  index_ = 0;
  clear_has_index();
}
::google::protobuf::int32 GetChatRoomDetailRequest::index() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.GetChatRoomDetailRequest.index)
  return index_;
}
void GetChatRoomDetailRequest::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.GetChatRoomDetailRequest.index)
}

// optional int32 offset = 3;
bool GetChatRoomDetailRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetChatRoomDetailRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
void GetChatRoomDetailRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetChatRoomDetailRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
::google::protobuf::int32 GetChatRoomDetailRequest::offset() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.GetChatRoomDetailRequest.offset)
  return offset_;
}
void GetChatRoomDetailRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.GetChatRoomDetailRequest.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetChatRoomDetailResponse::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetChatRoomDetailResponse::GetChatRoomDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
}
GetChatRoomDetailResponse::GetChatRoomDetailResponse(const GetChatRoomDetailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
}

void GetChatRoomDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
}

GetChatRoomDetailResponse::~GetChatRoomDetailResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  SharedDtor();
}

void GetChatRoomDetailResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void GetChatRoomDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatRoomDetailResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetChatRoomDetailResponse& GetChatRoomDetailResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetChatRoomDetailResponse* GetChatRoomDetailResponse::New(::google::protobuf::Arena* arena) const {
  GetChatRoomDetailResponse* n = new GetChatRoomDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetChatRoomDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  if (has_room()) {
    GOOGLE_DCHECK(room_ != NULL);
    room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetChatRoomDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  return false;
#undef DO_
}

void GetChatRoomDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
}

::google::protobuf::uint8* GetChatRoomDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  return target;
}

size_t GetChatRoomDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatRoomDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRoomDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetChatRoomDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
    MergeFrom(*source);
  }
}

void GetChatRoomDetailResponse::MergeFrom(const GetChatRoomDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
  }
}

void GetChatRoomDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRoomDetailResponse::CopyFrom(const GetChatRoomDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.GetChatRoomDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRoomDetailResponse::IsInitialized() const {
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void GetChatRoomDetailResponse::Swap(GetChatRoomDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetChatRoomDetailResponse::InternalSwap(GetChatRoomDetailResponse* other) {
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetChatRoomDetailResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetChatRoomDetailResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
bool GetChatRoomDetailResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetChatRoomDetailResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void GetChatRoomDetailResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetChatRoomDetailResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& GetChatRoomDetailResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.GetChatRoomDetailResponse.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* GetChatRoomDetailResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.GetChatRoomDetailResponse.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* GetChatRoomDetailResponse::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.GetChatRoomDetailResponse.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void GetChatRoomDetailResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.GetChatRoomDetailResponse.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyJoinChatRoomRequest::kRoomidFieldNumber;
const int ApplyJoinChatRoomRequest::kRoomFieldNumber;
const int ApplyJoinChatRoomRequest::kUseridTypeFieldNumber;
const int ApplyJoinChatRoomRequest::kUserdataFieldNumber;
const int ApplyJoinChatRoomRequest::kNoUserlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyJoinChatRoomRequest::ApplyJoinChatRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
}
ApplyJoinChatRoomRequest::ApplyJoinChatRoomRequest(const ApplyJoinChatRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  userdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userdata()) {
    userdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userdata_);
  }
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  ::memcpy(&userid_type_, &from.userid_type_,
    reinterpret_cast<char*>(&no_userlist_) -
    reinterpret_cast<char*>(&userid_type_) + sizeof(no_userlist_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
}

void ApplyJoinChatRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_, 0, reinterpret_cast<char*>(&no_userlist_) -
    reinterpret_cast<char*>(&room_) + sizeof(no_userlist_));
}

ApplyJoinChatRoomRequest::~ApplyJoinChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  SharedDtor();
}

void ApplyJoinChatRoomRequest::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void ApplyJoinChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinChatRoomRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApplyJoinChatRoomRequest& ApplyJoinChatRoomRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ApplyJoinChatRoomRequest* ApplyJoinChatRoomRequest::New(::google::protobuf::Arena* arena) const {
  ApplyJoinChatRoomRequest* n = new ApplyJoinChatRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ApplyJoinChatRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
    if (has_userdata()) {
      GOOGLE_DCHECK(!userdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userdata_.UnsafeRawStringPointer())->clear();
    }
    if (has_room()) {
      GOOGLE_DCHECK(room_ != NULL);
      room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&userid_type_, 0, reinterpret_cast<char*>(&no_userlist_) -
      reinterpret_cast<char*>(&userid_type_) + sizeof(no_userlist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ApplyJoinChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 userid_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_userid_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes userdata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_userlist = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_no_userlist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_userlist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  return false;
#undef DO_
}

void ApplyJoinChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->room_, output);
  }

  // optional int32 userid_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid_type(), output);
  }

  // optional bytes userdata = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->userdata(), output);
  }

  // optional bool no_userlist = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->no_userlist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
}

::google::protobuf::uint8* ApplyJoinChatRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->room_, deterministic, target);
  }

  // optional int32 userid_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid_type(), target);
  }

  // optional bytes userdata = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->userdata(), target);
  }

  // optional bool no_userlist = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->no_userlist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  return target;
}

size_t ApplyJoinChatRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional bytes userdata = 4;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdata());
    }

    // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->room_);
    }

    // optional int32 userid_type = 3;
    if (has_userid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid_type());
    }

    // optional bool no_userlist = 5 [default = false];
    if (has_no_userlist()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyJoinChatRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplyJoinChatRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
    MergeFrom(*source);
  }
}

void ApplyJoinChatRoomRequest::MergeFrom(const ApplyJoinChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userdata();
      userdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userdata_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
    if (cached_has_bits & 0x00000008u) {
      userid_type_ = from.userid_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      no_userlist_ = from.no_userlist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyJoinChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinChatRoomRequest::CopyFrom(const ApplyJoinChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinChatRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void ApplyJoinChatRoomRequest::Swap(ApplyJoinChatRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyJoinChatRoomRequest::InternalSwap(ApplyJoinChatRoomRequest* other) {
  roomid_.Swap(&other->roomid_);
  userdata_.Swap(&other->userdata_);
  std::swap(room_, other->room_);
  std::swap(userid_type_, other->userid_type_);
  std::swap(no_userlist_, other->no_userlist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ApplyJoinChatRoomRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ApplyJoinChatRoomRequest

// required bytes roomid = 1;
bool ApplyJoinChatRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ApplyJoinChatRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void ApplyJoinChatRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ApplyJoinChatRoomRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& ApplyJoinChatRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
  return roomid_.GetNoArena();
}
void ApplyJoinChatRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
}
#if LANG_CXX11
void ApplyJoinChatRoomRequest::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
}
#endif
void ApplyJoinChatRoomRequest::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
}
void ApplyJoinChatRoomRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
}
::std::string* ApplyJoinChatRoomRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ApplyJoinChatRoomRequest::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ApplyJoinChatRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.roomid)
}

// optional .qihoo.protocol.chatroom.ChatRoom room = 2;
bool ApplyJoinChatRoomRequest::has_room() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ApplyJoinChatRoomRequest::set_has_room() {
  _has_bits_[0] |= 0x00000004u;
}
void ApplyJoinChatRoomRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000004u;
}
void ApplyJoinChatRoomRequest::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& ApplyJoinChatRoomRequest::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* ApplyJoinChatRoomRequest::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* ApplyJoinChatRoomRequest::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void ApplyJoinChatRoomRequest::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.room)
}

// optional int32 userid_type = 3;
bool ApplyJoinChatRoomRequest::has_userid_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ApplyJoinChatRoomRequest::set_has_userid_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ApplyJoinChatRoomRequest::clear_has_userid_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ApplyJoinChatRoomRequest::clear_userid_type() {
  userid_type_ = 0;
  clear_has_userid_type();
}
::google::protobuf::int32 ApplyJoinChatRoomRequest::userid_type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userid_type)
  return userid_type_;
}
void ApplyJoinChatRoomRequest::set_userid_type(::google::protobuf::int32 value) {
  set_has_userid_type();
  userid_type_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userid_type)
}

// optional bytes userdata = 4;
bool ApplyJoinChatRoomRequest::has_userdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ApplyJoinChatRoomRequest::set_has_userdata() {
  _has_bits_[0] |= 0x00000002u;
}
void ApplyJoinChatRoomRequest::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void ApplyJoinChatRoomRequest::clear_userdata() {
  userdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userdata();
}
const ::std::string& ApplyJoinChatRoomRequest::userdata() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
  return userdata_.GetNoArena();
}
void ApplyJoinChatRoomRequest::set_userdata(const ::std::string& value) {
  set_has_userdata();
  userdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
}
#if LANG_CXX11
void ApplyJoinChatRoomRequest::set_userdata(::std::string&& value) {
  set_has_userdata();
  userdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
}
#endif
void ApplyJoinChatRoomRequest::set_userdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userdata();
  userdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
}
void ApplyJoinChatRoomRequest::set_userdata(const void* value, size_t size) {
  set_has_userdata();
  userdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
}
::std::string* ApplyJoinChatRoomRequest::mutable_userdata() {
  set_has_userdata();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
  return userdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ApplyJoinChatRoomRequest::release_userdata() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
  clear_has_userdata();
  return userdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ApplyJoinChatRoomRequest::set_allocated_userdata(::std::string* userdata) {
  if (userdata != NULL) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  userdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userdata);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.userdata)
}

// optional bool no_userlist = 5 [default = false];
bool ApplyJoinChatRoomRequest::has_no_userlist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ApplyJoinChatRoomRequest::set_has_no_userlist() {
  _has_bits_[0] |= 0x00000010u;
}
void ApplyJoinChatRoomRequest::clear_has_no_userlist() {
  _has_bits_[0] &= ~0x00000010u;
}
void ApplyJoinChatRoomRequest::clear_no_userlist() {
  no_userlist_ = false;
  clear_has_no_userlist();
}
bool ApplyJoinChatRoomRequest::no_userlist() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.no_userlist)
  return no_userlist_;
}
void ApplyJoinChatRoomRequest::set_no_userlist(bool value) {
  set_has_no_userlist();
  no_userlist_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomRequest.no_userlist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplyJoinChatRoomResponse::kRoomFieldNumber;
const int ApplyJoinChatRoomResponse::kPullLostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplyJoinChatRoomResponse::ApplyJoinChatRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
}
ApplyJoinChatRoomResponse::ApplyJoinChatRoomResponse(const ApplyJoinChatRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  pull_lost_ = from.pull_lost_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
}

void ApplyJoinChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  pull_lost_ = true;
}

ApplyJoinChatRoomResponse::~ApplyJoinChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  SharedDtor();
}

void ApplyJoinChatRoomResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void ApplyJoinChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinChatRoomResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApplyJoinChatRoomResponse& ApplyJoinChatRoomResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ApplyJoinChatRoomResponse* ApplyJoinChatRoomResponse::New(::google::protobuf::Arena* arena) const {
  ApplyJoinChatRoomResponse* n = new ApplyJoinChatRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ApplyJoinChatRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_room()) {
      GOOGLE_DCHECK(room_ != NULL);
      room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
    pull_lost_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ApplyJoinChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pull_lost = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pull_lost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pull_lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  return false;
#undef DO_
}

void ApplyJoinChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  // optional bool pull_lost = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pull_lost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
}

::google::protobuf::uint8* ApplyJoinChatRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  // optional bool pull_lost = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pull_lost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  return target;
}

size_t ApplyJoinChatRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->room_);
    }

    // optional bool pull_lost = 2 [default = true];
    if (has_pull_lost()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyJoinChatRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplyJoinChatRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
    MergeFrom(*source);
  }
}

void ApplyJoinChatRoomResponse::MergeFrom(const ApplyJoinChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
    if (cached_has_bits & 0x00000002u) {
      pull_lost_ = from.pull_lost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplyJoinChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinChatRoomResponse::CopyFrom(const ApplyJoinChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinChatRoomResponse::IsInitialized() const {
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void ApplyJoinChatRoomResponse::Swap(ApplyJoinChatRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyJoinChatRoomResponse::InternalSwap(ApplyJoinChatRoomResponse* other) {
  std::swap(room_, other->room_);
  std::swap(pull_lost_, other->pull_lost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ApplyJoinChatRoomResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ApplyJoinChatRoomResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
bool ApplyJoinChatRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ApplyJoinChatRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void ApplyJoinChatRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void ApplyJoinChatRoomResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& ApplyJoinChatRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* ApplyJoinChatRoomResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* ApplyJoinChatRoomResponse::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void ApplyJoinChatRoomResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.room)
}

// optional bool pull_lost = 2 [default = true];
bool ApplyJoinChatRoomResponse::has_pull_lost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ApplyJoinChatRoomResponse::set_has_pull_lost() {
  _has_bits_[0] |= 0x00000002u;
}
void ApplyJoinChatRoomResponse::clear_has_pull_lost() {
  _has_bits_[0] &= ~0x00000002u;
}
void ApplyJoinChatRoomResponse::clear_pull_lost() {
  pull_lost_ = true;
  clear_has_pull_lost();
}
bool ApplyJoinChatRoomResponse::pull_lost() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.pull_lost)
  return pull_lost_;
}
void ApplyJoinChatRoomResponse::set_pull_lost(bool value) {
  set_has_pull_lost();
  pull_lost_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ApplyJoinChatRoomResponse.pull_lost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitChatRoomRequest::kRoomidFieldNumber;
const int QuitChatRoomRequest::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitChatRoomRequest::QuitChatRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QuitChatRoomRequest)
}
QuitChatRoomRequest::QuitChatRoomRequest(const QuitChatRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QuitChatRoomRequest)
}

void QuitChatRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_ = NULL;
}

QuitChatRoomRequest::~QuitChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QuitChatRoomRequest)
  SharedDtor();
}

void QuitChatRoomRequest::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void QuitChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitChatRoomRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuitChatRoomRequest& QuitChatRoomRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitChatRoomRequest* QuitChatRoomRequest::New(::google::protobuf::Arena* arena) const {
  QuitChatRoomRequest* n = new QuitChatRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitChatRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
    if (has_room()) {
      GOOGLE_DCHECK(room_ != NULL);
      room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuitChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QuitChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QuitChatRoomRequest)
  return false;
#undef DO_
}

void QuitChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QuitChatRoomRequest)
}

::google::protobuf::uint8* QuitChatRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QuitChatRoomRequest)
  return target;
}

size_t QuitChatRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  // optional .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitChatRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitChatRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.QuitChatRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.QuitChatRoomRequest)
    MergeFrom(*source);
  }
}

void QuitChatRoomRequest::MergeFrom(const QuitChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
}

void QuitChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitChatRoomRequest::CopyFrom(const QuitChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.QuitChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitChatRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void QuitChatRoomRequest::Swap(QuitChatRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitChatRoomRequest::InternalSwap(QuitChatRoomRequest* other) {
  roomid_.Swap(&other->roomid_);
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitChatRoomRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitChatRoomRequest

// required bytes roomid = 1;
bool QuitChatRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuitChatRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void QuitChatRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuitChatRoomRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& QuitChatRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
  return roomid_.GetNoArena();
}
void QuitChatRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
}
#if LANG_CXX11
void QuitChatRoomRequest::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
}
#endif
void QuitChatRoomRequest::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
}
void QuitChatRoomRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
}
::std::string* QuitChatRoomRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuitChatRoomRequest::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuitChatRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QuitChatRoomRequest.roomid)
}

// optional .qihoo.protocol.chatroom.ChatRoom room = 2;
bool QuitChatRoomRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuitChatRoomRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
void QuitChatRoomRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuitChatRoomRequest::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& QuitChatRoomRequest::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QuitChatRoomRequest.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* QuitChatRoomRequest::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QuitChatRoomRequest.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* QuitChatRoomRequest::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.QuitChatRoomRequest.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void QuitChatRoomRequest::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QuitChatRoomRequest.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitChatRoomResponse::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitChatRoomResponse::QuitChatRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QuitChatRoomResponse)
}
QuitChatRoomResponse::QuitChatRoomResponse(const QuitChatRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QuitChatRoomResponse)
}

void QuitChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
}

QuitChatRoomResponse::~QuitChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QuitChatRoomResponse)
  SharedDtor();
}

void QuitChatRoomResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void QuitChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitChatRoomResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuitChatRoomResponse& QuitChatRoomResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitChatRoomResponse* QuitChatRoomResponse::New(::google::protobuf::Arena* arena) const {
  QuitChatRoomResponse* n = new QuitChatRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitChatRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  if (has_room()) {
    GOOGLE_DCHECK(room_ != NULL);
    room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuitChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QuitChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QuitChatRoomResponse)
  return false;
#undef DO_
}

void QuitChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QuitChatRoomResponse)
}

::google::protobuf::uint8* QuitChatRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QuitChatRoomResponse)
  return target;
}

size_t QuitChatRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitChatRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitChatRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.QuitChatRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.QuitChatRoomResponse)
    MergeFrom(*source);
  }
}

void QuitChatRoomResponse::MergeFrom(const QuitChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
  }
}

void QuitChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitChatRoomResponse::CopyFrom(const QuitChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.QuitChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitChatRoomResponse::IsInitialized() const {
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void QuitChatRoomResponse::Swap(QuitChatRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitChatRoomResponse::InternalSwap(QuitChatRoomResponse* other) {
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitChatRoomResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitChatRoomResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
bool QuitChatRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuitChatRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void QuitChatRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuitChatRoomResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& QuitChatRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QuitChatRoomResponse.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* QuitChatRoomResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QuitChatRoomResponse.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* QuitChatRoomResponse::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.QuitChatRoomResponse.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void QuitChatRoomResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QuitChatRoomResponse.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryAllGameRoomRequest::QueryAllGameRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
}
QueryAllGameRoomRequest::QueryAllGameRoomRequest(const QueryAllGameRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
}

void QueryAllGameRoomRequest::SharedCtor() {
  _cached_size_ = 0;
}

QueryAllGameRoomRequest::~QueryAllGameRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  SharedDtor();
}

void QueryAllGameRoomRequest::SharedDtor() {
}

void QueryAllGameRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAllGameRoomRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryAllGameRoomRequest& QueryAllGameRoomRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryAllGameRoomRequest* QueryAllGameRoomRequest::New(::google::protobuf::Arena* arena) const {
  QueryAllGameRoomRequest* n = new QueryAllGameRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryAllGameRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryAllGameRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  return false;
#undef DO_
}

void QueryAllGameRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
}

::google::protobuf::uint8* QueryAllGameRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  return target;
}

size_t QueryAllGameRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAllGameRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryAllGameRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryAllGameRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
    MergeFrom(*source);
  }
}

void QueryAllGameRoomRequest::MergeFrom(const QueryAllGameRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void QueryAllGameRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllGameRoomRequest::CopyFrom(const QueryAllGameRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.QueryAllGameRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllGameRoomRequest::IsInitialized() const {
  return true;
}

void QueryAllGameRoomRequest::Swap(QueryAllGameRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryAllGameRoomRequest::InternalSwap(QueryAllGameRoomRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryAllGameRoomRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryAllGameRoomRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryAllGameRoomResponse::kMaplistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryAllGameRoomResponse::QueryAllGameRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
}
QueryAllGameRoomResponse::QueryAllGameRoomResponse(const QueryAllGameRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      maplist_(from.maplist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
}

void QueryAllGameRoomResponse::SharedCtor() {
  _cached_size_ = 0;
}

QueryAllGameRoomResponse::~QueryAllGameRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  SharedDtor();
}

void QueryAllGameRoomResponse::SharedDtor() {
}

void QueryAllGameRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAllGameRoomResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryAllGameRoomResponse& QueryAllGameRoomResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryAllGameRoomResponse* QueryAllGameRoomResponse::New(::google::protobuf::Arena* arena) const {
  QueryAllGameRoomResponse* n = new QueryAllGameRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryAllGameRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  maplist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryAllGameRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  return false;
#undef DO_
}

void QueryAllGameRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
  for (unsigned int i = 0, n = this->maplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maplist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
}

::google::protobuf::uint8* QueryAllGameRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
  for (unsigned int i = 0, n = this->maplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->maplist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  return target;
}

size_t QueryAllGameRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
  {
    unsigned int count = this->maplist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maplist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAllGameRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryAllGameRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryAllGameRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
    MergeFrom(*source);
  }
}

void QueryAllGameRoomResponse::MergeFrom(const QueryAllGameRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  maplist_.MergeFrom(from.maplist_);
}

void QueryAllGameRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllGameRoomResponse::CopyFrom(const QueryAllGameRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.QueryAllGameRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllGameRoomResponse::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->maplist())) return false;
  return true;
}

void QueryAllGameRoomResponse::Swap(QueryAllGameRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryAllGameRoomResponse::InternalSwap(QueryAllGameRoomResponse* other) {
  maplist_.InternalSwap(&other->maplist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryAllGameRoomResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryAllGameRoomResponse

// repeated .qihoo.protocol.chatroom.CRPair maplist = 1;
int QueryAllGameRoomResponse::maplist_size() const {
  return maplist_.size();
}
void QueryAllGameRoomResponse::clear_maplist() {
  maplist_.Clear();
}
const ::qihoo::protocol::chatroom::CRPair& QueryAllGameRoomResponse::maplist(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return maplist_.Get(index);
}
::qihoo::protocol::chatroom::CRPair* QueryAllGameRoomResponse::mutable_maplist(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return maplist_.Mutable(index);
}
::qihoo::protocol::chatroom::CRPair* QueryAllGameRoomResponse::add_maplist() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return maplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
QueryAllGameRoomResponse::mutable_maplist() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return &maplist_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
QueryAllGameRoomResponse::maplist() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.QueryAllGameRoomResponse.maplist)
  return maplist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryChatRoomIDRequest::kGameidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryChatRoomIDRequest::QueryChatRoomIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
}
QueryChatRoomIDRequest::QueryChatRoomIDRequest(const QueryChatRoomIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
}

void QueryChatRoomIDRequest::SharedCtor() {
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryChatRoomIDRequest::~QueryChatRoomIDRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  SharedDtor();
}

void QueryChatRoomIDRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryChatRoomIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryChatRoomIDRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryChatRoomIDRequest& QueryChatRoomIDRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryChatRoomIDRequest* QueryChatRoomIDRequest::New(::google::protobuf::Arena* arena) const {
  QueryChatRoomIDRequest* n = new QueryChatRoomIDRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryChatRoomIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  if (has_gameid()) {
    GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*gameid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryChatRoomIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  return false;
#undef DO_
}

void QueryChatRoomIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gameid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
}

::google::protobuf::uint8* QueryChatRoomIDRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  return target;
}

size_t QueryChatRoomIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string gameid = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gameid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryChatRoomIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryChatRoomIDRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryChatRoomIDRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
    MergeFrom(*source);
  }
}

void QueryChatRoomIDRequest::MergeFrom(const QueryChatRoomIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gameid()) {
    set_has_gameid();
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
}

void QueryChatRoomIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryChatRoomIDRequest::CopyFrom(const QueryChatRoomIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.QueryChatRoomIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChatRoomIDRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QueryChatRoomIDRequest::Swap(QueryChatRoomIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryChatRoomIDRequest::InternalSwap(QueryChatRoomIDRequest* other) {
  gameid_.Swap(&other->gameid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryChatRoomIDRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryChatRoomIDRequest

// required string gameid = 1;
bool QueryChatRoomIDRequest::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryChatRoomIDRequest::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryChatRoomIDRequest::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryChatRoomIDRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
const ::std::string& QueryChatRoomIDRequest::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
  return gameid_.GetNoArena();
}
void QueryChatRoomIDRequest::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
}
#if LANG_CXX11
void QueryChatRoomIDRequest::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
}
#endif
void QueryChatRoomIDRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
}
void QueryChatRoomIDRequest::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
}
::std::string* QueryChatRoomIDRequest::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryChatRoomIDRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryChatRoomIDRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QueryChatRoomIDRequest.gameid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryChatRoomIDResponse::kRoomidFieldNumber;
const int QueryChatRoomIDResponse::kGameidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryChatRoomIDResponse::QueryChatRoomIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
}
QueryChatRoomIDResponse::QueryChatRoomIDResponse(const QueryChatRoomIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
}

void QueryChatRoomIDResponse::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryChatRoomIDResponse::~QueryChatRoomIDResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  SharedDtor();
}

void QueryChatRoomIDResponse::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryChatRoomIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryChatRoomIDResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryChatRoomIDResponse& QueryChatRoomIDResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryChatRoomIDResponse* QueryChatRoomIDResponse::New(::google::protobuf::Arena* arena) const {
  QueryChatRoomIDResponse* n = new QueryChatRoomIDResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryChatRoomIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
    if (has_gameid()) {
      GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gameid_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryChatRoomIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  return false;
#undef DO_
}

void QueryChatRoomIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional string gameid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gameid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
}

::google::protobuf::uint8* QueryChatRoomIDResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional string gameid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gameid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  return target;
}

size_t QueryChatRoomIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional string gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryChatRoomIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryChatRoomIDResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryChatRoomIDResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
    MergeFrom(*source);
  }
}

void QueryChatRoomIDResponse::MergeFrom(const QueryChatRoomIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
  }
}

void QueryChatRoomIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryChatRoomIDResponse::CopyFrom(const QueryChatRoomIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.QueryChatRoomIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChatRoomIDResponse::IsInitialized() const {
  return true;
}

void QueryChatRoomIDResponse::Swap(QueryChatRoomIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryChatRoomIDResponse::InternalSwap(QueryChatRoomIDResponse* other) {
  roomid_.Swap(&other->roomid_);
  gameid_.Swap(&other->gameid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryChatRoomIDResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryChatRoomIDResponse

// optional bytes roomid = 1;
bool QueryChatRoomIDResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryChatRoomIDResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryChatRoomIDResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryChatRoomIDResponse::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& QueryChatRoomIDResponse::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
  return roomid_.GetNoArena();
}
void QueryChatRoomIDResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
}
#if LANG_CXX11
void QueryChatRoomIDResponse::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
}
#endif
void QueryChatRoomIDResponse::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
}
void QueryChatRoomIDResponse::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
}
::std::string* QueryChatRoomIDResponse::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryChatRoomIDResponse::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryChatRoomIDResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QueryChatRoomIDResponse.roomid)
}

// optional string gameid = 2;
bool QueryChatRoomIDResponse::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryChatRoomIDResponse::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryChatRoomIDResponse::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryChatRoomIDResponse::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
const ::std::string& QueryChatRoomIDResponse::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
  return gameid_.GetNoArena();
}
void QueryChatRoomIDResponse::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
}
#if LANG_CXX11
void QueryChatRoomIDResponse::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
}
#endif
void QueryChatRoomIDResponse::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
}
void QueryChatRoomIDResponse::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
}
::std::string* QueryChatRoomIDResponse::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryChatRoomIDResponse::release_gameid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryChatRoomIDResponse::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.QueryChatRoomIDResponse.gameid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRoomIDRequest::kGameidFieldNumber;
const int UpdateRoomIDRequest::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRoomIDRequest::UpdateRoomIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateRoomIDRequest)
}
UpdateRoomIDRequest::UpdateRoomIDRequest(const UpdateRoomIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateRoomIDRequest)
}

void UpdateRoomIDRequest::SharedCtor() {
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateRoomIDRequest::~UpdateRoomIDRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  SharedDtor();
}

void UpdateRoomIDRequest::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateRoomIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRoomIDRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateRoomIDRequest& UpdateRoomIDRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateRoomIDRequest* UpdateRoomIDRequest::New(::google::protobuf::Arena* arena) const {
  UpdateRoomIDRequest* n = new UpdateRoomIDRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRoomIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gameid()) {
      GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gameid_.UnsafeRawStringPointer())->clear();
    }
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateRoomIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes roomid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  return false;
#undef DO_
}

void UpdateRoomIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gameid(), output);
  }

  // required bytes roomid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateRoomIDRequest)
}

::google::protobuf::uint8* UpdateRoomIDRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }

  // required bytes roomid = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  return target;
}

size_t UpdateRoomIDRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  size_t total_size = 0;

  if (has_gameid()) {
    // required string gameid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gameid());
  }

  if (has_roomid()) {
    // required bytes roomid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }

  return total_size;
}
size_t UpdateRoomIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string gameid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gameid());

    // required bytes roomid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRoomIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRoomIDRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRoomIDRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.UpdateRoomIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.UpdateRoomIDRequest)
    MergeFrom(*source);
  }
}

void UpdateRoomIDRequest::MergeFrom(const UpdateRoomIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
  }
}

void UpdateRoomIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRoomIDRequest::CopyFrom(const UpdateRoomIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.UpdateRoomIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoomIDRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UpdateRoomIDRequest::Swap(UpdateRoomIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRoomIDRequest::InternalSwap(UpdateRoomIDRequest* other) {
  gameid_.Swap(&other->gameid_);
  roomid_.Swap(&other->roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRoomIDRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRoomIDRequest

// required string gameid = 1;
bool UpdateRoomIDRequest::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateRoomIDRequest::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateRoomIDRequest::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateRoomIDRequest::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
const ::std::string& UpdateRoomIDRequest::gameid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
  return gameid_.GetNoArena();
}
void UpdateRoomIDRequest::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
}
#if LANG_CXX11
void UpdateRoomIDRequest::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
}
#endif
void UpdateRoomIDRequest::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
}
void UpdateRoomIDRequest::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
}
::std::string* UpdateRoomIDRequest::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRoomIDRequest::release_gameid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRoomIDRequest::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateRoomIDRequest.gameid)
}

// required bytes roomid = 2;
bool UpdateRoomIDRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateRoomIDRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateRoomIDRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateRoomIDRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& UpdateRoomIDRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
  return roomid_.GetNoArena();
}
void UpdateRoomIDRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
}
#if LANG_CXX11
void UpdateRoomIDRequest::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
}
#endif
void UpdateRoomIDRequest::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
}
void UpdateRoomIDRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
}
::std::string* UpdateRoomIDRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRoomIDRequest::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRoomIDRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateRoomIDRequest.roomid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRoomIDResponse::UpdateRoomIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateRoomIDResponse)
}
UpdateRoomIDResponse::UpdateRoomIDResponse(const UpdateRoomIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateRoomIDResponse)
}

void UpdateRoomIDResponse::SharedCtor() {
  _cached_size_ = 0;
}

UpdateRoomIDResponse::~UpdateRoomIDResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  SharedDtor();
}

void UpdateRoomIDResponse::SharedDtor() {
}

void UpdateRoomIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRoomIDResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateRoomIDResponse& UpdateRoomIDResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateRoomIDResponse* UpdateRoomIDResponse::New(::google::protobuf::Arena* arena) const {
  UpdateRoomIDResponse* n = new UpdateRoomIDResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRoomIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateRoomIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  return false;
#undef DO_
}

void UpdateRoomIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateRoomIDResponse)
}

::google::protobuf::uint8* UpdateRoomIDResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  return target;
}

size_t UpdateRoomIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRoomIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRoomIDResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRoomIDResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.UpdateRoomIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.UpdateRoomIDResponse)
    MergeFrom(*source);
  }
}

void UpdateRoomIDResponse::MergeFrom(const UpdateRoomIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateRoomIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRoomIDResponse::CopyFrom(const UpdateRoomIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.UpdateRoomIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoomIDResponse::IsInitialized() const {
  return true;
}

void UpdateRoomIDResponse::Swap(UpdateRoomIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRoomIDResponse::InternalSwap(UpdateRoomIDResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRoomIDResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRoomIDResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateChatRoomRequest::kRoomidFieldNumber;
const int UpdateChatRoomRequest::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateChatRoomRequest::UpdateChatRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateChatRoomRequest)
}
UpdateChatRoomRequest::UpdateChatRoomRequest(const UpdateChatRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateChatRoomRequest)
}

void UpdateChatRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_ = NULL;
}

UpdateChatRoomRequest::~UpdateChatRoomRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  SharedDtor();
}

void UpdateChatRoomRequest::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void UpdateChatRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChatRoomRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateChatRoomRequest& UpdateChatRoomRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateChatRoomRequest* UpdateChatRoomRequest::New(::google::protobuf::Arena* arena) const {
  UpdateChatRoomRequest* n = new UpdateChatRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateChatRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
    if (has_room()) {
      GOOGLE_DCHECK(room_ != NULL);
      room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateChatRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .qihoo.protocol.chatroom.ChatRoom room = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  return false;
#undef DO_
}

void UpdateChatRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // required .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateChatRoomRequest)
}

::google::protobuf::uint8* UpdateChatRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // required .qihoo.protocol.chatroom.ChatRoom room = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  return target;
}

size_t UpdateChatRoomRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  size_t total_size = 0;

  if (has_roomid()) {
    // required bytes roomid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }

  if (has_room()) {
    // required .qihoo.protocol.chatroom.ChatRoom room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }

  return total_size;
}
size_t UpdateChatRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes roomid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());

    // required .qihoo.protocol.chatroom.ChatRoom room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChatRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateChatRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateChatRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.UpdateChatRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.UpdateChatRoomRequest)
    MergeFrom(*source);
  }
}

void UpdateChatRoomRequest::MergeFrom(const UpdateChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
}

void UpdateChatRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChatRoomRequest::CopyFrom(const UpdateChatRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.UpdateChatRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void UpdateChatRoomRequest::Swap(UpdateChatRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateChatRoomRequest::InternalSwap(UpdateChatRoomRequest* other) {
  roomid_.Swap(&other->roomid_);
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateChatRoomRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateChatRoomRequest

// required bytes roomid = 1;
bool UpdateChatRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateChatRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateChatRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateChatRoomRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& UpdateChatRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
  return roomid_.GetNoArena();
}
void UpdateChatRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
}
#if LANG_CXX11
void UpdateChatRoomRequest::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
}
#endif
void UpdateChatRoomRequest::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
}
void UpdateChatRoomRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
}
::std::string* UpdateChatRoomRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateChatRoomRequest::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateChatRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomRequest.roomid)
}

// required .qihoo.protocol.chatroom.ChatRoom room = 2;
bool UpdateChatRoomRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateChatRoomRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateChatRoomRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateChatRoomRequest::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& UpdateChatRoomRequest::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomRequest.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomRequest::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomRequest.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomRequest::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.UpdateChatRoomRequest.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void UpdateChatRoomRequest::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomRequest.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateChatRoomResponse::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateChatRoomResponse::UpdateChatRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateChatRoomResponse)
}
UpdateChatRoomResponse::UpdateChatRoomResponse(const UpdateChatRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateChatRoomResponse)
}

void UpdateChatRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
}

UpdateChatRoomResponse::~UpdateChatRoomResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  SharedDtor();
}

void UpdateChatRoomResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void UpdateChatRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChatRoomResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateChatRoomResponse& UpdateChatRoomResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateChatRoomResponse* UpdateChatRoomResponse::New(::google::protobuf::Arena* arena) const {
  UpdateChatRoomResponse* n = new UpdateChatRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateChatRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  if (has_room()) {
    GOOGLE_DCHECK(room_ != NULL);
    room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateChatRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  return false;
#undef DO_
}

void UpdateChatRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateChatRoomResponse)
}

::google::protobuf::uint8* UpdateChatRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  return target;
}

size_t UpdateChatRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChatRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateChatRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateChatRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.UpdateChatRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.UpdateChatRoomResponse)
    MergeFrom(*source);
  }
}

void UpdateChatRoomResponse::MergeFrom(const UpdateChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
  }
}

void UpdateChatRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChatRoomResponse::CopyFrom(const UpdateChatRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.UpdateChatRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatRoomResponse::IsInitialized() const {
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void UpdateChatRoomResponse::Swap(UpdateChatRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateChatRoomResponse::InternalSwap(UpdateChatRoomResponse* other) {
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateChatRoomResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateChatRoomResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
bool UpdateChatRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateChatRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateChatRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateChatRoomResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& UpdateChatRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomResponse.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomResponse.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomResponse::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.UpdateChatRoomResponse.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void UpdateChatRoomResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomResponse.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickChatRoomMemberRequest::kRoomidFieldNumber;
const int KickChatRoomMemberRequest::kMembersFieldNumber;
const int KickChatRoomMemberRequest::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickChatRoomMemberRequest::KickChatRoomMemberRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
}
KickChatRoomMemberRequest::KickChatRoomMemberRequest(const KickChatRoomMemberRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
}

void KickChatRoomMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_ = NULL;
}

KickChatRoomMemberRequest::~KickChatRoomMemberRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  SharedDtor();
}

void KickChatRoomMemberRequest::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void KickChatRoomMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickChatRoomMemberRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KickChatRoomMemberRequest& KickChatRoomMemberRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

KickChatRoomMemberRequest* KickChatRoomMemberRequest::New(::google::protobuf::Arena* arena) const {
  KickChatRoomMemberRequest* n = new KickChatRoomMemberRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KickChatRoomMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  members_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
    if (has_room()) {
      GOOGLE_DCHECK(room_ != NULL);
      room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KickChatRoomMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRUser members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoom room = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  return false;
#undef DO_
}

void KickChatRoomMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
}

::google::protobuf::uint8* KickChatRoomMemberRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // repeated .qihoo.protocol.chatroom.CRUser members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  return target;
}

size_t KickChatRoomMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  // repeated .qihoo.protocol.chatroom.CRUser members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // optional .qihoo.protocol.chatroom.ChatRoom room = 3;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickChatRoomMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KickChatRoomMemberRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KickChatRoomMemberRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
    MergeFrom(*source);
  }
}

void KickChatRoomMemberRequest::MergeFrom(const KickChatRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
  }
}

void KickChatRoomMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickChatRoomMemberRequest::CopyFrom(const KickChatRoomMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.KickChatRoomMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickChatRoomMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void KickChatRoomMemberRequest::Swap(KickChatRoomMemberRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickChatRoomMemberRequest::InternalSwap(KickChatRoomMemberRequest* other) {
  members_.InternalSwap(&other->members_);
  roomid_.Swap(&other->roomid_);
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KickChatRoomMemberRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KickChatRoomMemberRequest

// required bytes roomid = 1;
bool KickChatRoomMemberRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KickChatRoomMemberRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void KickChatRoomMemberRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void KickChatRoomMemberRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& KickChatRoomMemberRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
  return roomid_.GetNoArena();
}
void KickChatRoomMemberRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
}
#if LANG_CXX11
void KickChatRoomMemberRequest::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
}
#endif
void KickChatRoomMemberRequest::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
}
void KickChatRoomMemberRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
}
::std::string* KickChatRoomMemberRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KickChatRoomMemberRequest::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KickChatRoomMemberRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickChatRoomMemberRequest.roomid)
}

// repeated .qihoo.protocol.chatroom.CRUser members = 2;
int KickChatRoomMemberRequest::members_size() const {
  return members_.size();
}
void KickChatRoomMemberRequest::clear_members() {
  members_.Clear();
}
const ::qihoo::protocol::chatroom::CRUser& KickChatRoomMemberRequest::members(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return members_.Get(index);
}
::qihoo::protocol::chatroom::CRUser* KickChatRoomMemberRequest::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return members_.Mutable(index);
}
::qihoo::protocol::chatroom::CRUser* KickChatRoomMemberRequest::add_members() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >*
KickChatRoomMemberRequest::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRUser >&
KickChatRoomMemberRequest::members() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.KickChatRoomMemberRequest.members)
  return members_;
}

// optional .qihoo.protocol.chatroom.ChatRoom room = 3;
bool KickChatRoomMemberRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KickChatRoomMemberRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
void KickChatRoomMemberRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
void KickChatRoomMemberRequest::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& KickChatRoomMemberRequest::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickChatRoomMemberRequest.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* KickChatRoomMemberRequest::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickChatRoomMemberRequest.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* KickChatRoomMemberRequest::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.KickChatRoomMemberRequest.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void KickChatRoomMemberRequest::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickChatRoomMemberRequest.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickChatRoomMemberResponse::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickChatRoomMemberResponse::KickChatRoomMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
}
KickChatRoomMemberResponse::KickChatRoomMemberResponse(const KickChatRoomMemberResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
}

void KickChatRoomMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
}

KickChatRoomMemberResponse::~KickChatRoomMemberResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  SharedDtor();
}

void KickChatRoomMemberResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void KickChatRoomMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickChatRoomMemberResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KickChatRoomMemberResponse& KickChatRoomMemberResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

KickChatRoomMemberResponse* KickChatRoomMemberResponse::New(::google::protobuf::Arena* arena) const {
  KickChatRoomMemberResponse* n = new KickChatRoomMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KickChatRoomMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  if (has_room()) {
    GOOGLE_DCHECK(room_ != NULL);
    room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KickChatRoomMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  return false;
#undef DO_
}

void KickChatRoomMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
}

::google::protobuf::uint8* KickChatRoomMemberResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  return target;
}

size_t KickChatRoomMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickChatRoomMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KickChatRoomMemberResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KickChatRoomMemberResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
    MergeFrom(*source);
  }
}

void KickChatRoomMemberResponse::MergeFrom(const KickChatRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
  }
}

void KickChatRoomMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickChatRoomMemberResponse::CopyFrom(const KickChatRoomMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.KickChatRoomMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickChatRoomMemberResponse::IsInitialized() const {
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void KickChatRoomMemberResponse::Swap(KickChatRoomMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickChatRoomMemberResponse::InternalSwap(KickChatRoomMemberResponse* other) {
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KickChatRoomMemberResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KickChatRoomMemberResponse

// optional .qihoo.protocol.chatroom.ChatRoom room = 1;
bool KickChatRoomMemberResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KickChatRoomMemberResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void KickChatRoomMemberResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void KickChatRoomMemberResponse::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& KickChatRoomMemberResponse::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickChatRoomMemberResponse.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* KickChatRoomMemberResponse::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickChatRoomMemberResponse.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* KickChatRoomMemberResponse::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.KickChatRoomMemberResponse.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void KickChatRoomMemberResponse::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickChatRoomMemberResponse.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncRoomToDBRequest::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncRoomToDBRequest::SyncRoomToDBRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.SyncRoomToDBRequest)
}
SyncRoomToDBRequest::SyncRoomToDBRequest(const SyncRoomToDBRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.SyncRoomToDBRequest)
}

void SyncRoomToDBRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SyncRoomToDBRequest::~SyncRoomToDBRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  SharedDtor();
}

void SyncRoomToDBRequest::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SyncRoomToDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRoomToDBRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncRoomToDBRequest& SyncRoomToDBRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncRoomToDBRequest* SyncRoomToDBRequest::New(::google::protobuf::Arena* arena) const {
  SyncRoomToDBRequest* n = new SyncRoomToDBRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncRoomToDBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  if (has_roomid()) {
    GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*roomid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncRoomToDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  return false;
#undef DO_
}

void SyncRoomToDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.SyncRoomToDBRequest)
}

::google::protobuf::uint8* SyncRoomToDBRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  return target;
}

size_t SyncRoomToDBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRoomToDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncRoomToDBRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncRoomToDBRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.SyncRoomToDBRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.SyncRoomToDBRequest)
    MergeFrom(*source);
  }
}

void SyncRoomToDBRequest::MergeFrom(const SyncRoomToDBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roomid()) {
    set_has_roomid();
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
}

void SyncRoomToDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRoomToDBRequest::CopyFrom(const SyncRoomToDBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.SyncRoomToDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRoomToDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SyncRoomToDBRequest::Swap(SyncRoomToDBRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncRoomToDBRequest::InternalSwap(SyncRoomToDBRequest* other) {
  roomid_.Swap(&other->roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncRoomToDBRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncRoomToDBRequest

// required bytes roomid = 1;
bool SyncRoomToDBRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncRoomToDBRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncRoomToDBRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncRoomToDBRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& SyncRoomToDBRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
  return roomid_.GetNoArena();
}
void SyncRoomToDBRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
}
#if LANG_CXX11
void SyncRoomToDBRequest::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
}
#endif
void SyncRoomToDBRequest::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
}
void SyncRoomToDBRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
}
::std::string* SyncRoomToDBRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncRoomToDBRequest::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncRoomToDBRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.SyncRoomToDBRequest.roomid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChatRoomNotify::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChatRoomNotify::CreateChatRoomNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.CreateChatRoomNotify)
}
CreateChatRoomNotify::CreateChatRoomNotify(const CreateChatRoomNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.CreateChatRoomNotify)
}

void CreateChatRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
}

CreateChatRoomNotify::~CreateChatRoomNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.CreateChatRoomNotify)
  SharedDtor();
}

void CreateChatRoomNotify::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void CreateChatRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoomNotify::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateChatRoomNotify& CreateChatRoomNotify::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateChatRoomNotify* CreateChatRoomNotify::New(::google::protobuf::Arena* arena) const {
  CreateChatRoomNotify* n = new CreateChatRoomNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChatRoomNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  if (has_room()) {
    GOOGLE_DCHECK(room_ != NULL);
    room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateChatRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.CreateChatRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.CreateChatRoomNotify)
  return false;
#undef DO_
}

void CreateChatRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.CreateChatRoomNotify)
}

::google::protobuf::uint8* CreateChatRoomNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.CreateChatRoomNotify)
  return target;
}

size_t CreateChatRoomNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChatRoomNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChatRoomNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.CreateChatRoomNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.CreateChatRoomNotify)
    MergeFrom(*source);
  }
}

void CreateChatRoomNotify::MergeFrom(const CreateChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
  }
}

void CreateChatRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoomNotify::CopyFrom(const CreateChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.CreateChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void CreateChatRoomNotify::Swap(CreateChatRoomNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChatRoomNotify::InternalSwap(CreateChatRoomNotify* other) {
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChatRoomNotify::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateChatRoomNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
bool CreateChatRoomNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateChatRoomNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateChatRoomNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateChatRoomNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& CreateChatRoomNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.CreateChatRoomNotify.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* CreateChatRoomNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.CreateChatRoomNotify.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* CreateChatRoomNotify::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.CreateChatRoomNotify.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void CreateChatRoomNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.CreateChatRoomNotify.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberJoinChatRoomNotify::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberJoinChatRoomNotify::MemberJoinChatRoomNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
}
MemberJoinChatRoomNotify::MemberJoinChatRoomNotify(const MemberJoinChatRoomNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
}

void MemberJoinChatRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
}

MemberJoinChatRoomNotify::~MemberJoinChatRoomNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  SharedDtor();
}

void MemberJoinChatRoomNotify::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void MemberJoinChatRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberJoinChatRoomNotify::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberJoinChatRoomNotify& MemberJoinChatRoomNotify::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberJoinChatRoomNotify* MemberJoinChatRoomNotify::New(::google::protobuf::Arena* arena) const {
  MemberJoinChatRoomNotify* n = new MemberJoinChatRoomNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberJoinChatRoomNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  if (has_room()) {
    GOOGLE_DCHECK(room_ != NULL);
    room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemberJoinChatRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  return false;
#undef DO_
}

void MemberJoinChatRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
}

::google::protobuf::uint8* MemberJoinChatRoomNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  return target;
}

size_t MemberJoinChatRoomNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberJoinChatRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberJoinChatRoomNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberJoinChatRoomNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
    MergeFrom(*source);
  }
}

void MemberJoinChatRoomNotify::MergeFrom(const MemberJoinChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
  }
}

void MemberJoinChatRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberJoinChatRoomNotify::CopyFrom(const MemberJoinChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.MemberJoinChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberJoinChatRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void MemberJoinChatRoomNotify::Swap(MemberJoinChatRoomNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberJoinChatRoomNotify::InternalSwap(MemberJoinChatRoomNotify* other) {
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberJoinChatRoomNotify::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberJoinChatRoomNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
bool MemberJoinChatRoomNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemberJoinChatRoomNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void MemberJoinChatRoomNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemberJoinChatRoomNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& MemberJoinChatRoomNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.MemberJoinChatRoomNotify.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* MemberJoinChatRoomNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.MemberJoinChatRoomNotify.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* MemberJoinChatRoomNotify::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.MemberJoinChatRoomNotify.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void MemberJoinChatRoomNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.MemberJoinChatRoomNotify.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberQuitChatRoomNotify::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberQuitChatRoomNotify::MemberQuitChatRoomNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
}
MemberQuitChatRoomNotify::MemberQuitChatRoomNotify(const MemberQuitChatRoomNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
}

void MemberQuitChatRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
}

MemberQuitChatRoomNotify::~MemberQuitChatRoomNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  SharedDtor();
}

void MemberQuitChatRoomNotify::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
}

void MemberQuitChatRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberQuitChatRoomNotify::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberQuitChatRoomNotify& MemberQuitChatRoomNotify::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberQuitChatRoomNotify* MemberQuitChatRoomNotify::New(::google::protobuf::Arena* arena) const {
  MemberQuitChatRoomNotify* n = new MemberQuitChatRoomNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberQuitChatRoomNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  if (has_room()) {
    GOOGLE_DCHECK(room_ != NULL);
    room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemberQuitChatRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  return false;
#undef DO_
}

void MemberQuitChatRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
}

::google::protobuf::uint8* MemberQuitChatRoomNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  return target;
}

size_t MemberQuitChatRoomNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberQuitChatRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberQuitChatRoomNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberQuitChatRoomNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
    MergeFrom(*source);
  }
}

void MemberQuitChatRoomNotify::MergeFrom(const MemberQuitChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room()) {
    mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
  }
}

void MemberQuitChatRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberQuitChatRoomNotify::CopyFrom(const MemberQuitChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.MemberQuitChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberQuitChatRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  return true;
}

void MemberQuitChatRoomNotify::Swap(MemberQuitChatRoomNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberQuitChatRoomNotify::InternalSwap(MemberQuitChatRoomNotify* other) {
  std::swap(room_, other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberQuitChatRoomNotify::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberQuitChatRoomNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
bool MemberQuitChatRoomNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemberQuitChatRoomNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void MemberQuitChatRoomNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemberQuitChatRoomNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& MemberQuitChatRoomNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.MemberQuitChatRoomNotify.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* MemberQuitChatRoomNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.MemberQuitChatRoomNotify.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* MemberQuitChatRoomNotify::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.MemberQuitChatRoomNotify.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void MemberQuitChatRoomNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.MemberQuitChatRoomNotify.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickMemberNotify::kRoomFieldNumber;
const int KickMemberNotify::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickMemberNotify::KickMemberNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.KickMemberNotify)
}
KickMemberNotify::KickMemberNotify(const KickMemberNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::qihoo::protocol::chatroom::CRUser(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.KickMemberNotify)
}

void KickMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&room_, 0, reinterpret_cast<char*>(&user_) -
    reinterpret_cast<char*>(&room_) + sizeof(user_));
}

KickMemberNotify::~KickMemberNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.KickMemberNotify)
  SharedDtor();
}

void KickMemberNotify::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
  if (this != internal_default_instance()) {
    delete user_;
  }
}

void KickMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickMemberNotify::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KickMemberNotify& KickMemberNotify::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

KickMemberNotify* KickMemberNotify::New(::google::protobuf::Arena* arena) const {
  KickMemberNotify* n = new KickMemberNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KickMemberNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.KickMemberNotify)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_room()) {
      GOOGLE_DCHECK(room_ != NULL);
      room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
    if (has_user()) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KickMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.KickMemberNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.KickMemberNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.KickMemberNotify)
  return false;
#undef DO_
}

void KickMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.KickMemberNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.KickMemberNotify)
}

::google::protobuf::uint8* KickMemberNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.KickMemberNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->user_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.KickMemberNotify)
  return target;
}

size_t KickMemberNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.KickMemberNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }
  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickMemberNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.KickMemberNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const KickMemberNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KickMemberNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.KickMemberNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.KickMemberNotify)
    MergeFrom(*source);
  }
}

void KickMemberNotify::MergeFrom(const KickMemberNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.KickMemberNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.user());
    }
  }
}

void KickMemberNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.KickMemberNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickMemberNotify::CopyFrom(const KickMemberNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.KickMemberNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void KickMemberNotify::Swap(KickMemberNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickMemberNotify::InternalSwap(KickMemberNotify* other) {
  std::swap(room_, other->room_);
  std::swap(user_, other->user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KickMemberNotify::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KickMemberNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
bool KickMemberNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KickMemberNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void KickMemberNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void KickMemberNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& KickMemberNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickMemberNotify.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* KickMemberNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickMemberNotify.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* KickMemberNotify::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.KickMemberNotify.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void KickMemberNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickMemberNotify.room)
}

// optional .qihoo.protocol.chatroom.CRUser user = 2;
bool KickMemberNotify::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KickMemberNotify::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
void KickMemberNotify::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
void KickMemberNotify::clear_user() {
  if (user_ != NULL) user_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_user();
}
const ::qihoo::protocol::chatroom::CRUser& KickMemberNotify::user() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.KickMemberNotify.user)
  return user_ != NULL ? *user_
                         : *::qihoo::protocol::chatroom::CRUser::internal_default_instance();
}
::qihoo::protocol::chatroom::CRUser* KickMemberNotify::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::qihoo::protocol::chatroom::CRUser;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.KickMemberNotify.user)
  return user_;
}
::qihoo::protocol::chatroom::CRUser* KickMemberNotify::release_user() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.KickMemberNotify.user)
  clear_has_user();
  ::qihoo::protocol::chatroom::CRUser* temp = user_;
  user_ = NULL;
  return temp;
}
void KickMemberNotify::set_allocated_user(::qihoo::protocol::chatroom::CRUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.KickMemberNotify.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateChatRoomNotify::kRoomFieldNumber;
const int UpdateChatRoomNotify::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateChatRoomNotify::UpdateChatRoomNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.UpdateChatRoomNotify)
}
UpdateChatRoomNotify::UpdateChatRoomNotify(const UpdateChatRoomNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room()) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom(*from.room_);
  } else {
    room_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::qihoo::protocol::chatroom::CRUser(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.UpdateChatRoomNotify)
}

void UpdateChatRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&room_, 0, reinterpret_cast<char*>(&user_) -
    reinterpret_cast<char*>(&room_) + sizeof(user_));
}

UpdateChatRoomNotify::~UpdateChatRoomNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  SharedDtor();
}

void UpdateChatRoomNotify::SharedDtor() {
  if (this != internal_default_instance()) {
    delete room_;
  }
  if (this != internal_default_instance()) {
    delete user_;
  }
}

void UpdateChatRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChatRoomNotify::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateChatRoomNotify& UpdateChatRoomNotify::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateChatRoomNotify* UpdateChatRoomNotify::New(::google::protobuf::Arena* arena) const {
  UpdateChatRoomNotify* n = new UpdateChatRoomNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateChatRoomNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_room()) {
      GOOGLE_DCHECK(room_ != NULL);
      room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
    }
    if (has_user()) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateChatRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qihoo.protocol.chatroom.ChatRoom room = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  return false;
#undef DO_
}

void UpdateChatRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_, output);
  }

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.UpdateChatRoomNotify)
}

::google::protobuf::uint8* UpdateChatRoomNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->user_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  return target;
}

size_t UpdateChatRoomNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .qihoo.protocol.chatroom.ChatRoom room = 1;
  if (has_room()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_);
  }
  // optional .qihoo.protocol.chatroom.CRUser user = 2;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChatRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateChatRoomNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateChatRoomNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.UpdateChatRoomNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.UpdateChatRoomNotify)
    MergeFrom(*source);
  }
}

void UpdateChatRoomNotify::MergeFrom(const UpdateChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_room()->::qihoo::protocol::chatroom::ChatRoom::MergeFrom(from.room());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.user());
    }
  }
}

void UpdateChatRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChatRoomNotify::CopyFrom(const UpdateChatRoomNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.UpdateChatRoomNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_room()) {
    if (!this->room_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void UpdateChatRoomNotify::Swap(UpdateChatRoomNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateChatRoomNotify::InternalSwap(UpdateChatRoomNotify* other) {
  std::swap(room_, other->room_);
  std::swap(user_, other->user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateChatRoomNotify::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateChatRoomNotify

// required .qihoo.protocol.chatroom.ChatRoom room = 1;
bool UpdateChatRoomNotify::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateChatRoomNotify::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateChatRoomNotify::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateChatRoomNotify::clear_room() {
  if (room_ != NULL) room_->::qihoo::protocol::chatroom::ChatRoom::Clear();
  clear_has_room();
}
const ::qihoo::protocol::chatroom::ChatRoom& UpdateChatRoomNotify::room() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomNotify.room)
  return room_ != NULL ? *room_
                         : *::qihoo::protocol::chatroom::ChatRoom::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomNotify::mutable_room() {
  set_has_room();
  if (room_ == NULL) {
    room_ = new ::qihoo::protocol::chatroom::ChatRoom;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomNotify.room)
  return room_;
}
::qihoo::protocol::chatroom::ChatRoom* UpdateChatRoomNotify::release_room() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.UpdateChatRoomNotify.room)
  clear_has_room();
  ::qihoo::protocol::chatroom::ChatRoom* temp = room_;
  room_ = NULL;
  return temp;
}
void UpdateChatRoomNotify::set_allocated_room(::qihoo::protocol::chatroom::ChatRoom* room) {
  delete room_;
  room_ = room;
  if (room) {
    set_has_room();
  } else {
    clear_has_room();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomNotify.room)
}

// optional .qihoo.protocol.chatroom.CRUser user = 2;
bool UpdateChatRoomNotify::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateChatRoomNotify::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateChatRoomNotify::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateChatRoomNotify::clear_user() {
  if (user_ != NULL) user_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_user();
}
const ::qihoo::protocol::chatroom::CRUser& UpdateChatRoomNotify::user() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.UpdateChatRoomNotify.user)
  return user_ != NULL ? *user_
                         : *::qihoo::protocol::chatroom::CRUser::internal_default_instance();
}
::qihoo::protocol::chatroom::CRUser* UpdateChatRoomNotify::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::qihoo::protocol::chatroom::CRUser;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.UpdateChatRoomNotify.user)
  return user_;
}
::qihoo::protocol::chatroom::CRUser* UpdateChatRoomNotify::release_user() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.UpdateChatRoomNotify.user)
  clear_has_user();
  ::qihoo::protocol::chatroom::CRUser* temp = user_;
  user_ = NULL;
  return temp;
}
void UpdateChatRoomNotify::set_allocated_user(::qihoo::protocol::chatroom::CRUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.UpdateChatRoomNotify.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomMessageRequest::kSenderFieldNumber;
const int ChatRoomMessageRequest::kRoomidFieldNumber;
const int ChatRoomMessageRequest::kMsgtypeFieldNumber;
const int ChatRoomMessageRequest::kMsgcontentFieldNumber;
const int ChatRoomMessageRequest::kClientparameterFieldNumber;
const int ChatRoomMessageRequest::kClientcacheFieldNumber;
const int ChatRoomMessageRequest::kCreatenotifyFieldNumber;
const int ChatRoomMessageRequest::kJoinnotifyFieldNumber;
const int ChatRoomMessageRequest::kQuitnotifyFieldNumber;
const int ChatRoomMessageRequest::kKicknotifyFieldNumber;
const int ChatRoomMessageRequest::kUpdatenotifyFieldNumber;
const int ChatRoomMessageRequest::kPropertylistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomMessageRequest::ChatRoomMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomMessageRequest)
}
ChatRoomMessageRequest::ChatRoomMessageRequest(const ChatRoomMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      propertylist_(from.propertylist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  msgcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgcontent()) {
    msgcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgcontent_);
  }
  clientparameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientparameter()) {
    clientparameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientparameter_);
  }
  clientcache_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientcache()) {
    clientcache_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientcache_);
  }
  if (from.has_sender()) {
    sender_ = new ::qihoo::protocol::chatroom::CRUser(*from.sender_);
  } else {
    sender_ = NULL;
  }
  if (from.has_createnotify()) {
    createnotify_ = new ::qihoo::protocol::chatroom::CreateChatRoomNotify(*from.createnotify_);
  } else {
    createnotify_ = NULL;
  }
  if (from.has_joinnotify()) {
    joinnotify_ = new ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify(*from.joinnotify_);
  } else {
    joinnotify_ = NULL;
  }
  if (from.has_quitnotify()) {
    quitnotify_ = new ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify(*from.quitnotify_);
  } else {
    quitnotify_ = NULL;
  }
  if (from.has_kicknotify()) {
    kicknotify_ = new ::qihoo::protocol::chatroom::KickMemberNotify(*from.kicknotify_);
  } else {
    kicknotify_ = NULL;
  }
  if (from.has_updatenotify()) {
    updatenotify_ = new ::qihoo::protocol::chatroom::UpdateChatRoomNotify(*from.updatenotify_);
  } else {
    updatenotify_ = NULL;
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomMessageRequest)
}

void ChatRoomMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientparameter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientcache_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, reinterpret_cast<char*>(&msgtype_) -
    reinterpret_cast<char*>(&sender_) + sizeof(msgtype_));
}

ChatRoomMessageRequest::~ChatRoomMessageRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  SharedDtor();
}

void ChatRoomMessageRequest::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientparameter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientcache_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete sender_;
  }
  if (this != internal_default_instance()) {
    delete createnotify_;
  }
  if (this != internal_default_instance()) {
    delete joinnotify_;
  }
  if (this != internal_default_instance()) {
    delete quitnotify_;
  }
  if (this != internal_default_instance()) {
    delete kicknotify_;
  }
  if (this != internal_default_instance()) {
    delete updatenotify_;
  }
}

void ChatRoomMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMessageRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomMessageRequest& ChatRoomMessageRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomMessageRequest* ChatRoomMessageRequest::New(::google::protobuf::Arena* arena) const {
  ChatRoomMessageRequest* n = new ChatRoomMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  propertylist_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgcontent()) {
      GOOGLE_DCHECK(!msgcontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgcontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientparameter()) {
      GOOGLE_DCHECK(!clientparameter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientparameter_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientcache()) {
      GOOGLE_DCHECK(!clientcache_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientcache_.UnsafeRawStringPointer())->clear();
    }
    if (has_sender()) {
      GOOGLE_DCHECK(sender_ != NULL);
      sender_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
    if (has_createnotify()) {
      GOOGLE_DCHECK(createnotify_ != NULL);
      createnotify_->::qihoo::protocol::chatroom::CreateChatRoomNotify::Clear();
    }
    if (has_joinnotify()) {
      GOOGLE_DCHECK(joinnotify_ != NULL);
      joinnotify_->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::Clear();
    }
    if (has_quitnotify()) {
      GOOGLE_DCHECK(quitnotify_ != NULL);
      quitnotify_->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_kicknotify()) {
      GOOGLE_DCHECK(kicknotify_ != NULL);
      kicknotify_->::qihoo::protocol::chatroom::KickMemberNotify::Clear();
    }
    if (has_updatenotify()) {
      GOOGLE_DCHECK(updatenotify_ != NULL);
      updatenotify_->::qihoo::protocol::chatroom::UpdateChatRoomNotify::Clear();
    }
  }
  msgtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qihoo.protocol.chatroom.CRUser sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes roomid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 msgtype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_msgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes msgcontent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes clientparameter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientparameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes clientcache = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientcache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createnotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joinnotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitnotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kicknotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatenotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propertylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  return false;
#undef DO_
}

void ChatRoomMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.CRUser sender = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sender_, output);
  }

  // required bytes roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomid(), output);
  }

  // required int32 msgtype = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgtype(), output);
  }

  // optional bytes msgcontent = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->msgcontent(), output);
  }

  // optional bytes clientparameter = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->clientparameter(), output);
  }

  // optional bytes clientcache = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->clientcache(), output);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->createnotify_, output);
  }

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->joinnotify_, output);
  }

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->quitnotify_, output);
  }

  // optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->kicknotify_, output);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->updatenotify_, output);
  }

  // repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
  for (unsigned int i = 0, n = this->propertylist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->propertylist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomMessageRequest)
}

::google::protobuf::uint8* ChatRoomMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qihoo.protocol.chatroom.CRUser sender = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sender_, deterministic, target);
  }

  // required bytes roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomid(), target);
  }

  // required int32 msgtype = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgtype(), target);
  }

  // optional bytes msgcontent = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msgcontent(), target);
  }

  // optional bytes clientparameter = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->clientparameter(), target);
  }

  // optional bytes clientcache = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->clientcache(), target);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->createnotify_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->joinnotify_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->quitnotify_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->kicknotify_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->updatenotify_, deterministic, target);
  }

  // repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
  for (unsigned int i = 0, n = this->propertylist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->propertylist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  return target;
}

size_t ChatRoomMessageRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  size_t total_size = 0;

  if (has_roomid()) {
    // required bytes roomid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }

  if (has_msgtype()) {
    // required int32 msgtype = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());
  }

  return total_size;
}
size_t ChatRoomMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000401) ^ 0x00000401) == 0) {  // All required fields are present.
    // required bytes roomid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());

    // required int32 msgtype = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
  {
    unsigned int count = this->propertylist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propertylist(i));
    }
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional bytes msgcontent = 4;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgcontent());
    }

    // optional bytes clientparameter = 5;
    if (has_clientparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientparameter());
    }

    // optional bytes clientcache = 6;
    if (has_clientcache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientcache());
    }

    // optional .qihoo.protocol.chatroom.CRUser sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sender_);
    }

    // optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
    if (has_createnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->createnotify_);
    }

    // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
    if (has_joinnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->joinnotify_);
    }

    // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
    if (has_quitnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->quitnotify_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
    if (has_kicknotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kicknotify_);
    }

    // optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
    if (has_updatenotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->updatenotify_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomMessageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ChatRoomMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ChatRoomMessageRequest)
    MergeFrom(*source);
  }
}

void ChatRoomMessageRequest::MergeFrom(const ChatRoomMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  propertylist_.MergeFrom(from.propertylist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msgcontent();
      msgcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgcontent_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_clientparameter();
      clientparameter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientparameter_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_clientcache();
      clientcache_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientcache_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sender()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.sender());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_createnotify()->::qihoo::protocol::chatroom::CreateChatRoomNotify::MergeFrom(from.createnotify());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_joinnotify()->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::MergeFrom(from.joinnotify());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_quitnotify()->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::MergeFrom(from.quitnotify());
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_kicknotify()->::qihoo::protocol::chatroom::KickMemberNotify::MergeFrom(from.kicknotify());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_updatenotify()->::qihoo::protocol::chatroom::UpdateChatRoomNotify::MergeFrom(from.updatenotify());
    }
    if (cached_has_bits & 0x00000400u) {
      msgtype_ = from.msgtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMessageRequest::CopyFrom(const ChatRoomMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ChatRoomMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000401) != 0x00000401) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->propertylist())) return false;
  if (has_sender()) {
    if (!this->sender_->IsInitialized()) return false;
  }
  if (has_createnotify()) {
    if (!this->createnotify_->IsInitialized()) return false;
  }
  if (has_joinnotify()) {
    if (!this->joinnotify_->IsInitialized()) return false;
  }
  if (has_quitnotify()) {
    if (!this->quitnotify_->IsInitialized()) return false;
  }
  if (has_kicknotify()) {
    if (!this->kicknotify_->IsInitialized()) return false;
  }
  if (has_updatenotify()) {
    if (!this->updatenotify_->IsInitialized()) return false;
  }
  return true;
}

void ChatRoomMessageRequest::Swap(ChatRoomMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomMessageRequest::InternalSwap(ChatRoomMessageRequest* other) {
  propertylist_.InternalSwap(&other->propertylist_);
  roomid_.Swap(&other->roomid_);
  msgcontent_.Swap(&other->msgcontent_);
  clientparameter_.Swap(&other->clientparameter_);
  clientcache_.Swap(&other->clientcache_);
  std::swap(sender_, other->sender_);
  std::swap(createnotify_, other->createnotify_);
  std::swap(joinnotify_, other->joinnotify_);
  std::swap(quitnotify_, other->quitnotify_);
  std::swap(kicknotify_, other->kicknotify_);
  std::swap(updatenotify_, other->updatenotify_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomMessageRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomMessageRequest

// optional .qihoo.protocol.chatroom.CRUser sender = 1;
bool ChatRoomMessageRequest::has_sender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatRoomMessageRequest::set_has_sender() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatRoomMessageRequest::clear_has_sender() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatRoomMessageRequest::clear_sender() {
  if (sender_ != NULL) sender_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_sender();
}
const ::qihoo::protocol::chatroom::CRUser& ChatRoomMessageRequest::sender() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.sender)
  return sender_ != NULL ? *sender_
                         : *::qihoo::protocol::chatroom::CRUser::internal_default_instance();
}
::qihoo::protocol::chatroom::CRUser* ChatRoomMessageRequest::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) {
    sender_ = new ::qihoo::protocol::chatroom::CRUser;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.sender)
  return sender_;
}
::qihoo::protocol::chatroom::CRUser* ChatRoomMessageRequest::release_sender() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.sender)
  clear_has_sender();
  ::qihoo::protocol::chatroom::CRUser* temp = sender_;
  sender_ = NULL;
  return temp;
}
void ChatRoomMessageRequest::set_allocated_sender(::qihoo::protocol::chatroom::CRUser* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.sender)
}

// required bytes roomid = 2;
bool ChatRoomMessageRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomMessageRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomMessageRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomMessageRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& ChatRoomMessageRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
  return roomid_.GetNoArena();
}
void ChatRoomMessageRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
}
#if LANG_CXX11
void ChatRoomMessageRequest::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
}
#endif
void ChatRoomMessageRequest::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
}
void ChatRoomMessageRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
}
::std::string* ChatRoomMessageRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMessageRequest::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMessageRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.roomid)
}

// required int32 msgtype = 3;
bool ChatRoomMessageRequest::has_msgtype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ChatRoomMessageRequest::set_has_msgtype() {
  _has_bits_[0] |= 0x00000400u;
}
void ChatRoomMessageRequest::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000400u;
}
void ChatRoomMessageRequest::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
::google::protobuf::int32 ChatRoomMessageRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgtype)
  return msgtype_;
}
void ChatRoomMessageRequest::set_msgtype(::google::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgtype)
}

// optional bytes msgcontent = 4;
bool ChatRoomMessageRequest::has_msgcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomMessageRequest::set_has_msgcontent() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomMessageRequest::clear_has_msgcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomMessageRequest::clear_msgcontent() {
  msgcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgcontent();
}
const ::std::string& ChatRoomMessageRequest::msgcontent() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
  return msgcontent_.GetNoArena();
}
void ChatRoomMessageRequest::set_msgcontent(const ::std::string& value) {
  set_has_msgcontent();
  msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
}
#if LANG_CXX11
void ChatRoomMessageRequest::set_msgcontent(::std::string&& value) {
  set_has_msgcontent();
  msgcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
}
#endif
void ChatRoomMessageRequest::set_msgcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgcontent();
  msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
}
void ChatRoomMessageRequest::set_msgcontent(const void* value, size_t size) {
  set_has_msgcontent();
  msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
}
::std::string* ChatRoomMessageRequest::mutable_msgcontent() {
  set_has_msgcontent();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
  return msgcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMessageRequest::release_msgcontent() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
  clear_has_msgcontent();
  return msgcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMessageRequest::set_allocated_msgcontent(::std::string* msgcontent) {
  if (msgcontent != NULL) {
    set_has_msgcontent();
  } else {
    clear_has_msgcontent();
  }
  msgcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgcontent);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.msgcontent)
}

// optional bytes clientparameter = 5;
bool ChatRoomMessageRequest::has_clientparameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoomMessageRequest::set_has_clientparameter() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoomMessageRequest::clear_has_clientparameter() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoomMessageRequest::clear_clientparameter() {
  clientparameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientparameter();
}
const ::std::string& ChatRoomMessageRequest::clientparameter() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
  return clientparameter_.GetNoArena();
}
void ChatRoomMessageRequest::set_clientparameter(const ::std::string& value) {
  set_has_clientparameter();
  clientparameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
}
#if LANG_CXX11
void ChatRoomMessageRequest::set_clientparameter(::std::string&& value) {
  set_has_clientparameter();
  clientparameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
}
#endif
void ChatRoomMessageRequest::set_clientparameter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientparameter();
  clientparameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
}
void ChatRoomMessageRequest::set_clientparameter(const void* value, size_t size) {
  set_has_clientparameter();
  clientparameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
}
::std::string* ChatRoomMessageRequest::mutable_clientparameter() {
  set_has_clientparameter();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
  return clientparameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMessageRequest::release_clientparameter() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
  clear_has_clientparameter();
  return clientparameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMessageRequest::set_allocated_clientparameter(::std::string* clientparameter) {
  if (clientparameter != NULL) {
    set_has_clientparameter();
  } else {
    clear_has_clientparameter();
  }
  clientparameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientparameter);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientparameter)
}

// optional bytes clientcache = 6;
bool ChatRoomMessageRequest::has_clientcache() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatRoomMessageRequest::set_has_clientcache() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatRoomMessageRequest::clear_has_clientcache() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatRoomMessageRequest::clear_clientcache() {
  clientcache_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientcache();
}
const ::std::string& ChatRoomMessageRequest::clientcache() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
  return clientcache_.GetNoArena();
}
void ChatRoomMessageRequest::set_clientcache(const ::std::string& value) {
  set_has_clientcache();
  clientcache_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
}
#if LANG_CXX11
void ChatRoomMessageRequest::set_clientcache(::std::string&& value) {
  set_has_clientcache();
  clientcache_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
}
#endif
void ChatRoomMessageRequest::set_clientcache(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientcache();
  clientcache_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
}
void ChatRoomMessageRequest::set_clientcache(const void* value, size_t size) {
  set_has_clientcache();
  clientcache_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
}
::std::string* ChatRoomMessageRequest::mutable_clientcache() {
  set_has_clientcache();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
  return clientcache_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMessageRequest::release_clientcache() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
  clear_has_clientcache();
  return clientcache_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMessageRequest::set_allocated_clientcache(::std::string* clientcache) {
  if (clientcache != NULL) {
    set_has_clientcache();
  } else {
    clear_has_clientcache();
  }
  clientcache_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientcache);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.clientcache)
}

// optional .qihoo.protocol.chatroom.CreateChatRoomNotify createnotify = 7;
bool ChatRoomMessageRequest::has_createnotify() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatRoomMessageRequest::set_has_createnotify() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatRoomMessageRequest::clear_has_createnotify() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatRoomMessageRequest::clear_createnotify() {
  if (createnotify_ != NULL) createnotify_->::qihoo::protocol::chatroom::CreateChatRoomNotify::Clear();
  clear_has_createnotify();
}
const ::qihoo::protocol::chatroom::CreateChatRoomNotify& ChatRoomMessageRequest::createnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.createnotify)
  return createnotify_ != NULL ? *createnotify_
                         : *::qihoo::protocol::chatroom::CreateChatRoomNotify::internal_default_instance();
}
::qihoo::protocol::chatroom::CreateChatRoomNotify* ChatRoomMessageRequest::mutable_createnotify() {
  set_has_createnotify();
  if (createnotify_ == NULL) {
    createnotify_ = new ::qihoo::protocol::chatroom::CreateChatRoomNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.createnotify)
  return createnotify_;
}
::qihoo::protocol::chatroom::CreateChatRoomNotify* ChatRoomMessageRequest::release_createnotify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.createnotify)
  clear_has_createnotify();
  ::qihoo::protocol::chatroom::CreateChatRoomNotify* temp = createnotify_;
  createnotify_ = NULL;
  return temp;
}
void ChatRoomMessageRequest::set_allocated_createnotify(::qihoo::protocol::chatroom::CreateChatRoomNotify* createnotify) {
  delete createnotify_;
  createnotify_ = createnotify;
  if (createnotify) {
    set_has_createnotify();
  } else {
    clear_has_createnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.createnotify)
}

// optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify joinnotify = 8;
bool ChatRoomMessageRequest::has_joinnotify() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChatRoomMessageRequest::set_has_joinnotify() {
  _has_bits_[0] |= 0x00000040u;
}
void ChatRoomMessageRequest::clear_has_joinnotify() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChatRoomMessageRequest::clear_joinnotify() {
  if (joinnotify_ != NULL) joinnotify_->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::Clear();
  clear_has_joinnotify();
}
const ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify& ChatRoomMessageRequest::joinnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.joinnotify)
  return joinnotify_ != NULL ? *joinnotify_
                         : *::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::internal_default_instance();
}
::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* ChatRoomMessageRequest::mutable_joinnotify() {
  set_has_joinnotify();
  if (joinnotify_ == NULL) {
    joinnotify_ = new ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.joinnotify)
  return joinnotify_;
}
::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* ChatRoomMessageRequest::release_joinnotify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.joinnotify)
  clear_has_joinnotify();
  ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* temp = joinnotify_;
  joinnotify_ = NULL;
  return temp;
}
void ChatRoomMessageRequest::set_allocated_joinnotify(::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* joinnotify) {
  delete joinnotify_;
  joinnotify_ = joinnotify;
  if (joinnotify) {
    set_has_joinnotify();
  } else {
    clear_has_joinnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.joinnotify)
}

// optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify quitnotify = 9;
bool ChatRoomMessageRequest::has_quitnotify() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChatRoomMessageRequest::set_has_quitnotify() {
  _has_bits_[0] |= 0x00000080u;
}
void ChatRoomMessageRequest::clear_has_quitnotify() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChatRoomMessageRequest::clear_quitnotify() {
  if (quitnotify_ != NULL) quitnotify_->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::Clear();
  clear_has_quitnotify();
}
const ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify& ChatRoomMessageRequest::quitnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.quitnotify)
  return quitnotify_ != NULL ? *quitnotify_
                         : *::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::internal_default_instance();
}
::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* ChatRoomMessageRequest::mutable_quitnotify() {
  set_has_quitnotify();
  if (quitnotify_ == NULL) {
    quitnotify_ = new ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.quitnotify)
  return quitnotify_;
}
::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* ChatRoomMessageRequest::release_quitnotify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.quitnotify)
  clear_has_quitnotify();
  ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* temp = quitnotify_;
  quitnotify_ = NULL;
  return temp;
}
void ChatRoomMessageRequest::set_allocated_quitnotify(::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* quitnotify) {
  delete quitnotify_;
  quitnotify_ = quitnotify;
  if (quitnotify) {
    set_has_quitnotify();
  } else {
    clear_has_quitnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.quitnotify)
}

// optional .qihoo.protocol.chatroom.KickMemberNotify kicknotify = 10;
bool ChatRoomMessageRequest::has_kicknotify() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChatRoomMessageRequest::set_has_kicknotify() {
  _has_bits_[0] |= 0x00000100u;
}
void ChatRoomMessageRequest::clear_has_kicknotify() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChatRoomMessageRequest::clear_kicknotify() {
  if (kicknotify_ != NULL) kicknotify_->::qihoo::protocol::chatroom::KickMemberNotify::Clear();
  clear_has_kicknotify();
}
const ::qihoo::protocol::chatroom::KickMemberNotify& ChatRoomMessageRequest::kicknotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.kicknotify)
  return kicknotify_ != NULL ? *kicknotify_
                         : *::qihoo::protocol::chatroom::KickMemberNotify::internal_default_instance();
}
::qihoo::protocol::chatroom::KickMemberNotify* ChatRoomMessageRequest::mutable_kicknotify() {
  set_has_kicknotify();
  if (kicknotify_ == NULL) {
    kicknotify_ = new ::qihoo::protocol::chatroom::KickMemberNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.kicknotify)
  return kicknotify_;
}
::qihoo::protocol::chatroom::KickMemberNotify* ChatRoomMessageRequest::release_kicknotify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.kicknotify)
  clear_has_kicknotify();
  ::qihoo::protocol::chatroom::KickMemberNotify* temp = kicknotify_;
  kicknotify_ = NULL;
  return temp;
}
void ChatRoomMessageRequest::set_allocated_kicknotify(::qihoo::protocol::chatroom::KickMemberNotify* kicknotify) {
  delete kicknotify_;
  kicknotify_ = kicknotify;
  if (kicknotify) {
    set_has_kicknotify();
  } else {
    clear_has_kicknotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.kicknotify)
}

// optional .qihoo.protocol.chatroom.UpdateChatRoomNotify updatenotify = 11;
bool ChatRoomMessageRequest::has_updatenotify() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChatRoomMessageRequest::set_has_updatenotify() {
  _has_bits_[0] |= 0x00000200u;
}
void ChatRoomMessageRequest::clear_has_updatenotify() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChatRoomMessageRequest::clear_updatenotify() {
  if (updatenotify_ != NULL) updatenotify_->::qihoo::protocol::chatroom::UpdateChatRoomNotify::Clear();
  clear_has_updatenotify();
}
const ::qihoo::protocol::chatroom::UpdateChatRoomNotify& ChatRoomMessageRequest::updatenotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.updatenotify)
  return updatenotify_ != NULL ? *updatenotify_
                         : *::qihoo::protocol::chatroom::UpdateChatRoomNotify::internal_default_instance();
}
::qihoo::protocol::chatroom::UpdateChatRoomNotify* ChatRoomMessageRequest::mutable_updatenotify() {
  set_has_updatenotify();
  if (updatenotify_ == NULL) {
    updatenotify_ = new ::qihoo::protocol::chatroom::UpdateChatRoomNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.updatenotify)
  return updatenotify_;
}
::qihoo::protocol::chatroom::UpdateChatRoomNotify* ChatRoomMessageRequest::release_updatenotify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMessageRequest.updatenotify)
  clear_has_updatenotify();
  ::qihoo::protocol::chatroom::UpdateChatRoomNotify* temp = updatenotify_;
  updatenotify_ = NULL;
  return temp;
}
void ChatRoomMessageRequest::set_allocated_updatenotify(::qihoo::protocol::chatroom::UpdateChatRoomNotify* updatenotify) {
  delete updatenotify_;
  updatenotify_ = updatenotify;
  if (updatenotify) {
    set_has_updatenotify();
  } else {
    clear_has_updatenotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMessageRequest.updatenotify)
}

// repeated .qihoo.protocol.chatroom.CRPair propertylist = 12;
int ChatRoomMessageRequest::propertylist_size() const {
  return propertylist_.size();
}
void ChatRoomMessageRequest::clear_propertylist() {
  propertylist_.Clear();
}
const ::qihoo::protocol::chatroom::CRPair& ChatRoomMessageRequest::propertylist(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return propertylist_.Get(index);
}
::qihoo::protocol::chatroom::CRPair* ChatRoomMessageRequest::mutable_propertylist(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return propertylist_.Mutable(index);
}
::qihoo::protocol::chatroom::CRPair* ChatRoomMessageRequest::add_propertylist() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return propertylist_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >*
ChatRoomMessageRequest::mutable_propertylist() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return &propertylist_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::CRPair >&
ChatRoomMessageRequest::propertylist() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoomMessageRequest.propertylist)
  return propertylist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomMessageResponse::kMsgidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomMessageResponse::ChatRoomMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomMessageResponse)
}
ChatRoomMessageResponse::ChatRoomMessageResponse(const ChatRoomMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomMessageResponse)
}

void ChatRoomMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = GOOGLE_ULONGLONG(0);
}

ChatRoomMessageResponse::~ChatRoomMessageResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  SharedDtor();
}

void ChatRoomMessageResponse::SharedDtor() {
}

void ChatRoomMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMessageResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomMessageResponse& ChatRoomMessageResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomMessageResponse* ChatRoomMessageResponse::New(::google::protobuf::Arena* arena) const {
  ChatRoomMessageResponse* n = new ChatRoomMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  msgid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 msgid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  return false;
#undef DO_
}

void ChatRoomMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 msgid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomMessageResponse)
}

::google::protobuf::uint8* ChatRoomMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 msgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->msgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  return target;
}

size_t ChatRoomMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 msgid = 1;
  if (has_msgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ChatRoomMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ChatRoomMessageResponse)
    MergeFrom(*source);
  }
}

void ChatRoomMessageResponse::MergeFrom(const ChatRoomMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msgid()) {
    set_msgid(from.msgid());
  }
}

void ChatRoomMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMessageResponse::CopyFrom(const ChatRoomMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ChatRoomMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMessageResponse::IsInitialized() const {
  return true;
}

void ChatRoomMessageResponse::Swap(ChatRoomMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomMessageResponse::InternalSwap(ChatRoomMessageResponse* other) {
  std::swap(msgid_, other->msgid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomMessageResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomMessageResponse

// optional uint64 msgid = 1;
bool ChatRoomMessageResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomMessageResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomMessageResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomMessageResponse::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_msgid();
}
::google::protobuf::uint64 ChatRoomMessageResponse::msgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMessageResponse.msgid)
  return msgid_;
}
void ChatRoomMessageResponse::set_msgid(::google::protobuf::uint64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMessageResponse.msgid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomNewMsg::kRoomidFieldNumber;
const int ChatRoomNewMsg::kSenderFieldNumber;
const int ChatRoomNewMsg::kMsgtypeFieldNumber;
const int ChatRoomNewMsg::kMsgcontentFieldNumber;
const int ChatRoomNewMsg::kRegmemcountFieldNumber;
const int ChatRoomNewMsg::kMemcountFieldNumber;
const int ChatRoomNewMsg::kMsgidFieldNumber;
const int ChatRoomNewMsg::kMaxidFieldNumber;
const int ChatRoomNewMsg::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomNewMsg::ChatRoomNewMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomNewMsg)
}
ChatRoomNewMsg::ChatRoomNewMsg(const ChatRoomNewMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  msgcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgcontent()) {
    msgcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgcontent_);
  }
  if (from.has_sender()) {
    sender_ = new ::qihoo::protocol::chatroom::CRUser(*from.sender_);
  } else {
    sender_ = NULL;
  }
  ::memcpy(&msgtype_, &from.msgtype_,
    reinterpret_cast<char*>(&maxid_) -
    reinterpret_cast<char*>(&msgtype_) + sizeof(maxid_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomNewMsg)
}

void ChatRoomNewMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_, 0, reinterpret_cast<char*>(&maxid_) -
    reinterpret_cast<char*>(&sender_) + sizeof(maxid_));
}

ChatRoomNewMsg::~ChatRoomNewMsg() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomNewMsg)
  SharedDtor();
}

void ChatRoomNewMsg::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete sender_;
  }
}

void ChatRoomNewMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomNewMsg::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomNewMsg& ChatRoomNewMsg::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomNewMsg* ChatRoomNewMsg::New(::google::protobuf::Arena* arena) const {
  ChatRoomNewMsg* n = new ChatRoomNewMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomNewMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgcontent()) {
      GOOGLE_DCHECK(!msgcontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgcontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_sender()) {
      GOOGLE_DCHECK(sender_ != NULL);
      sender_->::qihoo::protocol::chatroom::CRUser::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&msgtype_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&msgtype_) + sizeof(timestamp_));
  }
  maxid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomNewMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CRUser sender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 msgtype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_msgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes msgcontent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 regmemcount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_regmemcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regmemcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 memcount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_memcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msgid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_maxid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomNewMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomNewMsg)
  return false;
#undef DO_
}

void ChatRoomNewMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.CRUser sender = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sender_, output);
  }

  // optional int32 msgtype = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgtype(), output);
  }

  // optional bytes msgcontent = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->msgcontent(), output);
  }

  // optional int32 regmemcount = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->regmemcount(), output);
  }

  // optional int32 memcount = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->memcount(), output);
  }

  // optional uint32 msgid = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->msgid(), output);
  }

  // optional uint32 maxid = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxid(), output);
  }

  // optional uint64 timestamp = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomNewMsg)
}

::google::protobuf::uint8* ChatRoomNewMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.CRUser sender = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sender_, deterministic, target);
  }

  // optional int32 msgtype = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgtype(), target);
  }

  // optional bytes msgcontent = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msgcontent(), target);
  }

  // optional int32 regmemcount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->regmemcount(), target);
  }

  // optional int32 memcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->memcount(), target);
  }

  // optional uint32 msgid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->msgid(), target);
  }

  // optional uint32 maxid = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxid(), target);
  }

  // optional uint64 timestamp = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomNewMsg)
  return target;
}

size_t ChatRoomNewMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional bytes msgcontent = 4;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgcontent());
    }

    // optional .qihoo.protocol.chatroom.CRUser sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sender_);
    }

    // optional int32 msgtype = 3;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgtype());
    }

    // optional int32 regmemcount = 5;
    if (has_regmemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regmemcount());
    }

    // optional int32 memcount = 6;
    if (has_memcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memcount());
    }

    // optional uint32 msgid = 7;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional uint64 timestamp = 9;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  // optional uint32 maxid = 8;
  if (has_maxid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomNewMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomNewMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomNewMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ChatRoomNewMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ChatRoomNewMsg)
    MergeFrom(*source);
  }
}

void ChatRoomNewMsg::MergeFrom(const ChatRoomNewMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msgcontent();
      msgcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgcontent_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sender()->::qihoo::protocol::chatroom::CRUser::MergeFrom(from.sender());
    }
    if (cached_has_bits & 0x00000008u) {
      msgtype_ = from.msgtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      regmemcount_ = from.regmemcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      memcount_ = from.memcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_maxid(from.maxid());
  }
}

void ChatRoomNewMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomNewMsg::CopyFrom(const ChatRoomNewMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ChatRoomNewMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomNewMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_sender()) {
    if (!this->sender_->IsInitialized()) return false;
  }
  return true;
}

void ChatRoomNewMsg::Swap(ChatRoomNewMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomNewMsg::InternalSwap(ChatRoomNewMsg* other) {
  roomid_.Swap(&other->roomid_);
  msgcontent_.Swap(&other->msgcontent_);
  std::swap(sender_, other->sender_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(regmemcount_, other->regmemcount_);
  std::swap(memcount_, other->memcount_);
  std::swap(msgid_, other->msgid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(maxid_, other->maxid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomNewMsg::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomNewMsg

// required bytes roomid = 1;
bool ChatRoomNewMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomNewMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomNewMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomNewMsg::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& ChatRoomNewMsg::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
  return roomid_.GetNoArena();
}
void ChatRoomNewMsg::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
}
#if LANG_CXX11
void ChatRoomNewMsg::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
}
#endif
void ChatRoomNewMsg::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
}
void ChatRoomNewMsg::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
}
::std::string* ChatRoomNewMsg::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomNewMsg::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomNewMsg::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomNewMsg.roomid)
}

// optional .qihoo.protocol.chatroom.CRUser sender = 2;
bool ChatRoomNewMsg::has_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoomNewMsg::set_has_sender() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoomNewMsg::clear_has_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoomNewMsg::clear_sender() {
  if (sender_ != NULL) sender_->::qihoo::protocol::chatroom::CRUser::Clear();
  clear_has_sender();
}
const ::qihoo::protocol::chatroom::CRUser& ChatRoomNewMsg::sender() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.sender)
  return sender_ != NULL ? *sender_
                         : *::qihoo::protocol::chatroom::CRUser::internal_default_instance();
}
::qihoo::protocol::chatroom::CRUser* ChatRoomNewMsg::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) {
    sender_ = new ::qihoo::protocol::chatroom::CRUser;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomNewMsg.sender)
  return sender_;
}
::qihoo::protocol::chatroom::CRUser* ChatRoomNewMsg::release_sender() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomNewMsg.sender)
  clear_has_sender();
  ::qihoo::protocol::chatroom::CRUser* temp = sender_;
  sender_ = NULL;
  return temp;
}
void ChatRoomNewMsg::set_allocated_sender(::qihoo::protocol::chatroom::CRUser* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomNewMsg.sender)
}

// optional int32 msgtype = 3;
bool ChatRoomNewMsg::has_msgtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatRoomNewMsg::set_has_msgtype() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatRoomNewMsg::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatRoomNewMsg::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
::google::protobuf::int32 ChatRoomNewMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.msgtype)
  return msgtype_;
}
void ChatRoomNewMsg::set_msgtype(::google::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.msgtype)
}

// optional bytes msgcontent = 4;
bool ChatRoomNewMsg::has_msgcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomNewMsg::set_has_msgcontent() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomNewMsg::clear_has_msgcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomNewMsg::clear_msgcontent() {
  msgcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgcontent();
}
const ::std::string& ChatRoomNewMsg::msgcontent() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
  return msgcontent_.GetNoArena();
}
void ChatRoomNewMsg::set_msgcontent(const ::std::string& value) {
  set_has_msgcontent();
  msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
}
#if LANG_CXX11
void ChatRoomNewMsg::set_msgcontent(::std::string&& value) {
  set_has_msgcontent();
  msgcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
}
#endif
void ChatRoomNewMsg::set_msgcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgcontent();
  msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
}
void ChatRoomNewMsg::set_msgcontent(const void* value, size_t size) {
  set_has_msgcontent();
  msgcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
}
::std::string* ChatRoomNewMsg::mutable_msgcontent() {
  set_has_msgcontent();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
  return msgcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomNewMsg::release_msgcontent() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
  clear_has_msgcontent();
  return msgcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomNewMsg::set_allocated_msgcontent(::std::string* msgcontent) {
  if (msgcontent != NULL) {
    set_has_msgcontent();
  } else {
    clear_has_msgcontent();
  }
  msgcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgcontent);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomNewMsg.msgcontent)
}

// optional int32 regmemcount = 5;
bool ChatRoomNewMsg::has_regmemcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatRoomNewMsg::set_has_regmemcount() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatRoomNewMsg::clear_has_regmemcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatRoomNewMsg::clear_regmemcount() {
  regmemcount_ = 0;
  clear_has_regmemcount();
}
::google::protobuf::int32 ChatRoomNewMsg::regmemcount() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.regmemcount)
  return regmemcount_;
}
void ChatRoomNewMsg::set_regmemcount(::google::protobuf::int32 value) {
  set_has_regmemcount();
  regmemcount_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.regmemcount)
}

// optional int32 memcount = 6;
bool ChatRoomNewMsg::has_memcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatRoomNewMsg::set_has_memcount() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatRoomNewMsg::clear_has_memcount() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatRoomNewMsg::clear_memcount() {
  memcount_ = 0;
  clear_has_memcount();
}
::google::protobuf::int32 ChatRoomNewMsg::memcount() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.memcount)
  return memcount_;
}
void ChatRoomNewMsg::set_memcount(::google::protobuf::int32 value) {
  set_has_memcount();
  memcount_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.memcount)
}

// optional uint32 msgid = 7;
bool ChatRoomNewMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChatRoomNewMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000040u;
}
void ChatRoomNewMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChatRoomNewMsg::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
::google::protobuf::uint32 ChatRoomNewMsg::msgid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.msgid)
  return msgid_;
}
void ChatRoomNewMsg::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.msgid)
}

// optional uint32 maxid = 8;
bool ChatRoomNewMsg::has_maxid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChatRoomNewMsg::set_has_maxid() {
  _has_bits_[0] |= 0x00000100u;
}
void ChatRoomNewMsg::clear_has_maxid() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChatRoomNewMsg::clear_maxid() {
  maxid_ = 0u;
  clear_has_maxid();
}
::google::protobuf::uint32 ChatRoomNewMsg::maxid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.maxid)
  return maxid_;
}
void ChatRoomNewMsg::set_maxid(::google::protobuf::uint32 value) {
  set_has_maxid();
  maxid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.maxid)
}

// optional uint64 timestamp = 9;
bool ChatRoomNewMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChatRoomNewMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
void ChatRoomNewMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChatRoomNewMsg::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 ChatRoomNewMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomNewMsg.timestamp)
  return timestamp_;
}
void ChatRoomNewMsg::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomNewMsg.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomErrorMsg::kRoomidFieldNumber;
const int ChatRoomErrorMsg::kClientsnFieldNumber;
const int ChatRoomErrorMsg::kErrorcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomErrorMsg::ChatRoomErrorMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomErrorMsg)
}
ChatRoomErrorMsg::ChatRoomErrorMsg(const ChatRoomErrorMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  ::memcpy(&clientsn_, &from.clientsn_,
    reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&clientsn_) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomErrorMsg)
}

void ChatRoomErrorMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientsn_, 0, reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&clientsn_) + sizeof(errorcode_));
}

ChatRoomErrorMsg::~ChatRoomErrorMsg() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  SharedDtor();
}

void ChatRoomErrorMsg::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatRoomErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomErrorMsg::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomErrorMsg& ChatRoomErrorMsg::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomErrorMsg* ChatRoomErrorMsg::New(::google::protobuf::Arena* arena) const {
  ChatRoomErrorMsg* n = new ChatRoomErrorMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomErrorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  if (has_roomid()) {
    GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*roomid_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&clientsn_, 0, reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&clientsn_) + sizeof(errorcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 clientsn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clientsn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientsn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 errorcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_errorcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  return false;
#undef DO_
}

void ChatRoomErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // required uint64 clientsn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clientsn(), output);
  }

  // optional int32 errorcode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomErrorMsg)
}

::google::protobuf::uint8* ChatRoomErrorMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // required uint64 clientsn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clientsn(), target);
  }

  // optional int32 errorcode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  return target;
}

size_t ChatRoomErrorMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  size_t total_size = 0;

  if (has_roomid()) {
    // required bytes roomid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }

  if (has_clientsn()) {
    // required uint64 clientsn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clientsn());
  }

  return total_size;
}
size_t ChatRoomErrorMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes roomid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());

    // required uint64 clientsn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clientsn());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 errorcode = 3;
  if (has_errorcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomErrorMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomErrorMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ChatRoomErrorMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ChatRoomErrorMsg)
    MergeFrom(*source);
  }
}

void ChatRoomErrorMsg::MergeFrom(const ChatRoomErrorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      clientsn_ = from.clientsn_;
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomErrorMsg::CopyFrom(const ChatRoomErrorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ChatRoomErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomErrorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ChatRoomErrorMsg::Swap(ChatRoomErrorMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomErrorMsg::InternalSwap(ChatRoomErrorMsg* other) {
  roomid_.Swap(&other->roomid_);
  std::swap(clientsn_, other->clientsn_);
  std::swap(errorcode_, other->errorcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomErrorMsg::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomErrorMsg

// required bytes roomid = 1;
bool ChatRoomErrorMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomErrorMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomErrorMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomErrorMsg::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& ChatRoomErrorMsg::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
  return roomid_.GetNoArena();
}
void ChatRoomErrorMsg::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
}
#if LANG_CXX11
void ChatRoomErrorMsg::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
}
#endif
void ChatRoomErrorMsg::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
}
void ChatRoomErrorMsg::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
}
::std::string* ChatRoomErrorMsg::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomErrorMsg::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomErrorMsg::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomErrorMsg.roomid)
}

// required uint64 clientsn = 2;
bool ChatRoomErrorMsg::has_clientsn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomErrorMsg::set_has_clientsn() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomErrorMsg::clear_has_clientsn() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomErrorMsg::clear_clientsn() {
  clientsn_ = GOOGLE_ULONGLONG(0);
  clear_has_clientsn();
}
::google::protobuf::uint64 ChatRoomErrorMsg::clientsn() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomErrorMsg.clientsn)
  return clientsn_;
}
void ChatRoomErrorMsg::set_clientsn(::google::protobuf::uint64 value) {
  set_has_clientsn();
  clientsn_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomErrorMsg.clientsn)
}

// optional int32 errorcode = 3;
bool ChatRoomErrorMsg::has_errorcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoomErrorMsg::set_has_errorcode() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoomErrorMsg::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoomErrorMsg::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
::google::protobuf::int32 ChatRoomErrorMsg::errorcode() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomErrorMsg.errorcode)
  return errorcode_;
}
void ChatRoomErrorMsg::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomErrorMsg.errorcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomMNotify::kTypeFieldNumber;
const int ChatRoomMNotify::kDataFieldNumber;
const int ChatRoomMNotify::kRegmemcountFieldNumber;
const int ChatRoomMNotify::kMemcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomMNotify::ChatRoomMNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomMNotify)
}
ChatRoomMNotify::ChatRoomMNotify(const ChatRoomMNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&memcount_) -
    reinterpret_cast<char*>(&type_) + sizeof(memcount_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomMNotify)
}

void ChatRoomMNotify::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&memcount_) -
    reinterpret_cast<char*>(&type_) + sizeof(memcount_));
}

ChatRoomMNotify::~ChatRoomMNotify() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomMNotify)
  SharedDtor();
}

void ChatRoomMNotify::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatRoomMNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMNotify::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomMNotify& ChatRoomMNotify::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomMNotify* ChatRoomMNotify::New(::google::protobuf::Arena* arena) const {
  ChatRoomMNotify* n = new ChatRoomMNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomMNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&memcount_) -
      reinterpret_cast<char*>(&type_) + sizeof(memcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomMNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 regmemcount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_regmemcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regmemcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 memcount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_memcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomMNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomMNotify)
  return false;
#undef DO_
}

void ChatRoomMNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional int32 regmemcount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->regmemcount(), output);
  }

  // optional int32 memcount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->memcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomMNotify)
}

::google::protobuf::uint8* ChatRoomMNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional int32 regmemcount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->regmemcount(), target);
  }

  // optional int32 memcount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->memcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomMNotify)
  return target;
}

size_t ChatRoomMNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t ChatRoomMNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional int32 regmemcount = 3;
    if (has_regmemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regmemcount());
    }

    // optional int32 memcount = 4;
    if (has_memcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomMNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomMNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ChatRoomMNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ChatRoomMNotify)
    MergeFrom(*source);
  }
}

void ChatRoomMNotify::MergeFrom(const ChatRoomMNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      regmemcount_ = from.regmemcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      memcount_ = from.memcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomMNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMNotify::CopyFrom(const ChatRoomMNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ChatRoomMNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ChatRoomMNotify::Swap(ChatRoomMNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomMNotify::InternalSwap(ChatRoomMNotify* other) {
  data_.Swap(&other->data_);
  std::swap(type_, other->type_);
  std::swap(regmemcount_, other->regmemcount_);
  std::swap(memcount_, other->memcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomMNotify::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomMNotify

// required int32 type = 1;
bool ChatRoomMNotify::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomMNotify::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomMNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomMNotify::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 ChatRoomMNotify::type() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMNotify.type)
  return type_;
}
void ChatRoomMNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMNotify.type)
}

// required bytes data = 2;
bool ChatRoomMNotify::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomMNotify::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomMNotify::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomMNotify::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& ChatRoomMNotify::data() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMNotify.data)
  return data_.GetNoArena();
}
void ChatRoomMNotify::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMNotify.data)
}
#if LANG_CXX11
void ChatRoomMNotify::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomMNotify.data)
}
#endif
void ChatRoomMNotify::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomMNotify.data)
}
void ChatRoomMNotify::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomMNotify.data)
}
::std::string* ChatRoomMNotify::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomMNotify.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMNotify::release_data() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomMNotify.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMNotify::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomMNotify.data)
}

// optional int32 regmemcount = 3;
bool ChatRoomMNotify::has_regmemcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoomMNotify::set_has_regmemcount() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoomMNotify::clear_has_regmemcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoomMNotify::clear_regmemcount() {
  regmemcount_ = 0;
  clear_has_regmemcount();
}
::google::protobuf::int32 ChatRoomMNotify::regmemcount() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMNotify.regmemcount)
  return regmemcount_;
}
void ChatRoomMNotify::set_regmemcount(::google::protobuf::int32 value) {
  set_has_regmemcount();
  regmemcount_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMNotify.regmemcount)
}

// optional int32 memcount = 4;
bool ChatRoomMNotify::has_memcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatRoomMNotify::set_has_memcount() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatRoomMNotify::clear_has_memcount() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatRoomMNotify::clear_memcount() {
  memcount_ = 0;
  clear_has_memcount();
}
::google::protobuf::int32 ChatRoomMNotify::memcount() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomMNotify.memcount)
  return memcount_;
}
void ChatRoomMNotify::set_memcount(::google::protobuf::int32 value) {
  set_has_memcount();
  memcount_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomMNotify.memcount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeRequest::kRoomidFieldNumber;
const int SubscribeRequest::kSubFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  sub_ = from.sub_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_ = false;
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubscribeRequest* SubscribeRequest::New(::google::protobuf::Arena* arena) const {
  SubscribeRequest* n = new SubscribeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.SubscribeRequest)
  if (has_roomid()) {
    GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*roomid_.UnsafeRawStringPointer())->clear();
  }
  sub_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.SubscribeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sub = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sub();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.SubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.SubscribeRequest)
  return false;
#undef DO_
}

void SubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.SubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional bool sub = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sub(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.SubscribeRequest)
}

::google::protobuf::uint8* SubscribeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.SubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional bool sub = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sub(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.SubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  // optional bool sub = 2 [default = false];
  if (has_sub()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.SubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      sub_ = from.sub_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  roomid_.Swap(&other->roomid_);
  std::swap(sub_, other->sub_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeRequest

// required bytes roomid = 1;
bool SubscribeRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubscribeRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void SubscribeRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubscribeRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& SubscribeRequest::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SubscribeRequest.roomid)
  return roomid_.GetNoArena();
}
void SubscribeRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SubscribeRequest.roomid)
}
#if LANG_CXX11
void SubscribeRequest::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.SubscribeRequest.roomid)
}
#endif
void SubscribeRequest::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.SubscribeRequest.roomid)
}
void SubscribeRequest::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.SubscribeRequest.roomid)
}
::std::string* SubscribeRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.SubscribeRequest.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeRequest::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.SubscribeRequest.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.SubscribeRequest.roomid)
}

// optional bool sub = 2 [default = false];
bool SubscribeRequest::has_sub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubscribeRequest::set_has_sub() {
  _has_bits_[0] |= 0x00000002u;
}
void SubscribeRequest::clear_has_sub() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubscribeRequest::clear_sub() {
  sub_ = false;
  clear_has_sub();
}
bool SubscribeRequest::sub() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SubscribeRequest.sub)
  return sub_;
}
void SubscribeRequest::set_sub(bool value) {
  set_has_sub();
  sub_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SubscribeRequest.sub)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeResponse::kRoomidFieldNumber;
const int SubscribeResponse::kSubFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeResponse::SubscribeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.SubscribeResponse)
}
SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  sub_ = from.sub_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_ = false;
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeResponse::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscribeResponse& SubscribeResponse::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubscribeResponse* SubscribeResponse::New(::google::protobuf::Arena* arena) const {
  SubscribeResponse* n = new SubscribeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.SubscribeResponse)
  if (has_roomid()) {
    GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*roomid_.UnsafeRawStringPointer())->clear();
  }
  sub_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubscribeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.SubscribeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sub = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sub();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.SubscribeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.SubscribeResponse)
  return false;
#undef DO_
}

void SubscribeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.SubscribeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional bool sub = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sub(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.SubscribeResponse)
}

::google::protobuf::uint8* SubscribeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.SubscribeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional bool sub = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sub(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.SubscribeResponse)
  return target;
}

size_t SubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.SubscribeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  // optional bool sub = 2 [default = false];
  if (has_sub()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.SubscribeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.SubscribeResponse)
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      sub_ = from.sub_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscribeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubscribeResponse::Swap(SubscribeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeResponse::InternalSwap(SubscribeResponse* other) {
  roomid_.Swap(&other->roomid_);
  std::swap(sub_, other->sub_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeResponse::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeResponse

// required bytes roomid = 1;
bool SubscribeResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubscribeResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void SubscribeResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubscribeResponse::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& SubscribeResponse::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SubscribeResponse.roomid)
  return roomid_.GetNoArena();
}
void SubscribeResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SubscribeResponse.roomid)
}
#if LANG_CXX11
void SubscribeResponse::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.SubscribeResponse.roomid)
}
#endif
void SubscribeResponse::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.SubscribeResponse.roomid)
}
void SubscribeResponse::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.SubscribeResponse.roomid)
}
::std::string* SubscribeResponse::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.SubscribeResponse.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubscribeResponse::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.SubscribeResponse.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubscribeResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.SubscribeResponse.roomid)
}

// optional bool sub = 2 [default = false];
bool SubscribeResponse::has_sub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubscribeResponse::set_has_sub() {
  _has_bits_[0] |= 0x00000002u;
}
void SubscribeResponse::clear_has_sub() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubscribeResponse::clear_sub() {
  sub_ = false;
  clear_has_sub();
}
bool SubscribeResponse::sub() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.SubscribeResponse.sub)
  return sub_;
}
void SubscribeResponse::set_sub(bool value) {
  set_has_sub();
  sub_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.SubscribeResponse.sub)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomUpToServer::kPayloadtypeFieldNumber;
const int ChatRoomUpToServer::kCreatechatroomreqFieldNumber;
const int ChatRoomUpToServer::kGetchatroominforeqFieldNumber;
const int ChatRoomUpToServer::kApplyjoinchatroomreqFieldNumber;
const int ChatRoomUpToServer::kQuitchatroomreqFieldNumber;
const int ChatRoomUpToServer::kUpdatechatroomreqFieldNumber;
const int ChatRoomUpToServer::kKickmemberreqFieldNumber;
const int ChatRoomUpToServer::kQuerychatroomidreqFieldNumber;
const int ChatRoomUpToServer::kUpdategameidreqFieldNumber;
const int ChatRoomUpToServer::kQueryallgameroomreqFieldNumber;
const int ChatRoomUpToServer::kChatroommessagereqFieldNumber;
const int ChatRoomUpToServer::kCreateroomsFieldNumber;
const int ChatRoomUpToServer::kSyncroomtodbaFieldNumber;
const int ChatRoomUpToServer::kSubreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomUpToServer::ChatRoomUpToServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomUpToServer)
}
ChatRoomUpToServer::ChatRoomUpToServer(const ChatRoomUpToServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_createchatroomreq()) {
    createchatroomreq_ = new ::qihoo::protocol::chatroom::CreateChatRoomRequest(*from.createchatroomreq_);
  } else {
    createchatroomreq_ = NULL;
  }
  if (from.has_getchatroominforeq()) {
    getchatroominforeq_ = new ::qihoo::protocol::chatroom::GetChatRoomDetailRequest(*from.getchatroominforeq_);
  } else {
    getchatroominforeq_ = NULL;
  }
  if (from.has_applyjoinchatroomreq()) {
    applyjoinchatroomreq_ = new ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest(*from.applyjoinchatroomreq_);
  } else {
    applyjoinchatroomreq_ = NULL;
  }
  if (from.has_quitchatroomreq()) {
    quitchatroomreq_ = new ::qihoo::protocol::chatroom::QuitChatRoomRequest(*from.quitchatroomreq_);
  } else {
    quitchatroomreq_ = NULL;
  }
  if (from.has_updatechatroomreq()) {
    updatechatroomreq_ = new ::qihoo::protocol::chatroom::UpdateChatRoomRequest(*from.updatechatroomreq_);
  } else {
    updatechatroomreq_ = NULL;
  }
  if (from.has_kickmemberreq()) {
    kickmemberreq_ = new ::qihoo::protocol::chatroom::KickChatRoomMemberRequest(*from.kickmemberreq_);
  } else {
    kickmemberreq_ = NULL;
  }
  if (from.has_querychatroomidreq()) {
    querychatroomidreq_ = new ::qihoo::protocol::chatroom::QueryChatRoomIDRequest(*from.querychatroomidreq_);
  } else {
    querychatroomidreq_ = NULL;
  }
  if (from.has_updategameidreq()) {
    updategameidreq_ = new ::qihoo::protocol::chatroom::UpdateRoomIDRequest(*from.updategameidreq_);
  } else {
    updategameidreq_ = NULL;
  }
  if (from.has_queryallgameroomreq()) {
    queryallgameroomreq_ = new ::qihoo::protocol::chatroom::QueryAllGameRoomRequest(*from.queryallgameroomreq_);
  } else {
    queryallgameroomreq_ = NULL;
  }
  if (from.has_chatroommessagereq()) {
    chatroommessagereq_ = new ::qihoo::protocol::chatroom::ChatRoomMessageRequest(*from.chatroommessagereq_);
  } else {
    chatroommessagereq_ = NULL;
  }
  if (from.has_createrooms()) {
    createrooms_ = new ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest(*from.createrooms_);
  } else {
    createrooms_ = NULL;
  }
  if (from.has_syncroomtodba()) {
    syncroomtodba_ = new ::qihoo::protocol::chatroom::SyncRoomToDBRequest(*from.syncroomtodba_);
  } else {
    syncroomtodba_ = NULL;
  }
  if (from.has_subreq()) {
    subreq_ = new ::qihoo::protocol::chatroom::SubscribeRequest(*from.subreq_);
  } else {
    subreq_ = NULL;
  }
  payloadtype_ = from.payloadtype_;
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomUpToServer)
}

void ChatRoomUpToServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&createchatroomreq_, 0, reinterpret_cast<char*>(&payloadtype_) -
    reinterpret_cast<char*>(&createchatroomreq_) + sizeof(payloadtype_));
}

ChatRoomUpToServer::~ChatRoomUpToServer() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomUpToServer)
  SharedDtor();
}

void ChatRoomUpToServer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete createchatroomreq_;
  }
  if (this != internal_default_instance()) {
    delete getchatroominforeq_;
  }
  if (this != internal_default_instance()) {
    delete applyjoinchatroomreq_;
  }
  if (this != internal_default_instance()) {
    delete quitchatroomreq_;
  }
  if (this != internal_default_instance()) {
    delete updatechatroomreq_;
  }
  if (this != internal_default_instance()) {
    delete kickmemberreq_;
  }
  if (this != internal_default_instance()) {
    delete querychatroomidreq_;
  }
  if (this != internal_default_instance()) {
    delete updategameidreq_;
  }
  if (this != internal_default_instance()) {
    delete queryallgameroomreq_;
  }
  if (this != internal_default_instance()) {
    delete chatroommessagereq_;
  }
  if (this != internal_default_instance()) {
    delete createrooms_;
  }
  if (this != internal_default_instance()) {
    delete syncroomtodba_;
  }
  if (this != internal_default_instance()) {
    delete subreq_;
  }
}

void ChatRoomUpToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomUpToServer::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomUpToServer& ChatRoomUpToServer::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomUpToServer* ChatRoomUpToServer::New(::google::protobuf::Arena* arena) const {
  ChatRoomUpToServer* n = new ChatRoomUpToServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomUpToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_createchatroomreq()) {
      GOOGLE_DCHECK(createchatroomreq_ != NULL);
      createchatroomreq_->::qihoo::protocol::chatroom::CreateChatRoomRequest::Clear();
    }
    if (has_getchatroominforeq()) {
      GOOGLE_DCHECK(getchatroominforeq_ != NULL);
      getchatroominforeq_->::qihoo::protocol::chatroom::GetChatRoomDetailRequest::Clear();
    }
    if (has_applyjoinchatroomreq()) {
      GOOGLE_DCHECK(applyjoinchatroomreq_ != NULL);
      applyjoinchatroomreq_->::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest::Clear();
    }
    if (has_quitchatroomreq()) {
      GOOGLE_DCHECK(quitchatroomreq_ != NULL);
      quitchatroomreq_->::qihoo::protocol::chatroom::QuitChatRoomRequest::Clear();
    }
    if (has_updatechatroomreq()) {
      GOOGLE_DCHECK(updatechatroomreq_ != NULL);
      updatechatroomreq_->::qihoo::protocol::chatroom::UpdateChatRoomRequest::Clear();
    }
    if (has_kickmemberreq()) {
      GOOGLE_DCHECK(kickmemberreq_ != NULL);
      kickmemberreq_->::qihoo::protocol::chatroom::KickChatRoomMemberRequest::Clear();
    }
    if (has_querychatroomidreq()) {
      GOOGLE_DCHECK(querychatroomidreq_ != NULL);
      querychatroomidreq_->::qihoo::protocol::chatroom::QueryChatRoomIDRequest::Clear();
    }
    if (has_updategameidreq()) {
      GOOGLE_DCHECK(updategameidreq_ != NULL);
      updategameidreq_->::qihoo::protocol::chatroom::UpdateRoomIDRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_queryallgameroomreq()) {
      GOOGLE_DCHECK(queryallgameroomreq_ != NULL);
      queryallgameroomreq_->::qihoo::protocol::chatroom::QueryAllGameRoomRequest::Clear();
    }
    if (has_chatroommessagereq()) {
      GOOGLE_DCHECK(chatroommessagereq_ != NULL);
      chatroommessagereq_->::qihoo::protocol::chatroom::ChatRoomMessageRequest::Clear();
    }
    if (has_createrooms()) {
      GOOGLE_DCHECK(createrooms_ != NULL);
      createrooms_->::qihoo::protocol::chatroom::CreateMultiChatRoomRequest::Clear();
    }
    if (has_syncroomtodba()) {
      GOOGLE_DCHECK(syncroomtodba_ != NULL);
      syncroomtodba_->::qihoo::protocol::chatroom::SyncRoomToDBRequest::Clear();
    }
    if (has_subreq()) {
      GOOGLE_DCHECK(subreq_ != NULL);
      subreq_->::qihoo::protocol::chatroom::SubscribeRequest::Clear();
    }
  }
  payloadtype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomUpToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 payloadtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_payloadtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payloadtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createchatroomreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getchatroominforeq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applyjoinchatroomreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitchatroomreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatechatroomreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickmemberreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querychatroomidreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updategameidreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryallgameroomreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroommessagereq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createrooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncroomtodba()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomUpToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomUpToServer)
  return false;
#undef DO_
}

void ChatRoomUpToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 payloadtype = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->payloadtype(), output);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->createchatroomreq_, output);
  }

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->getchatroominforeq_, output);
  }

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->applyjoinchatroomreq_, output);
  }

  // optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->quitchatroomreq_, output);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->updatechatroomreq_, output);
  }

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->kickmemberreq_, output);
  }

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->querychatroomidreq_, output);
  }

  // optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->updategameidreq_, output);
  }

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->queryallgameroomreq_, output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->chatroommessagereq_, output);
  }

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->createrooms_, output);
  }

  // optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->syncroomtodba_, output);
  }

  // optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->subreq_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomUpToServer)
}

::google::protobuf::uint8* ChatRoomUpToServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 payloadtype = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->payloadtype(), target);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->createchatroomreq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->getchatroominforeq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->applyjoinchatroomreq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->quitchatroomreq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->updatechatroomreq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->kickmemberreq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->querychatroomidreq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->updategameidreq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->queryallgameroomreq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->chatroommessagereq_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->createrooms_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->syncroomtodba_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->subreq_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomUpToServer)
  return target;
}

size_t ChatRoomUpToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 payloadtype = 1;
  if (has_payloadtype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->payloadtype());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
    if (has_createchatroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->createchatroomreq_);
    }

    // optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
    if (has_getchatroominforeq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getchatroominforeq_);
    }

    // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
    if (has_applyjoinchatroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->applyjoinchatroomreq_);
    }

    // optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
    if (has_quitchatroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->quitchatroomreq_);
    }

    // optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
    if (has_updatechatroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->updatechatroomreq_);
    }

    // optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
    if (has_kickmemberreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kickmemberreq_);
    }

    // optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
    if (has_querychatroomidreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->querychatroomidreq_);
    }

    // optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
    if (has_updategameidreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->updategameidreq_);
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
    if (has_queryallgameroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->queryallgameroomreq_);
    }

    // optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
    if (has_chatroommessagereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chatroommessagereq_);
    }

    // optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
    if (has_createrooms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->createrooms_);
    }

    // optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
    if (has_syncroomtodba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->syncroomtodba_);
    }

    // optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
    if (has_subreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subreq_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomUpToServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomUpToServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomUpToServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ChatRoomUpToServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ChatRoomUpToServer)
    MergeFrom(*source);
  }
}

void ChatRoomUpToServer::MergeFrom(const ChatRoomUpToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_createchatroomreq()->::qihoo::protocol::chatroom::CreateChatRoomRequest::MergeFrom(from.createchatroomreq());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_getchatroominforeq()->::qihoo::protocol::chatroom::GetChatRoomDetailRequest::MergeFrom(from.getchatroominforeq());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_applyjoinchatroomreq()->::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest::MergeFrom(from.applyjoinchatroomreq());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_quitchatroomreq()->::qihoo::protocol::chatroom::QuitChatRoomRequest::MergeFrom(from.quitchatroomreq());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_updatechatroomreq()->::qihoo::protocol::chatroom::UpdateChatRoomRequest::MergeFrom(from.updatechatroomreq());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_kickmemberreq()->::qihoo::protocol::chatroom::KickChatRoomMemberRequest::MergeFrom(from.kickmemberreq());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_querychatroomidreq()->::qihoo::protocol::chatroom::QueryChatRoomIDRequest::MergeFrom(from.querychatroomidreq());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_updategameidreq()->::qihoo::protocol::chatroom::UpdateRoomIDRequest::MergeFrom(from.updategameidreq());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_queryallgameroomreq()->::qihoo::protocol::chatroom::QueryAllGameRoomRequest::MergeFrom(from.queryallgameroomreq());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_chatroommessagereq()->::qihoo::protocol::chatroom::ChatRoomMessageRequest::MergeFrom(from.chatroommessagereq());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_createrooms()->::qihoo::protocol::chatroom::CreateMultiChatRoomRequest::MergeFrom(from.createrooms());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_syncroomtodba()->::qihoo::protocol::chatroom::SyncRoomToDBRequest::MergeFrom(from.syncroomtodba());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_subreq()->::qihoo::protocol::chatroom::SubscribeRequest::MergeFrom(from.subreq());
    }
    if (cached_has_bits & 0x00002000u) {
      payloadtype_ = from.payloadtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomUpToServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomUpToServer::CopyFrom(const ChatRoomUpToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ChatRoomUpToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomUpToServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002000) != 0x00002000) return false;
  if (has_createchatroomreq()) {
    if (!this->createchatroomreq_->IsInitialized()) return false;
  }
  if (has_getchatroominforeq()) {
    if (!this->getchatroominforeq_->IsInitialized()) return false;
  }
  if (has_applyjoinchatroomreq()) {
    if (!this->applyjoinchatroomreq_->IsInitialized()) return false;
  }
  if (has_quitchatroomreq()) {
    if (!this->quitchatroomreq_->IsInitialized()) return false;
  }
  if (has_updatechatroomreq()) {
    if (!this->updatechatroomreq_->IsInitialized()) return false;
  }
  if (has_kickmemberreq()) {
    if (!this->kickmemberreq_->IsInitialized()) return false;
  }
  if (has_querychatroomidreq()) {
    if (!this->querychatroomidreq_->IsInitialized()) return false;
  }
  if (has_updategameidreq()) {
    if (!this->updategameidreq_->IsInitialized()) return false;
  }
  if (has_chatroommessagereq()) {
    if (!this->chatroommessagereq_->IsInitialized()) return false;
  }
  if (has_createrooms()) {
    if (!this->createrooms_->IsInitialized()) return false;
  }
  if (has_syncroomtodba()) {
    if (!this->syncroomtodba_->IsInitialized()) return false;
  }
  if (has_subreq()) {
    if (!this->subreq_->IsInitialized()) return false;
  }
  return true;
}

void ChatRoomUpToServer::Swap(ChatRoomUpToServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomUpToServer::InternalSwap(ChatRoomUpToServer* other) {
  std::swap(createchatroomreq_, other->createchatroomreq_);
  std::swap(getchatroominforeq_, other->getchatroominforeq_);
  std::swap(applyjoinchatroomreq_, other->applyjoinchatroomreq_);
  std::swap(quitchatroomreq_, other->quitchatroomreq_);
  std::swap(updatechatroomreq_, other->updatechatroomreq_);
  std::swap(kickmemberreq_, other->kickmemberreq_);
  std::swap(querychatroomidreq_, other->querychatroomidreq_);
  std::swap(updategameidreq_, other->updategameidreq_);
  std::swap(queryallgameroomreq_, other->queryallgameroomreq_);
  std::swap(chatroommessagereq_, other->chatroommessagereq_);
  std::swap(createrooms_, other->createrooms_);
  std::swap(syncroomtodba_, other->syncroomtodba_);
  std::swap(subreq_, other->subreq_);
  std::swap(payloadtype_, other->payloadtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomUpToServer::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomUpToServer

// required uint32 payloadtype = 1;
bool ChatRoomUpToServer::has_payloadtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ChatRoomUpToServer::set_has_payloadtype() {
  _has_bits_[0] |= 0x00002000u;
}
void ChatRoomUpToServer::clear_has_payloadtype() {
  _has_bits_[0] &= ~0x00002000u;
}
void ChatRoomUpToServer::clear_payloadtype() {
  payloadtype_ = 0u;
  clear_has_payloadtype();
}
::google::protobuf::uint32 ChatRoomUpToServer::payloadtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.payloadtype)
  return payloadtype_;
}
void ChatRoomUpToServer::set_payloadtype(::google::protobuf::uint32 value) {
  set_has_payloadtype();
  payloadtype_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomUpToServer.payloadtype)
}

// optional .qihoo.protocol.chatroom.CreateChatRoomRequest createchatroomreq = 2;
bool ChatRoomUpToServer::has_createchatroomreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomUpToServer::set_has_createchatroomreq() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomUpToServer::clear_has_createchatroomreq() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomUpToServer::clear_createchatroomreq() {
  if (createchatroomreq_ != NULL) createchatroomreq_->::qihoo::protocol::chatroom::CreateChatRoomRequest::Clear();
  clear_has_createchatroomreq();
}
const ::qihoo::protocol::chatroom::CreateChatRoomRequest& ChatRoomUpToServer::createchatroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.createchatroomreq)
  return createchatroomreq_ != NULL ? *createchatroomreq_
                         : *::qihoo::protocol::chatroom::CreateChatRoomRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::CreateChatRoomRequest* ChatRoomUpToServer::mutable_createchatroomreq() {
  set_has_createchatroomreq();
  if (createchatroomreq_ == NULL) {
    createchatroomreq_ = new ::qihoo::protocol::chatroom::CreateChatRoomRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.createchatroomreq)
  return createchatroomreq_;
}
::qihoo::protocol::chatroom::CreateChatRoomRequest* ChatRoomUpToServer::release_createchatroomreq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.createchatroomreq)
  clear_has_createchatroomreq();
  ::qihoo::protocol::chatroom::CreateChatRoomRequest* temp = createchatroomreq_;
  createchatroomreq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_createchatroomreq(::qihoo::protocol::chatroom::CreateChatRoomRequest* createchatroomreq) {
  delete createchatroomreq_;
  createchatroomreq_ = createchatroomreq;
  if (createchatroomreq) {
    set_has_createchatroomreq();
  } else {
    clear_has_createchatroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.createchatroomreq)
}

// optional .qihoo.protocol.chatroom.GetChatRoomDetailRequest getchatroominforeq = 3;
bool ChatRoomUpToServer::has_getchatroominforeq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomUpToServer::set_has_getchatroominforeq() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomUpToServer::clear_has_getchatroominforeq() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomUpToServer::clear_getchatroominforeq() {
  if (getchatroominforeq_ != NULL) getchatroominforeq_->::qihoo::protocol::chatroom::GetChatRoomDetailRequest::Clear();
  clear_has_getchatroominforeq();
}
const ::qihoo::protocol::chatroom::GetChatRoomDetailRequest& ChatRoomUpToServer::getchatroominforeq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.getchatroominforeq)
  return getchatroominforeq_ != NULL ? *getchatroominforeq_
                         : *::qihoo::protocol::chatroom::GetChatRoomDetailRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::GetChatRoomDetailRequest* ChatRoomUpToServer::mutable_getchatroominforeq() {
  set_has_getchatroominforeq();
  if (getchatroominforeq_ == NULL) {
    getchatroominforeq_ = new ::qihoo::protocol::chatroom::GetChatRoomDetailRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.getchatroominforeq)
  return getchatroominforeq_;
}
::qihoo::protocol::chatroom::GetChatRoomDetailRequest* ChatRoomUpToServer::release_getchatroominforeq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.getchatroominforeq)
  clear_has_getchatroominforeq();
  ::qihoo::protocol::chatroom::GetChatRoomDetailRequest* temp = getchatroominforeq_;
  getchatroominforeq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_getchatroominforeq(::qihoo::protocol::chatroom::GetChatRoomDetailRequest* getchatroominforeq) {
  delete getchatroominforeq_;
  getchatroominforeq_ = getchatroominforeq;
  if (getchatroominforeq) {
    set_has_getchatroominforeq();
  } else {
    clear_has_getchatroominforeq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.getchatroominforeq)
}

// optional .qihoo.protocol.chatroom.ApplyJoinChatRoomRequest applyjoinchatroomreq = 4;
bool ChatRoomUpToServer::has_applyjoinchatroomreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoomUpToServer::set_has_applyjoinchatroomreq() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoomUpToServer::clear_has_applyjoinchatroomreq() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoomUpToServer::clear_applyjoinchatroomreq() {
  if (applyjoinchatroomreq_ != NULL) applyjoinchatroomreq_->::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest::Clear();
  clear_has_applyjoinchatroomreq();
}
const ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest& ChatRoomUpToServer::applyjoinchatroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.applyjoinchatroomreq)
  return applyjoinchatroomreq_ != NULL ? *applyjoinchatroomreq_
                         : *::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* ChatRoomUpToServer::mutable_applyjoinchatroomreq() {
  set_has_applyjoinchatroomreq();
  if (applyjoinchatroomreq_ == NULL) {
    applyjoinchatroomreq_ = new ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.applyjoinchatroomreq)
  return applyjoinchatroomreq_;
}
::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* ChatRoomUpToServer::release_applyjoinchatroomreq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.applyjoinchatroomreq)
  clear_has_applyjoinchatroomreq();
  ::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* temp = applyjoinchatroomreq_;
  applyjoinchatroomreq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_applyjoinchatroomreq(::qihoo::protocol::chatroom::ApplyJoinChatRoomRequest* applyjoinchatroomreq) {
  delete applyjoinchatroomreq_;
  applyjoinchatroomreq_ = applyjoinchatroomreq;
  if (applyjoinchatroomreq) {
    set_has_applyjoinchatroomreq();
  } else {
    clear_has_applyjoinchatroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.applyjoinchatroomreq)
}

// optional .qihoo.protocol.chatroom.QuitChatRoomRequest quitchatroomreq = 5;
bool ChatRoomUpToServer::has_quitchatroomreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatRoomUpToServer::set_has_quitchatroomreq() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatRoomUpToServer::clear_has_quitchatroomreq() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatRoomUpToServer::clear_quitchatroomreq() {
  if (quitchatroomreq_ != NULL) quitchatroomreq_->::qihoo::protocol::chatroom::QuitChatRoomRequest::Clear();
  clear_has_quitchatroomreq();
}
const ::qihoo::protocol::chatroom::QuitChatRoomRequest& ChatRoomUpToServer::quitchatroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.quitchatroomreq)
  return quitchatroomreq_ != NULL ? *quitchatroomreq_
                         : *::qihoo::protocol::chatroom::QuitChatRoomRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::QuitChatRoomRequest* ChatRoomUpToServer::mutable_quitchatroomreq() {
  set_has_quitchatroomreq();
  if (quitchatroomreq_ == NULL) {
    quitchatroomreq_ = new ::qihoo::protocol::chatroom::QuitChatRoomRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.quitchatroomreq)
  return quitchatroomreq_;
}
::qihoo::protocol::chatroom::QuitChatRoomRequest* ChatRoomUpToServer::release_quitchatroomreq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.quitchatroomreq)
  clear_has_quitchatroomreq();
  ::qihoo::protocol::chatroom::QuitChatRoomRequest* temp = quitchatroomreq_;
  quitchatroomreq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_quitchatroomreq(::qihoo::protocol::chatroom::QuitChatRoomRequest* quitchatroomreq) {
  delete quitchatroomreq_;
  quitchatroomreq_ = quitchatroomreq;
  if (quitchatroomreq) {
    set_has_quitchatroomreq();
  } else {
    clear_has_quitchatroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.quitchatroomreq)
}

// optional .qihoo.protocol.chatroom.UpdateChatRoomRequest updatechatroomreq = 6;
bool ChatRoomUpToServer::has_updatechatroomreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatRoomUpToServer::set_has_updatechatroomreq() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatRoomUpToServer::clear_has_updatechatroomreq() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatRoomUpToServer::clear_updatechatroomreq() {
  if (updatechatroomreq_ != NULL) updatechatroomreq_->::qihoo::protocol::chatroom::UpdateChatRoomRequest::Clear();
  clear_has_updatechatroomreq();
}
const ::qihoo::protocol::chatroom::UpdateChatRoomRequest& ChatRoomUpToServer::updatechatroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.updatechatroomreq)
  return updatechatroomreq_ != NULL ? *updatechatroomreq_
                         : *::qihoo::protocol::chatroom::UpdateChatRoomRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::UpdateChatRoomRequest* ChatRoomUpToServer::mutable_updatechatroomreq() {
  set_has_updatechatroomreq();
  if (updatechatroomreq_ == NULL) {
    updatechatroomreq_ = new ::qihoo::protocol::chatroom::UpdateChatRoomRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.updatechatroomreq)
  return updatechatroomreq_;
}
::qihoo::protocol::chatroom::UpdateChatRoomRequest* ChatRoomUpToServer::release_updatechatroomreq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.updatechatroomreq)
  clear_has_updatechatroomreq();
  ::qihoo::protocol::chatroom::UpdateChatRoomRequest* temp = updatechatroomreq_;
  updatechatroomreq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_updatechatroomreq(::qihoo::protocol::chatroom::UpdateChatRoomRequest* updatechatroomreq) {
  delete updatechatroomreq_;
  updatechatroomreq_ = updatechatroomreq;
  if (updatechatroomreq) {
    set_has_updatechatroomreq();
  } else {
    clear_has_updatechatroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.updatechatroomreq)
}

// optional .qihoo.protocol.chatroom.KickChatRoomMemberRequest kickmemberreq = 7;
bool ChatRoomUpToServer::has_kickmemberreq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatRoomUpToServer::set_has_kickmemberreq() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatRoomUpToServer::clear_has_kickmemberreq() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatRoomUpToServer::clear_kickmemberreq() {
  if (kickmemberreq_ != NULL) kickmemberreq_->::qihoo::protocol::chatroom::KickChatRoomMemberRequest::Clear();
  clear_has_kickmemberreq();
}
const ::qihoo::protocol::chatroom::KickChatRoomMemberRequest& ChatRoomUpToServer::kickmemberreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.kickmemberreq)
  return kickmemberreq_ != NULL ? *kickmemberreq_
                         : *::qihoo::protocol::chatroom::KickChatRoomMemberRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::KickChatRoomMemberRequest* ChatRoomUpToServer::mutable_kickmemberreq() {
  set_has_kickmemberreq();
  if (kickmemberreq_ == NULL) {
    kickmemberreq_ = new ::qihoo::protocol::chatroom::KickChatRoomMemberRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.kickmemberreq)
  return kickmemberreq_;
}
::qihoo::protocol::chatroom::KickChatRoomMemberRequest* ChatRoomUpToServer::release_kickmemberreq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.kickmemberreq)
  clear_has_kickmemberreq();
  ::qihoo::protocol::chatroom::KickChatRoomMemberRequest* temp = kickmemberreq_;
  kickmemberreq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_kickmemberreq(::qihoo::protocol::chatroom::KickChatRoomMemberRequest* kickmemberreq) {
  delete kickmemberreq_;
  kickmemberreq_ = kickmemberreq;
  if (kickmemberreq) {
    set_has_kickmemberreq();
  } else {
    clear_has_kickmemberreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.kickmemberreq)
}

// optional .qihoo.protocol.chatroom.QueryChatRoomIDRequest querychatroomidreq = 8;
bool ChatRoomUpToServer::has_querychatroomidreq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChatRoomUpToServer::set_has_querychatroomidreq() {
  _has_bits_[0] |= 0x00000040u;
}
void ChatRoomUpToServer::clear_has_querychatroomidreq() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChatRoomUpToServer::clear_querychatroomidreq() {
  if (querychatroomidreq_ != NULL) querychatroomidreq_->::qihoo::protocol::chatroom::QueryChatRoomIDRequest::Clear();
  clear_has_querychatroomidreq();
}
const ::qihoo::protocol::chatroom::QueryChatRoomIDRequest& ChatRoomUpToServer::querychatroomidreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.querychatroomidreq)
  return querychatroomidreq_ != NULL ? *querychatroomidreq_
                         : *::qihoo::protocol::chatroom::QueryChatRoomIDRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::QueryChatRoomIDRequest* ChatRoomUpToServer::mutable_querychatroomidreq() {
  set_has_querychatroomidreq();
  if (querychatroomidreq_ == NULL) {
    querychatroomidreq_ = new ::qihoo::protocol::chatroom::QueryChatRoomIDRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.querychatroomidreq)
  return querychatroomidreq_;
}
::qihoo::protocol::chatroom::QueryChatRoomIDRequest* ChatRoomUpToServer::release_querychatroomidreq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.querychatroomidreq)
  clear_has_querychatroomidreq();
  ::qihoo::protocol::chatroom::QueryChatRoomIDRequest* temp = querychatroomidreq_;
  querychatroomidreq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_querychatroomidreq(::qihoo::protocol::chatroom::QueryChatRoomIDRequest* querychatroomidreq) {
  delete querychatroomidreq_;
  querychatroomidreq_ = querychatroomidreq;
  if (querychatroomidreq) {
    set_has_querychatroomidreq();
  } else {
    clear_has_querychatroomidreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.querychatroomidreq)
}

// optional .qihoo.protocol.chatroom.UpdateRoomIDRequest updategameidreq = 9;
bool ChatRoomUpToServer::has_updategameidreq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChatRoomUpToServer::set_has_updategameidreq() {
  _has_bits_[0] |= 0x00000080u;
}
void ChatRoomUpToServer::clear_has_updategameidreq() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChatRoomUpToServer::clear_updategameidreq() {
  if (updategameidreq_ != NULL) updategameidreq_->::qihoo::protocol::chatroom::UpdateRoomIDRequest::Clear();
  clear_has_updategameidreq();
}
const ::qihoo::protocol::chatroom::UpdateRoomIDRequest& ChatRoomUpToServer::updategameidreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.updategameidreq)
  return updategameidreq_ != NULL ? *updategameidreq_
                         : *::qihoo::protocol::chatroom::UpdateRoomIDRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::UpdateRoomIDRequest* ChatRoomUpToServer::mutable_updategameidreq() {
  set_has_updategameidreq();
  if (updategameidreq_ == NULL) {
    updategameidreq_ = new ::qihoo::protocol::chatroom::UpdateRoomIDRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.updategameidreq)
  return updategameidreq_;
}
::qihoo::protocol::chatroom::UpdateRoomIDRequest* ChatRoomUpToServer::release_updategameidreq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.updategameidreq)
  clear_has_updategameidreq();
  ::qihoo::protocol::chatroom::UpdateRoomIDRequest* temp = updategameidreq_;
  updategameidreq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_updategameidreq(::qihoo::protocol::chatroom::UpdateRoomIDRequest* updategameidreq) {
  delete updategameidreq_;
  updategameidreq_ = updategameidreq;
  if (updategameidreq) {
    set_has_updategameidreq();
  } else {
    clear_has_updategameidreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.updategameidreq)
}

// optional .qihoo.protocol.chatroom.QueryAllGameRoomRequest queryallgameroomreq = 10;
bool ChatRoomUpToServer::has_queryallgameroomreq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChatRoomUpToServer::set_has_queryallgameroomreq() {
  _has_bits_[0] |= 0x00000100u;
}
void ChatRoomUpToServer::clear_has_queryallgameroomreq() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChatRoomUpToServer::clear_queryallgameroomreq() {
  if (queryallgameroomreq_ != NULL) queryallgameroomreq_->::qihoo::protocol::chatroom::QueryAllGameRoomRequest::Clear();
  clear_has_queryallgameroomreq();
}
const ::qihoo::protocol::chatroom::QueryAllGameRoomRequest& ChatRoomUpToServer::queryallgameroomreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.queryallgameroomreq)
  return queryallgameroomreq_ != NULL ? *queryallgameroomreq_
                         : *::qihoo::protocol::chatroom::QueryAllGameRoomRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::QueryAllGameRoomRequest* ChatRoomUpToServer::mutable_queryallgameroomreq() {
  set_has_queryallgameroomreq();
  if (queryallgameroomreq_ == NULL) {
    queryallgameroomreq_ = new ::qihoo::protocol::chatroom::QueryAllGameRoomRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.queryallgameroomreq)
  return queryallgameroomreq_;
}
::qihoo::protocol::chatroom::QueryAllGameRoomRequest* ChatRoomUpToServer::release_queryallgameroomreq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.queryallgameroomreq)
  clear_has_queryallgameroomreq();
  ::qihoo::protocol::chatroom::QueryAllGameRoomRequest* temp = queryallgameroomreq_;
  queryallgameroomreq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_queryallgameroomreq(::qihoo::protocol::chatroom::QueryAllGameRoomRequest* queryallgameroomreq) {
  delete queryallgameroomreq_;
  queryallgameroomreq_ = queryallgameroomreq;
  if (queryallgameroomreq) {
    set_has_queryallgameroomreq();
  } else {
    clear_has_queryallgameroomreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.queryallgameroomreq)
}

// optional .qihoo.protocol.chatroom.ChatRoomMessageRequest chatroommessagereq = 11;
bool ChatRoomUpToServer::has_chatroommessagereq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChatRoomUpToServer::set_has_chatroommessagereq() {
  _has_bits_[0] |= 0x00000200u;
}
void ChatRoomUpToServer::clear_has_chatroommessagereq() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChatRoomUpToServer::clear_chatroommessagereq() {
  if (chatroommessagereq_ != NULL) chatroommessagereq_->::qihoo::protocol::chatroom::ChatRoomMessageRequest::Clear();
  clear_has_chatroommessagereq();
}
const ::qihoo::protocol::chatroom::ChatRoomMessageRequest& ChatRoomUpToServer::chatroommessagereq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.chatroommessagereq)
  return chatroommessagereq_ != NULL ? *chatroommessagereq_
                         : *::qihoo::protocol::chatroom::ChatRoomMessageRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoomMessageRequest* ChatRoomUpToServer::mutable_chatroommessagereq() {
  set_has_chatroommessagereq();
  if (chatroommessagereq_ == NULL) {
    chatroommessagereq_ = new ::qihoo::protocol::chatroom::ChatRoomMessageRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.chatroommessagereq)
  return chatroommessagereq_;
}
::qihoo::protocol::chatroom::ChatRoomMessageRequest* ChatRoomUpToServer::release_chatroommessagereq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.chatroommessagereq)
  clear_has_chatroommessagereq();
  ::qihoo::protocol::chatroom::ChatRoomMessageRequest* temp = chatroommessagereq_;
  chatroommessagereq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_chatroommessagereq(::qihoo::protocol::chatroom::ChatRoomMessageRequest* chatroommessagereq) {
  delete chatroommessagereq_;
  chatroommessagereq_ = chatroommessagereq;
  if (chatroommessagereq) {
    set_has_chatroommessagereq();
  } else {
    clear_has_chatroommessagereq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.chatroommessagereq)
}

// optional .qihoo.protocol.chatroom.CreateMultiChatRoomRequest createrooms = 12;
bool ChatRoomUpToServer::has_createrooms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ChatRoomUpToServer::set_has_createrooms() {
  _has_bits_[0] |= 0x00000400u;
}
void ChatRoomUpToServer::clear_has_createrooms() {
  _has_bits_[0] &= ~0x00000400u;
}
void ChatRoomUpToServer::clear_createrooms() {
  if (createrooms_ != NULL) createrooms_->::qihoo::protocol::chatroom::CreateMultiChatRoomRequest::Clear();
  clear_has_createrooms();
}
const ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest& ChatRoomUpToServer::createrooms() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.createrooms)
  return createrooms_ != NULL ? *createrooms_
                         : *::qihoo::protocol::chatroom::CreateMultiChatRoomRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* ChatRoomUpToServer::mutable_createrooms() {
  set_has_createrooms();
  if (createrooms_ == NULL) {
    createrooms_ = new ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.createrooms)
  return createrooms_;
}
::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* ChatRoomUpToServer::release_createrooms() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.createrooms)
  clear_has_createrooms();
  ::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* temp = createrooms_;
  createrooms_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_createrooms(::qihoo::protocol::chatroom::CreateMultiChatRoomRequest* createrooms) {
  delete createrooms_;
  createrooms_ = createrooms;
  if (createrooms) {
    set_has_createrooms();
  } else {
    clear_has_createrooms();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.createrooms)
}

// optional .qihoo.protocol.chatroom.SyncRoomToDBRequest syncroomtodba = 13;
bool ChatRoomUpToServer::has_syncroomtodba() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ChatRoomUpToServer::set_has_syncroomtodba() {
  _has_bits_[0] |= 0x00000800u;
}
void ChatRoomUpToServer::clear_has_syncroomtodba() {
  _has_bits_[0] &= ~0x00000800u;
}
void ChatRoomUpToServer::clear_syncroomtodba() {
  if (syncroomtodba_ != NULL) syncroomtodba_->::qihoo::protocol::chatroom::SyncRoomToDBRequest::Clear();
  clear_has_syncroomtodba();
}
const ::qihoo::protocol::chatroom::SyncRoomToDBRequest& ChatRoomUpToServer::syncroomtodba() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.syncroomtodba)
  return syncroomtodba_ != NULL ? *syncroomtodba_
                         : *::qihoo::protocol::chatroom::SyncRoomToDBRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::SyncRoomToDBRequest* ChatRoomUpToServer::mutable_syncroomtodba() {
  set_has_syncroomtodba();
  if (syncroomtodba_ == NULL) {
    syncroomtodba_ = new ::qihoo::protocol::chatroom::SyncRoomToDBRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.syncroomtodba)
  return syncroomtodba_;
}
::qihoo::protocol::chatroom::SyncRoomToDBRequest* ChatRoomUpToServer::release_syncroomtodba() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.syncroomtodba)
  clear_has_syncroomtodba();
  ::qihoo::protocol::chatroom::SyncRoomToDBRequest* temp = syncroomtodba_;
  syncroomtodba_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_syncroomtodba(::qihoo::protocol::chatroom::SyncRoomToDBRequest* syncroomtodba) {
  delete syncroomtodba_;
  syncroomtodba_ = syncroomtodba;
  if (syncroomtodba) {
    set_has_syncroomtodba();
  } else {
    clear_has_syncroomtodba();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.syncroomtodba)
}

// optional .qihoo.protocol.chatroom.SubscribeRequest subreq = 14;
bool ChatRoomUpToServer::has_subreq() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ChatRoomUpToServer::set_has_subreq() {
  _has_bits_[0] |= 0x00001000u;
}
void ChatRoomUpToServer::clear_has_subreq() {
  _has_bits_[0] &= ~0x00001000u;
}
void ChatRoomUpToServer::clear_subreq() {
  if (subreq_ != NULL) subreq_->::qihoo::protocol::chatroom::SubscribeRequest::Clear();
  clear_has_subreq();
}
const ::qihoo::protocol::chatroom::SubscribeRequest& ChatRoomUpToServer::subreq() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomUpToServer.subreq)
  return subreq_ != NULL ? *subreq_
                         : *::qihoo::protocol::chatroom::SubscribeRequest::internal_default_instance();
}
::qihoo::protocol::chatroom::SubscribeRequest* ChatRoomUpToServer::mutable_subreq() {
  set_has_subreq();
  if (subreq_ == NULL) {
    subreq_ = new ::qihoo::protocol::chatroom::SubscribeRequest;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomUpToServer.subreq)
  return subreq_;
}
::qihoo::protocol::chatroom::SubscribeRequest* ChatRoomUpToServer::release_subreq() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomUpToServer.subreq)
  clear_has_subreq();
  ::qihoo::protocol::chatroom::SubscribeRequest* temp = subreq_;
  subreq_ = NULL;
  return temp;
}
void ChatRoomUpToServer::set_allocated_subreq(::qihoo::protocol::chatroom::SubscribeRequest* subreq) {
  delete subreq_;
  subreq_ = subreq;
  if (subreq) {
    set_has_subreq();
  } else {
    clear_has_subreq();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomUpToServer.subreq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomDownToUser::kResultFieldNumber;
const int ChatRoomDownToUser::kPayloadtypeFieldNumber;
const int ChatRoomDownToUser::kCreatechatroomrespFieldNumber;
const int ChatRoomDownToUser::kGetchatroominforespFieldNumber;
const int ChatRoomDownToUser::kApplyjoinchatroomrespFieldNumber;
const int ChatRoomDownToUser::kQuitchatroomrespFieldNumber;
const int ChatRoomDownToUser::kUpdatechatroomrespFieldNumber;
const int ChatRoomDownToUser::kKickmemberrespFieldNumber;
const int ChatRoomDownToUser::kQuerychatroomidrespFieldNumber;
const int ChatRoomDownToUser::kUpdategameidrespFieldNumber;
const int ChatRoomDownToUser::kQueryallgameroomrespFieldNumber;
const int ChatRoomDownToUser::kChatroommessagerespFieldNumber;
const int ChatRoomDownToUser::kNewmsgnotifyFieldNumber;
const int ChatRoomDownToUser::kErrormsgnotifyFieldNumber;
const int ChatRoomDownToUser::kCreateroomsFieldNumber;
const int ChatRoomDownToUser::kMemberjoinnotifyFieldNumber;
const int ChatRoomDownToUser::kMemberquitnotifyFieldNumber;
const int ChatRoomDownToUser::kSubrespFieldNumber;
const int ChatRoomDownToUser::kReasonFieldNumber;
const int ChatRoomDownToUser::kMultinotifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomDownToUser::ChatRoomDownToUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomDownToUser)
}
ChatRoomDownToUser::ChatRoomDownToUser(const ChatRoomDownToUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      multinotify_(from.multinotify_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_createchatroomresp()) {
    createchatroomresp_ = new ::qihoo::protocol::chatroom::CreateChatRoomResponse(*from.createchatroomresp_);
  } else {
    createchatroomresp_ = NULL;
  }
  if (from.has_getchatroominforesp()) {
    getchatroominforesp_ = new ::qihoo::protocol::chatroom::GetChatRoomDetailResponse(*from.getchatroominforesp_);
  } else {
    getchatroominforesp_ = NULL;
  }
  if (from.has_applyjoinchatroomresp()) {
    applyjoinchatroomresp_ = new ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse(*from.applyjoinchatroomresp_);
  } else {
    applyjoinchatroomresp_ = NULL;
  }
  if (from.has_quitchatroomresp()) {
    quitchatroomresp_ = new ::qihoo::protocol::chatroom::QuitChatRoomResponse(*from.quitchatroomresp_);
  } else {
    quitchatroomresp_ = NULL;
  }
  if (from.has_updatechatroomresp()) {
    updatechatroomresp_ = new ::qihoo::protocol::chatroom::UpdateChatRoomResponse(*from.updatechatroomresp_);
  } else {
    updatechatroomresp_ = NULL;
  }
  if (from.has_kickmemberresp()) {
    kickmemberresp_ = new ::qihoo::protocol::chatroom::KickChatRoomMemberResponse(*from.kickmemberresp_);
  } else {
    kickmemberresp_ = NULL;
  }
  if (from.has_querychatroomidresp()) {
    querychatroomidresp_ = new ::qihoo::protocol::chatroom::QueryChatRoomIDResponse(*from.querychatroomidresp_);
  } else {
    querychatroomidresp_ = NULL;
  }
  if (from.has_updategameidresp()) {
    updategameidresp_ = new ::qihoo::protocol::chatroom::UpdateRoomIDResponse(*from.updategameidresp_);
  } else {
    updategameidresp_ = NULL;
  }
  if (from.has_queryallgameroomresp()) {
    queryallgameroomresp_ = new ::qihoo::protocol::chatroom::QueryAllGameRoomResponse(*from.queryallgameroomresp_);
  } else {
    queryallgameroomresp_ = NULL;
  }
  if (from.has_chatroommessageresp()) {
    chatroommessageresp_ = new ::qihoo::protocol::chatroom::ChatRoomMessageResponse(*from.chatroommessageresp_);
  } else {
    chatroommessageresp_ = NULL;
  }
  if (from.has_newmsgnotify()) {
    newmsgnotify_ = new ::qihoo::protocol::chatroom::ChatRoomNewMsg(*from.newmsgnotify_);
  } else {
    newmsgnotify_ = NULL;
  }
  if (from.has_errormsgnotify()) {
    errormsgnotify_ = new ::qihoo::protocol::chatroom::ChatRoomErrorMsg(*from.errormsgnotify_);
  } else {
    errormsgnotify_ = NULL;
  }
  if (from.has_createrooms()) {
    createrooms_ = new ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse(*from.createrooms_);
  } else {
    createrooms_ = NULL;
  }
  if (from.has_memberjoinnotify()) {
    memberjoinnotify_ = new ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify(*from.memberjoinnotify_);
  } else {
    memberjoinnotify_ = NULL;
  }
  if (from.has_memberquitnotify()) {
    memberquitnotify_ = new ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify(*from.memberquitnotify_);
  } else {
    memberquitnotify_ = NULL;
  }
  if (from.has_subresp()) {
    subresp_ = new ::qihoo::protocol::chatroom::SubscribeResponse(*from.subresp_);
  } else {
    subresp_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&payloadtype_) -
    reinterpret_cast<char*>(&result_) + sizeof(payloadtype_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomDownToUser)
}

void ChatRoomDownToUser::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&createchatroomresp_, 0, reinterpret_cast<char*>(&payloadtype_) -
    reinterpret_cast<char*>(&createchatroomresp_) + sizeof(payloadtype_));
}

ChatRoomDownToUser::~ChatRoomDownToUser() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomDownToUser)
  SharedDtor();
}

void ChatRoomDownToUser::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete createchatroomresp_;
  }
  if (this != internal_default_instance()) {
    delete getchatroominforesp_;
  }
  if (this != internal_default_instance()) {
    delete applyjoinchatroomresp_;
  }
  if (this != internal_default_instance()) {
    delete quitchatroomresp_;
  }
  if (this != internal_default_instance()) {
    delete updatechatroomresp_;
  }
  if (this != internal_default_instance()) {
    delete kickmemberresp_;
  }
  if (this != internal_default_instance()) {
    delete querychatroomidresp_;
  }
  if (this != internal_default_instance()) {
    delete updategameidresp_;
  }
  if (this != internal_default_instance()) {
    delete queryallgameroomresp_;
  }
  if (this != internal_default_instance()) {
    delete chatroommessageresp_;
  }
  if (this != internal_default_instance()) {
    delete newmsgnotify_;
  }
  if (this != internal_default_instance()) {
    delete errormsgnotify_;
  }
  if (this != internal_default_instance()) {
    delete createrooms_;
  }
  if (this != internal_default_instance()) {
    delete memberjoinnotify_;
  }
  if (this != internal_default_instance()) {
    delete memberquitnotify_;
  }
  if (this != internal_default_instance()) {
    delete subresp_;
  }
}

void ChatRoomDownToUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomDownToUser::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomDownToUser& ChatRoomDownToUser::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomDownToUser* ChatRoomDownToUser::New(::google::protobuf::Arena* arena) const {
  ChatRoomDownToUser* n = new ChatRoomDownToUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomDownToUser::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  multinotify_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_reason()) {
      GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reason_.UnsafeRawStringPointer())->clear();
    }
    if (has_createchatroomresp()) {
      GOOGLE_DCHECK(createchatroomresp_ != NULL);
      createchatroomresp_->::qihoo::protocol::chatroom::CreateChatRoomResponse::Clear();
    }
    if (has_getchatroominforesp()) {
      GOOGLE_DCHECK(getchatroominforesp_ != NULL);
      getchatroominforesp_->::qihoo::protocol::chatroom::GetChatRoomDetailResponse::Clear();
    }
    if (has_applyjoinchatroomresp()) {
      GOOGLE_DCHECK(applyjoinchatroomresp_ != NULL);
      applyjoinchatroomresp_->::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse::Clear();
    }
    if (has_quitchatroomresp()) {
      GOOGLE_DCHECK(quitchatroomresp_ != NULL);
      quitchatroomresp_->::qihoo::protocol::chatroom::QuitChatRoomResponse::Clear();
    }
    if (has_updatechatroomresp()) {
      GOOGLE_DCHECK(updatechatroomresp_ != NULL);
      updatechatroomresp_->::qihoo::protocol::chatroom::UpdateChatRoomResponse::Clear();
    }
    if (has_kickmemberresp()) {
      GOOGLE_DCHECK(kickmemberresp_ != NULL);
      kickmemberresp_->::qihoo::protocol::chatroom::KickChatRoomMemberResponse::Clear();
    }
    if (has_querychatroomidresp()) {
      GOOGLE_DCHECK(querychatroomidresp_ != NULL);
      querychatroomidresp_->::qihoo::protocol::chatroom::QueryChatRoomIDResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_updategameidresp()) {
      GOOGLE_DCHECK(updategameidresp_ != NULL);
      updategameidresp_->::qihoo::protocol::chatroom::UpdateRoomIDResponse::Clear();
    }
    if (has_queryallgameroomresp()) {
      GOOGLE_DCHECK(queryallgameroomresp_ != NULL);
      queryallgameroomresp_->::qihoo::protocol::chatroom::QueryAllGameRoomResponse::Clear();
    }
    if (has_chatroommessageresp()) {
      GOOGLE_DCHECK(chatroommessageresp_ != NULL);
      chatroommessageresp_->::qihoo::protocol::chatroom::ChatRoomMessageResponse::Clear();
    }
    if (has_newmsgnotify()) {
      GOOGLE_DCHECK(newmsgnotify_ != NULL);
      newmsgnotify_->::qihoo::protocol::chatroom::ChatRoomNewMsg::Clear();
    }
    if (has_errormsgnotify()) {
      GOOGLE_DCHECK(errormsgnotify_ != NULL);
      errormsgnotify_->::qihoo::protocol::chatroom::ChatRoomErrorMsg::Clear();
    }
    if (has_createrooms()) {
      GOOGLE_DCHECK(createrooms_ != NULL);
      createrooms_->::qihoo::protocol::chatroom::CreateMultiChatRoomResponse::Clear();
    }
    if (has_memberjoinnotify()) {
      GOOGLE_DCHECK(memberjoinnotify_ != NULL);
      memberjoinnotify_->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::Clear();
    }
    if (has_memberquitnotify()) {
      GOOGLE_DCHECK(memberquitnotify_ != NULL);
      memberquitnotify_->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::Clear();
    }
  }
  if (has_subresp()) {
    GOOGLE_DCHECK(subresp_ != NULL);
    subresp_->::qihoo::protocol::chatroom::SubscribeResponse::Clear();
  }
  if (_has_bits_[16 / 32] & 393216u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&payloadtype_) -
      reinterpret_cast<char*>(&result_) + sizeof(payloadtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomDownToUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 payloadtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_payloadtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payloadtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createchatroomresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getchatroominforesp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applyjoinchatroomresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quitchatroomresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatechatroomresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickmemberresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querychatroomidresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updategameidresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryallgameroomresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroommessageresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newmsgnotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errormsgnotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createrooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberjoinnotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberquitnotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes reason = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1602u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_multinotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomDownToUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomDownToUser)
  return false;
#undef DO_
}

void ChatRoomDownToUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint32 payloadtype = 2;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->payloadtype(), output);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->createchatroomresp_, output);
  }

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->getchatroominforesp_, output);
  }

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->applyjoinchatroomresp_, output);
  }

  // optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->quitchatroomresp_, output);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->updatechatroomresp_, output);
  }

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->kickmemberresp_, output);
  }

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->querychatroomidresp_, output);
  }

  // optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->updategameidresp_, output);
  }

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->queryallgameroomresp_, output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->chatroommessageresp_, output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->newmsgnotify_, output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->errormsgnotify_, output);
  }

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->createrooms_, output);
  }

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->memberjoinnotify_, output);
  }

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->memberquitnotify_, output);
  }

  // optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->subresp_, output);
  }

  // optional bytes reason = 100;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      100, this->reason(), output);
  }

  // repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
  for (unsigned int i = 0, n = this->multinotify_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->multinotify(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomDownToUser)
}

::google::protobuf::uint8* ChatRoomDownToUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint32 payloadtype = 2;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->payloadtype(), target);
  }

  // optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->createchatroomresp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->getchatroominforesp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->applyjoinchatroomresp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->quitchatroomresp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->updatechatroomresp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->kickmemberresp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->querychatroomidresp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->updategameidresp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->queryallgameroomresp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->chatroommessageresp_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->newmsgnotify_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->errormsgnotify_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->createrooms_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->memberjoinnotify_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->memberquitnotify_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->subresp_, deterministic, target);
  }

  // optional bytes reason = 100;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->reason(), target);
  }

  // repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
  for (unsigned int i = 0, n = this->multinotify_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        200, this->multinotify(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomDownToUser)
  return target;
}

size_t ChatRoomDownToUser::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  size_t total_size = 0;

  if (has_result()) {
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  if (has_payloadtype()) {
    // required uint32 payloadtype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->payloadtype());
  }

  return total_size;
}
size_t ChatRoomDownToUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00060000) ^ 0x00060000) == 0) {  // All required fields are present.
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

    // required uint32 payloadtype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->payloadtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
  {
    unsigned int count = this->multinotify_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multinotify(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes reason = 100;
    if (has_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

    // optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
    if (has_createchatroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->createchatroomresp_);
    }

    // optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
    if (has_getchatroominforesp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->getchatroominforesp_);
    }

    // optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
    if (has_applyjoinchatroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->applyjoinchatroomresp_);
    }

    // optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
    if (has_quitchatroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->quitchatroomresp_);
    }

    // optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
    if (has_updatechatroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->updatechatroomresp_);
    }

    // optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
    if (has_kickmemberresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kickmemberresp_);
    }

    // optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
    if (has_querychatroomidresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->querychatroomidresp_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
    if (has_updategameidresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->updategameidresp_);
    }

    // optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
    if (has_queryallgameroomresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->queryallgameroomresp_);
    }

    // optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
    if (has_chatroommessageresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chatroommessageresp_);
    }

    // optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
    if (has_newmsgnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newmsgnotify_);
    }

    // optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
    if (has_errormsgnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->errormsgnotify_);
    }

    // optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
    if (has_createrooms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->createrooms_);
    }

    // optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
    if (has_memberjoinnotify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memberjoinnotify_);
    }

    // optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
    if (has_memberquitnotify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memberquitnotify_);
    }

  }
  // optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
  if (has_subresp()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->subresp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomDownToUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomDownToUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomDownToUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ChatRoomDownToUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ChatRoomDownToUser)
    MergeFrom(*source);
  }
}

void ChatRoomDownToUser::MergeFrom(const ChatRoomDownToUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multinotify_.MergeFrom(from.multinotify_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_createchatroomresp()->::qihoo::protocol::chatroom::CreateChatRoomResponse::MergeFrom(from.createchatroomresp());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_getchatroominforesp()->::qihoo::protocol::chatroom::GetChatRoomDetailResponse::MergeFrom(from.getchatroominforesp());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_applyjoinchatroomresp()->::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse::MergeFrom(from.applyjoinchatroomresp());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_quitchatroomresp()->::qihoo::protocol::chatroom::QuitChatRoomResponse::MergeFrom(from.quitchatroomresp());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_updatechatroomresp()->::qihoo::protocol::chatroom::UpdateChatRoomResponse::MergeFrom(from.updatechatroomresp());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_kickmemberresp()->::qihoo::protocol::chatroom::KickChatRoomMemberResponse::MergeFrom(from.kickmemberresp());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_querychatroomidresp()->::qihoo::protocol::chatroom::QueryChatRoomIDResponse::MergeFrom(from.querychatroomidresp());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_updategameidresp()->::qihoo::protocol::chatroom::UpdateRoomIDResponse::MergeFrom(from.updategameidresp());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_queryallgameroomresp()->::qihoo::protocol::chatroom::QueryAllGameRoomResponse::MergeFrom(from.queryallgameroomresp());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_chatroommessageresp()->::qihoo::protocol::chatroom::ChatRoomMessageResponse::MergeFrom(from.chatroommessageresp());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_newmsgnotify()->::qihoo::protocol::chatroom::ChatRoomNewMsg::MergeFrom(from.newmsgnotify());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_errormsgnotify()->::qihoo::protocol::chatroom::ChatRoomErrorMsg::MergeFrom(from.errormsgnotify());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_createrooms()->::qihoo::protocol::chatroom::CreateMultiChatRoomResponse::MergeFrom(from.createrooms());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_memberjoinnotify()->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::MergeFrom(from.memberjoinnotify());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_memberquitnotify()->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::MergeFrom(from.memberquitnotify());
    }
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_subresp()->::qihoo::protocol::chatroom::SubscribeResponse::MergeFrom(from.subresp());
    }
    if (cached_has_bits & 0x00020000u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00040000u) {
      payloadtype_ = from.payloadtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomDownToUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomDownToUser::CopyFrom(const ChatRoomDownToUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ChatRoomDownToUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomDownToUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00060000) != 0x00060000) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->multinotify())) return false;
  if (has_createchatroomresp()) {
    if (!this->createchatroomresp_->IsInitialized()) return false;
  }
  if (has_getchatroominforesp()) {
    if (!this->getchatroominforesp_->IsInitialized()) return false;
  }
  if (has_applyjoinchatroomresp()) {
    if (!this->applyjoinchatroomresp_->IsInitialized()) return false;
  }
  if (has_quitchatroomresp()) {
    if (!this->quitchatroomresp_->IsInitialized()) return false;
  }
  if (has_updatechatroomresp()) {
    if (!this->updatechatroomresp_->IsInitialized()) return false;
  }
  if (has_kickmemberresp()) {
    if (!this->kickmemberresp_->IsInitialized()) return false;
  }
  if (has_queryallgameroomresp()) {
    if (!this->queryallgameroomresp_->IsInitialized()) return false;
  }
  if (has_newmsgnotify()) {
    if (!this->newmsgnotify_->IsInitialized()) return false;
  }
  if (has_errormsgnotify()) {
    if (!this->errormsgnotify_->IsInitialized()) return false;
  }
  if (has_createrooms()) {
    if (!this->createrooms_->IsInitialized()) return false;
  }
  if (has_memberjoinnotify()) {
    if (!this->memberjoinnotify_->IsInitialized()) return false;
  }
  if (has_memberquitnotify()) {
    if (!this->memberquitnotify_->IsInitialized()) return false;
  }
  if (has_subresp()) {
    if (!this->subresp_->IsInitialized()) return false;
  }
  return true;
}

void ChatRoomDownToUser::Swap(ChatRoomDownToUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomDownToUser::InternalSwap(ChatRoomDownToUser* other) {
  multinotify_.InternalSwap(&other->multinotify_);
  reason_.Swap(&other->reason_);
  std::swap(createchatroomresp_, other->createchatroomresp_);
  std::swap(getchatroominforesp_, other->getchatroominforesp_);
  std::swap(applyjoinchatroomresp_, other->applyjoinchatroomresp_);
  std::swap(quitchatroomresp_, other->quitchatroomresp_);
  std::swap(updatechatroomresp_, other->updatechatroomresp_);
  std::swap(kickmemberresp_, other->kickmemberresp_);
  std::swap(querychatroomidresp_, other->querychatroomidresp_);
  std::swap(updategameidresp_, other->updategameidresp_);
  std::swap(queryallgameroomresp_, other->queryallgameroomresp_);
  std::swap(chatroommessageresp_, other->chatroommessageresp_);
  std::swap(newmsgnotify_, other->newmsgnotify_);
  std::swap(errormsgnotify_, other->errormsgnotify_);
  std::swap(createrooms_, other->createrooms_);
  std::swap(memberjoinnotify_, other->memberjoinnotify_);
  std::swap(memberquitnotify_, other->memberquitnotify_);
  std::swap(subresp_, other->subresp_);
  std::swap(result_, other->result_);
  std::swap(payloadtype_, other->payloadtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomDownToUser::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomDownToUser

// required int32 result = 1;
bool ChatRoomDownToUser::has_result() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ChatRoomDownToUser::set_has_result() {
  _has_bits_[0] |= 0x00020000u;
}
void ChatRoomDownToUser::clear_has_result() {
  _has_bits_[0] &= ~0x00020000u;
}
void ChatRoomDownToUser::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 ChatRoomDownToUser::result() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.result)
  return result_;
}
void ChatRoomDownToUser::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomDownToUser.result)
}

// required uint32 payloadtype = 2;
bool ChatRoomDownToUser::has_payloadtype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ChatRoomDownToUser::set_has_payloadtype() {
  _has_bits_[0] |= 0x00040000u;
}
void ChatRoomDownToUser::clear_has_payloadtype() {
  _has_bits_[0] &= ~0x00040000u;
}
void ChatRoomDownToUser::clear_payloadtype() {
  payloadtype_ = 0u;
  clear_has_payloadtype();
}
::google::protobuf::uint32 ChatRoomDownToUser::payloadtype() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.payloadtype)
  return payloadtype_;
}
void ChatRoomDownToUser::set_payloadtype(::google::protobuf::uint32 value) {
  set_has_payloadtype();
  payloadtype_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomDownToUser.payloadtype)
}

// optional .qihoo.protocol.chatroom.CreateChatRoomResponse createchatroomresp = 3;
bool ChatRoomDownToUser::has_createchatroomresp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomDownToUser::set_has_createchatroomresp() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomDownToUser::clear_has_createchatroomresp() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomDownToUser::clear_createchatroomresp() {
  if (createchatroomresp_ != NULL) createchatroomresp_->::qihoo::protocol::chatroom::CreateChatRoomResponse::Clear();
  clear_has_createchatroomresp();
}
const ::qihoo::protocol::chatroom::CreateChatRoomResponse& ChatRoomDownToUser::createchatroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.createchatroomresp)
  return createchatroomresp_ != NULL ? *createchatroomresp_
                         : *::qihoo::protocol::chatroom::CreateChatRoomResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::CreateChatRoomResponse* ChatRoomDownToUser::mutable_createchatroomresp() {
  set_has_createchatroomresp();
  if (createchatroomresp_ == NULL) {
    createchatroomresp_ = new ::qihoo::protocol::chatroom::CreateChatRoomResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.createchatroomresp)
  return createchatroomresp_;
}
::qihoo::protocol::chatroom::CreateChatRoomResponse* ChatRoomDownToUser::release_createchatroomresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.createchatroomresp)
  clear_has_createchatroomresp();
  ::qihoo::protocol::chatroom::CreateChatRoomResponse* temp = createchatroomresp_;
  createchatroomresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_createchatroomresp(::qihoo::protocol::chatroom::CreateChatRoomResponse* createchatroomresp) {
  delete createchatroomresp_;
  createchatroomresp_ = createchatroomresp;
  if (createchatroomresp) {
    set_has_createchatroomresp();
  } else {
    clear_has_createchatroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.createchatroomresp)
}

// optional .qihoo.protocol.chatroom.GetChatRoomDetailResponse getchatroominforesp = 4;
bool ChatRoomDownToUser::has_getchatroominforesp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoomDownToUser::set_has_getchatroominforesp() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoomDownToUser::clear_has_getchatroominforesp() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoomDownToUser::clear_getchatroominforesp() {
  if (getchatroominforesp_ != NULL) getchatroominforesp_->::qihoo::protocol::chatroom::GetChatRoomDetailResponse::Clear();
  clear_has_getchatroominforesp();
}
const ::qihoo::protocol::chatroom::GetChatRoomDetailResponse& ChatRoomDownToUser::getchatroominforesp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.getchatroominforesp)
  return getchatroominforesp_ != NULL ? *getchatroominforesp_
                         : *::qihoo::protocol::chatroom::GetChatRoomDetailResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::GetChatRoomDetailResponse* ChatRoomDownToUser::mutable_getchatroominforesp() {
  set_has_getchatroominforesp();
  if (getchatroominforesp_ == NULL) {
    getchatroominforesp_ = new ::qihoo::protocol::chatroom::GetChatRoomDetailResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.getchatroominforesp)
  return getchatroominforesp_;
}
::qihoo::protocol::chatroom::GetChatRoomDetailResponse* ChatRoomDownToUser::release_getchatroominforesp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.getchatroominforesp)
  clear_has_getchatroominforesp();
  ::qihoo::protocol::chatroom::GetChatRoomDetailResponse* temp = getchatroominforesp_;
  getchatroominforesp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_getchatroominforesp(::qihoo::protocol::chatroom::GetChatRoomDetailResponse* getchatroominforesp) {
  delete getchatroominforesp_;
  getchatroominforesp_ = getchatroominforesp;
  if (getchatroominforesp) {
    set_has_getchatroominforesp();
  } else {
    clear_has_getchatroominforesp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.getchatroominforesp)
}

// optional .qihoo.protocol.chatroom.ApplyJoinChatRoomResponse applyjoinchatroomresp = 5;
bool ChatRoomDownToUser::has_applyjoinchatroomresp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatRoomDownToUser::set_has_applyjoinchatroomresp() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatRoomDownToUser::clear_has_applyjoinchatroomresp() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatRoomDownToUser::clear_applyjoinchatroomresp() {
  if (applyjoinchatroomresp_ != NULL) applyjoinchatroomresp_->::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse::Clear();
  clear_has_applyjoinchatroomresp();
}
const ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse& ChatRoomDownToUser::applyjoinchatroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.applyjoinchatroomresp)
  return applyjoinchatroomresp_ != NULL ? *applyjoinchatroomresp_
                         : *::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* ChatRoomDownToUser::mutable_applyjoinchatroomresp() {
  set_has_applyjoinchatroomresp();
  if (applyjoinchatroomresp_ == NULL) {
    applyjoinchatroomresp_ = new ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.applyjoinchatroomresp)
  return applyjoinchatroomresp_;
}
::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* ChatRoomDownToUser::release_applyjoinchatroomresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.applyjoinchatroomresp)
  clear_has_applyjoinchatroomresp();
  ::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* temp = applyjoinchatroomresp_;
  applyjoinchatroomresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_applyjoinchatroomresp(::qihoo::protocol::chatroom::ApplyJoinChatRoomResponse* applyjoinchatroomresp) {
  delete applyjoinchatroomresp_;
  applyjoinchatroomresp_ = applyjoinchatroomresp;
  if (applyjoinchatroomresp) {
    set_has_applyjoinchatroomresp();
  } else {
    clear_has_applyjoinchatroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.applyjoinchatroomresp)
}

// optional .qihoo.protocol.chatroom.QuitChatRoomResponse quitchatroomresp = 6;
bool ChatRoomDownToUser::has_quitchatroomresp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatRoomDownToUser::set_has_quitchatroomresp() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatRoomDownToUser::clear_has_quitchatroomresp() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatRoomDownToUser::clear_quitchatroomresp() {
  if (quitchatroomresp_ != NULL) quitchatroomresp_->::qihoo::protocol::chatroom::QuitChatRoomResponse::Clear();
  clear_has_quitchatroomresp();
}
const ::qihoo::protocol::chatroom::QuitChatRoomResponse& ChatRoomDownToUser::quitchatroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.quitchatroomresp)
  return quitchatroomresp_ != NULL ? *quitchatroomresp_
                         : *::qihoo::protocol::chatroom::QuitChatRoomResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::QuitChatRoomResponse* ChatRoomDownToUser::mutable_quitchatroomresp() {
  set_has_quitchatroomresp();
  if (quitchatroomresp_ == NULL) {
    quitchatroomresp_ = new ::qihoo::protocol::chatroom::QuitChatRoomResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.quitchatroomresp)
  return quitchatroomresp_;
}
::qihoo::protocol::chatroom::QuitChatRoomResponse* ChatRoomDownToUser::release_quitchatroomresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.quitchatroomresp)
  clear_has_quitchatroomresp();
  ::qihoo::protocol::chatroom::QuitChatRoomResponse* temp = quitchatroomresp_;
  quitchatroomresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_quitchatroomresp(::qihoo::protocol::chatroom::QuitChatRoomResponse* quitchatroomresp) {
  delete quitchatroomresp_;
  quitchatroomresp_ = quitchatroomresp;
  if (quitchatroomresp) {
    set_has_quitchatroomresp();
  } else {
    clear_has_quitchatroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.quitchatroomresp)
}

// optional .qihoo.protocol.chatroom.UpdateChatRoomResponse updatechatroomresp = 7;
bool ChatRoomDownToUser::has_updatechatroomresp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatRoomDownToUser::set_has_updatechatroomresp() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatRoomDownToUser::clear_has_updatechatroomresp() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatRoomDownToUser::clear_updatechatroomresp() {
  if (updatechatroomresp_ != NULL) updatechatroomresp_->::qihoo::protocol::chatroom::UpdateChatRoomResponse::Clear();
  clear_has_updatechatroomresp();
}
const ::qihoo::protocol::chatroom::UpdateChatRoomResponse& ChatRoomDownToUser::updatechatroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.updatechatroomresp)
  return updatechatroomresp_ != NULL ? *updatechatroomresp_
                         : *::qihoo::protocol::chatroom::UpdateChatRoomResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::UpdateChatRoomResponse* ChatRoomDownToUser::mutable_updatechatroomresp() {
  set_has_updatechatroomresp();
  if (updatechatroomresp_ == NULL) {
    updatechatroomresp_ = new ::qihoo::protocol::chatroom::UpdateChatRoomResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.updatechatroomresp)
  return updatechatroomresp_;
}
::qihoo::protocol::chatroom::UpdateChatRoomResponse* ChatRoomDownToUser::release_updatechatroomresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.updatechatroomresp)
  clear_has_updatechatroomresp();
  ::qihoo::protocol::chatroom::UpdateChatRoomResponse* temp = updatechatroomresp_;
  updatechatroomresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_updatechatroomresp(::qihoo::protocol::chatroom::UpdateChatRoomResponse* updatechatroomresp) {
  delete updatechatroomresp_;
  updatechatroomresp_ = updatechatroomresp;
  if (updatechatroomresp) {
    set_has_updatechatroomresp();
  } else {
    clear_has_updatechatroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.updatechatroomresp)
}

// optional .qihoo.protocol.chatroom.KickChatRoomMemberResponse kickmemberresp = 8;
bool ChatRoomDownToUser::has_kickmemberresp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChatRoomDownToUser::set_has_kickmemberresp() {
  _has_bits_[0] |= 0x00000040u;
}
void ChatRoomDownToUser::clear_has_kickmemberresp() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChatRoomDownToUser::clear_kickmemberresp() {
  if (kickmemberresp_ != NULL) kickmemberresp_->::qihoo::protocol::chatroom::KickChatRoomMemberResponse::Clear();
  clear_has_kickmemberresp();
}
const ::qihoo::protocol::chatroom::KickChatRoomMemberResponse& ChatRoomDownToUser::kickmemberresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.kickmemberresp)
  return kickmemberresp_ != NULL ? *kickmemberresp_
                         : *::qihoo::protocol::chatroom::KickChatRoomMemberResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::KickChatRoomMemberResponse* ChatRoomDownToUser::mutable_kickmemberresp() {
  set_has_kickmemberresp();
  if (kickmemberresp_ == NULL) {
    kickmemberresp_ = new ::qihoo::protocol::chatroom::KickChatRoomMemberResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.kickmemberresp)
  return kickmemberresp_;
}
::qihoo::protocol::chatroom::KickChatRoomMemberResponse* ChatRoomDownToUser::release_kickmemberresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.kickmemberresp)
  clear_has_kickmemberresp();
  ::qihoo::protocol::chatroom::KickChatRoomMemberResponse* temp = kickmemberresp_;
  kickmemberresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_kickmemberresp(::qihoo::protocol::chatroom::KickChatRoomMemberResponse* kickmemberresp) {
  delete kickmemberresp_;
  kickmemberresp_ = kickmemberresp;
  if (kickmemberresp) {
    set_has_kickmemberresp();
  } else {
    clear_has_kickmemberresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.kickmemberresp)
}

// optional .qihoo.protocol.chatroom.QueryChatRoomIDResponse querychatroomidresp = 9;
bool ChatRoomDownToUser::has_querychatroomidresp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChatRoomDownToUser::set_has_querychatroomidresp() {
  _has_bits_[0] |= 0x00000080u;
}
void ChatRoomDownToUser::clear_has_querychatroomidresp() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChatRoomDownToUser::clear_querychatroomidresp() {
  if (querychatroomidresp_ != NULL) querychatroomidresp_->::qihoo::protocol::chatroom::QueryChatRoomIDResponse::Clear();
  clear_has_querychatroomidresp();
}
const ::qihoo::protocol::chatroom::QueryChatRoomIDResponse& ChatRoomDownToUser::querychatroomidresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.querychatroomidresp)
  return querychatroomidresp_ != NULL ? *querychatroomidresp_
                         : *::qihoo::protocol::chatroom::QueryChatRoomIDResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::QueryChatRoomIDResponse* ChatRoomDownToUser::mutable_querychatroomidresp() {
  set_has_querychatroomidresp();
  if (querychatroomidresp_ == NULL) {
    querychatroomidresp_ = new ::qihoo::protocol::chatroom::QueryChatRoomIDResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.querychatroomidresp)
  return querychatroomidresp_;
}
::qihoo::protocol::chatroom::QueryChatRoomIDResponse* ChatRoomDownToUser::release_querychatroomidresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.querychatroomidresp)
  clear_has_querychatroomidresp();
  ::qihoo::protocol::chatroom::QueryChatRoomIDResponse* temp = querychatroomidresp_;
  querychatroomidresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_querychatroomidresp(::qihoo::protocol::chatroom::QueryChatRoomIDResponse* querychatroomidresp) {
  delete querychatroomidresp_;
  querychatroomidresp_ = querychatroomidresp;
  if (querychatroomidresp) {
    set_has_querychatroomidresp();
  } else {
    clear_has_querychatroomidresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.querychatroomidresp)
}

// optional .qihoo.protocol.chatroom.UpdateRoomIDResponse updategameidresp = 10;
bool ChatRoomDownToUser::has_updategameidresp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChatRoomDownToUser::set_has_updategameidresp() {
  _has_bits_[0] |= 0x00000100u;
}
void ChatRoomDownToUser::clear_has_updategameidresp() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChatRoomDownToUser::clear_updategameidresp() {
  if (updategameidresp_ != NULL) updategameidresp_->::qihoo::protocol::chatroom::UpdateRoomIDResponse::Clear();
  clear_has_updategameidresp();
}
const ::qihoo::protocol::chatroom::UpdateRoomIDResponse& ChatRoomDownToUser::updategameidresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.updategameidresp)
  return updategameidresp_ != NULL ? *updategameidresp_
                         : *::qihoo::protocol::chatroom::UpdateRoomIDResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::UpdateRoomIDResponse* ChatRoomDownToUser::mutable_updategameidresp() {
  set_has_updategameidresp();
  if (updategameidresp_ == NULL) {
    updategameidresp_ = new ::qihoo::protocol::chatroom::UpdateRoomIDResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.updategameidresp)
  return updategameidresp_;
}
::qihoo::protocol::chatroom::UpdateRoomIDResponse* ChatRoomDownToUser::release_updategameidresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.updategameidresp)
  clear_has_updategameidresp();
  ::qihoo::protocol::chatroom::UpdateRoomIDResponse* temp = updategameidresp_;
  updategameidresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_updategameidresp(::qihoo::protocol::chatroom::UpdateRoomIDResponse* updategameidresp) {
  delete updategameidresp_;
  updategameidresp_ = updategameidresp;
  if (updategameidresp) {
    set_has_updategameidresp();
  } else {
    clear_has_updategameidresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.updategameidresp)
}

// optional .qihoo.protocol.chatroom.QueryAllGameRoomResponse queryallgameroomresp = 11;
bool ChatRoomDownToUser::has_queryallgameroomresp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChatRoomDownToUser::set_has_queryallgameroomresp() {
  _has_bits_[0] |= 0x00000200u;
}
void ChatRoomDownToUser::clear_has_queryallgameroomresp() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChatRoomDownToUser::clear_queryallgameroomresp() {
  if (queryallgameroomresp_ != NULL) queryallgameroomresp_->::qihoo::protocol::chatroom::QueryAllGameRoomResponse::Clear();
  clear_has_queryallgameroomresp();
}
const ::qihoo::protocol::chatroom::QueryAllGameRoomResponse& ChatRoomDownToUser::queryallgameroomresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.queryallgameroomresp)
  return queryallgameroomresp_ != NULL ? *queryallgameroomresp_
                         : *::qihoo::protocol::chatroom::QueryAllGameRoomResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::QueryAllGameRoomResponse* ChatRoomDownToUser::mutable_queryallgameroomresp() {
  set_has_queryallgameroomresp();
  if (queryallgameroomresp_ == NULL) {
    queryallgameroomresp_ = new ::qihoo::protocol::chatroom::QueryAllGameRoomResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.queryallgameroomresp)
  return queryallgameroomresp_;
}
::qihoo::protocol::chatroom::QueryAllGameRoomResponse* ChatRoomDownToUser::release_queryallgameroomresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.queryallgameroomresp)
  clear_has_queryallgameroomresp();
  ::qihoo::protocol::chatroom::QueryAllGameRoomResponse* temp = queryallgameroomresp_;
  queryallgameroomresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_queryallgameroomresp(::qihoo::protocol::chatroom::QueryAllGameRoomResponse* queryallgameroomresp) {
  delete queryallgameroomresp_;
  queryallgameroomresp_ = queryallgameroomresp;
  if (queryallgameroomresp) {
    set_has_queryallgameroomresp();
  } else {
    clear_has_queryallgameroomresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.queryallgameroomresp)
}

// optional .qihoo.protocol.chatroom.ChatRoomMessageResponse chatroommessageresp = 12;
bool ChatRoomDownToUser::has_chatroommessageresp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ChatRoomDownToUser::set_has_chatroommessageresp() {
  _has_bits_[0] |= 0x00000400u;
}
void ChatRoomDownToUser::clear_has_chatroommessageresp() {
  _has_bits_[0] &= ~0x00000400u;
}
void ChatRoomDownToUser::clear_chatroommessageresp() {
  if (chatroommessageresp_ != NULL) chatroommessageresp_->::qihoo::protocol::chatroom::ChatRoomMessageResponse::Clear();
  clear_has_chatroommessageresp();
}
const ::qihoo::protocol::chatroom::ChatRoomMessageResponse& ChatRoomDownToUser::chatroommessageresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.chatroommessageresp)
  return chatroommessageresp_ != NULL ? *chatroommessageresp_
                         : *::qihoo::protocol::chatroom::ChatRoomMessageResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoomMessageResponse* ChatRoomDownToUser::mutable_chatroommessageresp() {
  set_has_chatroommessageresp();
  if (chatroommessageresp_ == NULL) {
    chatroommessageresp_ = new ::qihoo::protocol::chatroom::ChatRoomMessageResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.chatroommessageresp)
  return chatroommessageresp_;
}
::qihoo::protocol::chatroom::ChatRoomMessageResponse* ChatRoomDownToUser::release_chatroommessageresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.chatroommessageresp)
  clear_has_chatroommessageresp();
  ::qihoo::protocol::chatroom::ChatRoomMessageResponse* temp = chatroommessageresp_;
  chatroommessageresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_chatroommessageresp(::qihoo::protocol::chatroom::ChatRoomMessageResponse* chatroommessageresp) {
  delete chatroommessageresp_;
  chatroommessageresp_ = chatroommessageresp;
  if (chatroommessageresp) {
    set_has_chatroommessageresp();
  } else {
    clear_has_chatroommessageresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.chatroommessageresp)
}

// optional .qihoo.protocol.chatroom.ChatRoomNewMsg newmsgnotify = 13;
bool ChatRoomDownToUser::has_newmsgnotify() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ChatRoomDownToUser::set_has_newmsgnotify() {
  _has_bits_[0] |= 0x00000800u;
}
void ChatRoomDownToUser::clear_has_newmsgnotify() {
  _has_bits_[0] &= ~0x00000800u;
}
void ChatRoomDownToUser::clear_newmsgnotify() {
  if (newmsgnotify_ != NULL) newmsgnotify_->::qihoo::protocol::chatroom::ChatRoomNewMsg::Clear();
  clear_has_newmsgnotify();
}
const ::qihoo::protocol::chatroom::ChatRoomNewMsg& ChatRoomDownToUser::newmsgnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.newmsgnotify)
  return newmsgnotify_ != NULL ? *newmsgnotify_
                         : *::qihoo::protocol::chatroom::ChatRoomNewMsg::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoomNewMsg* ChatRoomDownToUser::mutable_newmsgnotify() {
  set_has_newmsgnotify();
  if (newmsgnotify_ == NULL) {
    newmsgnotify_ = new ::qihoo::protocol::chatroom::ChatRoomNewMsg;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.newmsgnotify)
  return newmsgnotify_;
}
::qihoo::protocol::chatroom::ChatRoomNewMsg* ChatRoomDownToUser::release_newmsgnotify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.newmsgnotify)
  clear_has_newmsgnotify();
  ::qihoo::protocol::chatroom::ChatRoomNewMsg* temp = newmsgnotify_;
  newmsgnotify_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_newmsgnotify(::qihoo::protocol::chatroom::ChatRoomNewMsg* newmsgnotify) {
  delete newmsgnotify_;
  newmsgnotify_ = newmsgnotify;
  if (newmsgnotify) {
    set_has_newmsgnotify();
  } else {
    clear_has_newmsgnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.newmsgnotify)
}

// optional .qihoo.protocol.chatroom.ChatRoomErrorMsg errormsgnotify = 14;
bool ChatRoomDownToUser::has_errormsgnotify() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ChatRoomDownToUser::set_has_errormsgnotify() {
  _has_bits_[0] |= 0x00001000u;
}
void ChatRoomDownToUser::clear_has_errormsgnotify() {
  _has_bits_[0] &= ~0x00001000u;
}
void ChatRoomDownToUser::clear_errormsgnotify() {
  if (errormsgnotify_ != NULL) errormsgnotify_->::qihoo::protocol::chatroom::ChatRoomErrorMsg::Clear();
  clear_has_errormsgnotify();
}
const ::qihoo::protocol::chatroom::ChatRoomErrorMsg& ChatRoomDownToUser::errormsgnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.errormsgnotify)
  return errormsgnotify_ != NULL ? *errormsgnotify_
                         : *::qihoo::protocol::chatroom::ChatRoomErrorMsg::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoomErrorMsg* ChatRoomDownToUser::mutable_errormsgnotify() {
  set_has_errormsgnotify();
  if (errormsgnotify_ == NULL) {
    errormsgnotify_ = new ::qihoo::protocol::chatroom::ChatRoomErrorMsg;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.errormsgnotify)
  return errormsgnotify_;
}
::qihoo::protocol::chatroom::ChatRoomErrorMsg* ChatRoomDownToUser::release_errormsgnotify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.errormsgnotify)
  clear_has_errormsgnotify();
  ::qihoo::protocol::chatroom::ChatRoomErrorMsg* temp = errormsgnotify_;
  errormsgnotify_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_errormsgnotify(::qihoo::protocol::chatroom::ChatRoomErrorMsg* errormsgnotify) {
  delete errormsgnotify_;
  errormsgnotify_ = errormsgnotify;
  if (errormsgnotify) {
    set_has_errormsgnotify();
  } else {
    clear_has_errormsgnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.errormsgnotify)
}

// optional .qihoo.protocol.chatroom.CreateMultiChatRoomResponse createrooms = 15;
bool ChatRoomDownToUser::has_createrooms() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ChatRoomDownToUser::set_has_createrooms() {
  _has_bits_[0] |= 0x00002000u;
}
void ChatRoomDownToUser::clear_has_createrooms() {
  _has_bits_[0] &= ~0x00002000u;
}
void ChatRoomDownToUser::clear_createrooms() {
  if (createrooms_ != NULL) createrooms_->::qihoo::protocol::chatroom::CreateMultiChatRoomResponse::Clear();
  clear_has_createrooms();
}
const ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse& ChatRoomDownToUser::createrooms() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.createrooms)
  return createrooms_ != NULL ? *createrooms_
                         : *::qihoo::protocol::chatroom::CreateMultiChatRoomResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* ChatRoomDownToUser::mutable_createrooms() {
  set_has_createrooms();
  if (createrooms_ == NULL) {
    createrooms_ = new ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.createrooms)
  return createrooms_;
}
::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* ChatRoomDownToUser::release_createrooms() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.createrooms)
  clear_has_createrooms();
  ::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* temp = createrooms_;
  createrooms_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_createrooms(::qihoo::protocol::chatroom::CreateMultiChatRoomResponse* createrooms) {
  delete createrooms_;
  createrooms_ = createrooms;
  if (createrooms) {
    set_has_createrooms();
  } else {
    clear_has_createrooms();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.createrooms)
}

// optional .qihoo.protocol.chatroom.MemberJoinChatRoomNotify memberjoinnotify = 16;
bool ChatRoomDownToUser::has_memberjoinnotify() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ChatRoomDownToUser::set_has_memberjoinnotify() {
  _has_bits_[0] |= 0x00004000u;
}
void ChatRoomDownToUser::clear_has_memberjoinnotify() {
  _has_bits_[0] &= ~0x00004000u;
}
void ChatRoomDownToUser::clear_memberjoinnotify() {
  if (memberjoinnotify_ != NULL) memberjoinnotify_->::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::Clear();
  clear_has_memberjoinnotify();
}
const ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify& ChatRoomDownToUser::memberjoinnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.memberjoinnotify)
  return memberjoinnotify_ != NULL ? *memberjoinnotify_
                         : *::qihoo::protocol::chatroom::MemberJoinChatRoomNotify::internal_default_instance();
}
::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* ChatRoomDownToUser::mutable_memberjoinnotify() {
  set_has_memberjoinnotify();
  if (memberjoinnotify_ == NULL) {
    memberjoinnotify_ = new ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.memberjoinnotify)
  return memberjoinnotify_;
}
::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* ChatRoomDownToUser::release_memberjoinnotify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.memberjoinnotify)
  clear_has_memberjoinnotify();
  ::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* temp = memberjoinnotify_;
  memberjoinnotify_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_memberjoinnotify(::qihoo::protocol::chatroom::MemberJoinChatRoomNotify* memberjoinnotify) {
  delete memberjoinnotify_;
  memberjoinnotify_ = memberjoinnotify;
  if (memberjoinnotify) {
    set_has_memberjoinnotify();
  } else {
    clear_has_memberjoinnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.memberjoinnotify)
}

// optional .qihoo.protocol.chatroom.MemberQuitChatRoomNotify memberquitnotify = 17;
bool ChatRoomDownToUser::has_memberquitnotify() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ChatRoomDownToUser::set_has_memberquitnotify() {
  _has_bits_[0] |= 0x00008000u;
}
void ChatRoomDownToUser::clear_has_memberquitnotify() {
  _has_bits_[0] &= ~0x00008000u;
}
void ChatRoomDownToUser::clear_memberquitnotify() {
  if (memberquitnotify_ != NULL) memberquitnotify_->::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::Clear();
  clear_has_memberquitnotify();
}
const ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify& ChatRoomDownToUser::memberquitnotify() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.memberquitnotify)
  return memberquitnotify_ != NULL ? *memberquitnotify_
                         : *::qihoo::protocol::chatroom::MemberQuitChatRoomNotify::internal_default_instance();
}
::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* ChatRoomDownToUser::mutable_memberquitnotify() {
  set_has_memberquitnotify();
  if (memberquitnotify_ == NULL) {
    memberquitnotify_ = new ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.memberquitnotify)
  return memberquitnotify_;
}
::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* ChatRoomDownToUser::release_memberquitnotify() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.memberquitnotify)
  clear_has_memberquitnotify();
  ::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* temp = memberquitnotify_;
  memberquitnotify_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_memberquitnotify(::qihoo::protocol::chatroom::MemberQuitChatRoomNotify* memberquitnotify) {
  delete memberquitnotify_;
  memberquitnotify_ = memberquitnotify;
  if (memberquitnotify) {
    set_has_memberquitnotify();
  } else {
    clear_has_memberquitnotify();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.memberquitnotify)
}

// optional .qihoo.protocol.chatroom.SubscribeResponse subresp = 18;
bool ChatRoomDownToUser::has_subresp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ChatRoomDownToUser::set_has_subresp() {
  _has_bits_[0] |= 0x00010000u;
}
void ChatRoomDownToUser::clear_has_subresp() {
  _has_bits_[0] &= ~0x00010000u;
}
void ChatRoomDownToUser::clear_subresp() {
  if (subresp_ != NULL) subresp_->::qihoo::protocol::chatroom::SubscribeResponse::Clear();
  clear_has_subresp();
}
const ::qihoo::protocol::chatroom::SubscribeResponse& ChatRoomDownToUser::subresp() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.subresp)
  return subresp_ != NULL ? *subresp_
                         : *::qihoo::protocol::chatroom::SubscribeResponse::internal_default_instance();
}
::qihoo::protocol::chatroom::SubscribeResponse* ChatRoomDownToUser::mutable_subresp() {
  set_has_subresp();
  if (subresp_ == NULL) {
    subresp_ = new ::qihoo::protocol::chatroom::SubscribeResponse;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.subresp)
  return subresp_;
}
::qihoo::protocol::chatroom::SubscribeResponse* ChatRoomDownToUser::release_subresp() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.subresp)
  clear_has_subresp();
  ::qihoo::protocol::chatroom::SubscribeResponse* temp = subresp_;
  subresp_ = NULL;
  return temp;
}
void ChatRoomDownToUser::set_allocated_subresp(::qihoo::protocol::chatroom::SubscribeResponse* subresp) {
  delete subresp_;
  subresp_ = subresp;
  if (subresp) {
    set_has_subresp();
  } else {
    clear_has_subresp();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.subresp)
}

// optional bytes reason = 100;
bool ChatRoomDownToUser::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomDownToUser::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomDownToUser::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomDownToUser::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& ChatRoomDownToUser::reason() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
  return reason_.GetNoArena();
}
void ChatRoomDownToUser::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
}
#if LANG_CXX11
void ChatRoomDownToUser::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
}
#endif
void ChatRoomDownToUser::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
}
void ChatRoomDownToUser::set_reason(const void* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
}
::std::string* ChatRoomDownToUser::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomDownToUser::release_reason() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomDownToUser::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomDownToUser.reason)
}

// repeated .qihoo.protocol.chatroom.ChatRoomMNotify multinotify = 200;
int ChatRoomDownToUser::multinotify_size() const {
  return multinotify_.size();
}
void ChatRoomDownToUser::clear_multinotify() {
  multinotify_.Clear();
}
const ::qihoo::protocol::chatroom::ChatRoomMNotify& ChatRoomDownToUser::multinotify(int index) const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return multinotify_.Get(index);
}
::qihoo::protocol::chatroom::ChatRoomMNotify* ChatRoomDownToUser::mutable_multinotify(int index) {
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return multinotify_.Mutable(index);
}
::qihoo::protocol::chatroom::ChatRoomMNotify* ChatRoomDownToUser::add_multinotify() {
  // @@protoc_insertion_point(field_add:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return multinotify_.Add();
}
::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoomMNotify >*
ChatRoomDownToUser::mutable_multinotify() {
  // @@protoc_insertion_point(field_mutable_list:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return &multinotify_;
}
const ::google::protobuf::RepeatedPtrField< ::qihoo::protocol::chatroom::ChatRoomMNotify >&
ChatRoomDownToUser::multinotify() const {
  // @@protoc_insertion_point(field_list:qihoo.protocol.chatroom.ChatRoomDownToUser.multinotify)
  return multinotify_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomPacket::kRoomidFieldNumber;
const int ChatRoomPacket::kToServerDataFieldNumber;
const int ChatRoomPacket::kToUserDataFieldNumber;
const int ChatRoomPacket::kUuidFieldNumber;
const int ChatRoomPacket::kClientSnFieldNumber;
const int ChatRoomPacket::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomPacket::ChatRoomPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ChatRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qihoo.protocol.chatroom.ChatRoomPacket)
}
ChatRoomPacket::ChatRoomPacket(const ChatRoomPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_roomid()) {
    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_to_server_data()) {
    to_server_data_ = new ::qihoo::protocol::chatroom::ChatRoomUpToServer(*from.to_server_data_);
  } else {
    to_server_data_ = NULL;
  }
  if (from.has_to_user_data()) {
    to_user_data_ = new ::qihoo::protocol::chatroom::ChatRoomDownToUser(*from.to_user_data_);
  } else {
    to_user_data_ = NULL;
  }
  ::memcpy(&client_sn_, &from.client_sn_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&client_sn_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:qihoo.protocol.chatroom.ChatRoomPacket)
}

void ChatRoomPacket::SharedCtor() {
  _cached_size_ = 0;
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&to_server_data_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&to_server_data_) + sizeof(appid_));
}

ChatRoomPacket::~ChatRoomPacket() {
  // @@protoc_insertion_point(destructor:qihoo.protocol.chatroom.ChatRoomPacket)
  SharedDtor();
}

void ChatRoomPacket::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete to_server_data_;
  }
  if (this != internal_default_instance()) {
    delete to_user_data_;
  }
}

void ChatRoomPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomPacket::descriptor() {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomPacket& ChatRoomPacket::default_instance() {
  protobuf_ChatRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomPacket* ChatRoomPacket::New(::google::protobuf::Arena* arena) const {
  ChatRoomPacket* n = new ChatRoomPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:qihoo.protocol.chatroom.ChatRoomPacket)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_roomid()) {
      GOOGLE_DCHECK(!roomid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*roomid_.UnsafeRawStringPointer())->clear();
    }
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_server_data()) {
      GOOGLE_DCHECK(to_server_data_ != NULL);
      to_server_data_->::qihoo::protocol::chatroom::ChatRoomUpToServer::Clear();
    }
    if (has_to_user_data()) {
      GOOGLE_DCHECK(to_user_data_ != NULL);
      to_user_data_->::qihoo::protocol::chatroom::ChatRoomDownToUser::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&client_sn_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&client_sn_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qihoo.protocol.chatroom.ChatRoomPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_server_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_user_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qihoo.protocol.chatroom.ChatRoomPacket.uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_sn = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_client_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qihoo.protocol.chatroom.ChatRoomPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qihoo.protocol.chatroom.ChatRoomPacket)
  return false;
#undef DO_
}

void ChatRoomPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qihoo.protocol.chatroom.ChatRoomPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->roomid(), output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->to_server_data_, output);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->to_user_data_, output);
  }

  // optional string uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.ChatRoomPacket.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // optional uint64 client_sn = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->client_sn(), output);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qihoo.protocol.chatroom.ChatRoomPacket)
}

::google::protobuf::uint8* ChatRoomPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qihoo.protocol.chatroom.ChatRoomPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->to_server_data_, deterministic, target);
  }

  // optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->to_user_data_, deterministic, target);
  }

  // optional string uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qihoo.protocol.chatroom.ChatRoomPacket.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // optional uint64 client_sn = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->client_sn(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qihoo.protocol.chatroom.ChatRoomPacket)
  return target;
}

size_t ChatRoomPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qihoo.protocol.chatroom.ChatRoomPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }
  if (_has_bits_[0 / 32] & 62u) {
    // optional string uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
    if (has_to_server_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_server_data_);
    }

    // optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
    if (has_to_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_user_data_);
    }

    // optional uint64 client_sn = 5;
    if (has_client_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_sn());
    }

    // optional uint32 appid = 6;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qihoo.protocol.chatroom.ChatRoomPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qihoo.protocol.chatroom.ChatRoomPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qihoo.protocol.chatroom.ChatRoomPacket)
    MergeFrom(*source);
  }
}

void ChatRoomPacket::MergeFrom(const ChatRoomPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qihoo.protocol.chatroom.ChatRoomPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_to_server_data()->::qihoo::protocol::chatroom::ChatRoomUpToServer::MergeFrom(from.to_server_data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_to_user_data()->::qihoo::protocol::chatroom::ChatRoomDownToUser::MergeFrom(from.to_user_data());
    }
    if (cached_has_bits & 0x00000010u) {
      client_sn_ = from.client_sn_;
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qihoo.protocol.chatroom.ChatRoomPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomPacket::CopyFrom(const ChatRoomPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qihoo.protocol.chatroom.ChatRoomPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_to_server_data()) {
    if (!this->to_server_data_->IsInitialized()) return false;
  }
  if (has_to_user_data()) {
    if (!this->to_user_data_->IsInitialized()) return false;
  }
  return true;
}

void ChatRoomPacket::Swap(ChatRoomPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomPacket::InternalSwap(ChatRoomPacket* other) {
  roomid_.Swap(&other->roomid_);
  uuid_.Swap(&other->uuid_);
  std::swap(to_server_data_, other->to_server_data_);
  std::swap(to_user_data_, other->to_user_data_);
  std::swap(client_sn_, other->client_sn_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomPacket::GetMetadata() const {
  protobuf_ChatRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ChatRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomPacket

// required bytes roomid = 1;
bool ChatRoomPacket::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomPacket::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomPacket::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomPacket::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
const ::std::string& ChatRoomPacket::roomid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
  return roomid_.GetNoArena();
}
void ChatRoomPacket::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
}
#if LANG_CXX11
void ChatRoomPacket::set_roomid(::std::string&& value) {
  set_has_roomid();
  roomid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
}
#endif
void ChatRoomPacket::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
}
void ChatRoomPacket::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
}
::std::string* ChatRoomPacket::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomPacket::release_roomid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomPacket::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomPacket.roomid)
}

// optional .qihoo.protocol.chatroom.ChatRoomUpToServer to_server_data = 2;
bool ChatRoomPacket::has_to_server_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoomPacket::set_has_to_server_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoomPacket::clear_has_to_server_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoomPacket::clear_to_server_data() {
  if (to_server_data_ != NULL) to_server_data_->::qihoo::protocol::chatroom::ChatRoomUpToServer::Clear();
  clear_has_to_server_data();
}
const ::qihoo::protocol::chatroom::ChatRoomUpToServer& ChatRoomPacket::to_server_data() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.to_server_data)
  return to_server_data_ != NULL ? *to_server_data_
                         : *::qihoo::protocol::chatroom::ChatRoomUpToServer::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoomUpToServer* ChatRoomPacket::mutable_to_server_data() {
  set_has_to_server_data();
  if (to_server_data_ == NULL) {
    to_server_data_ = new ::qihoo::protocol::chatroom::ChatRoomUpToServer;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomPacket.to_server_data)
  return to_server_data_;
}
::qihoo::protocol::chatroom::ChatRoomUpToServer* ChatRoomPacket::release_to_server_data() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomPacket.to_server_data)
  clear_has_to_server_data();
  ::qihoo::protocol::chatroom::ChatRoomUpToServer* temp = to_server_data_;
  to_server_data_ = NULL;
  return temp;
}
void ChatRoomPacket::set_allocated_to_server_data(::qihoo::protocol::chatroom::ChatRoomUpToServer* to_server_data) {
  delete to_server_data_;
  to_server_data_ = to_server_data;
  if (to_server_data) {
    set_has_to_server_data();
  } else {
    clear_has_to_server_data();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomPacket.to_server_data)
}

// optional .qihoo.protocol.chatroom.ChatRoomDownToUser to_user_data = 3;
bool ChatRoomPacket::has_to_user_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatRoomPacket::set_has_to_user_data() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatRoomPacket::clear_has_to_user_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatRoomPacket::clear_to_user_data() {
  if (to_user_data_ != NULL) to_user_data_->::qihoo::protocol::chatroom::ChatRoomDownToUser::Clear();
  clear_has_to_user_data();
}
const ::qihoo::protocol::chatroom::ChatRoomDownToUser& ChatRoomPacket::to_user_data() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.to_user_data)
  return to_user_data_ != NULL ? *to_user_data_
                         : *::qihoo::protocol::chatroom::ChatRoomDownToUser::internal_default_instance();
}
::qihoo::protocol::chatroom::ChatRoomDownToUser* ChatRoomPacket::mutable_to_user_data() {
  set_has_to_user_data();
  if (to_user_data_ == NULL) {
    to_user_data_ = new ::qihoo::protocol::chatroom::ChatRoomDownToUser;
  }
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomPacket.to_user_data)
  return to_user_data_;
}
::qihoo::protocol::chatroom::ChatRoomDownToUser* ChatRoomPacket::release_to_user_data() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomPacket.to_user_data)
  clear_has_to_user_data();
  ::qihoo::protocol::chatroom::ChatRoomDownToUser* temp = to_user_data_;
  to_user_data_ = NULL;
  return temp;
}
void ChatRoomPacket::set_allocated_to_user_data(::qihoo::protocol::chatroom::ChatRoomDownToUser* to_user_data) {
  delete to_user_data_;
  to_user_data_ = to_user_data;
  if (to_user_data) {
    set_has_to_user_data();
  } else {
    clear_has_to_user_data();
  }
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomPacket.to_user_data)
}

// optional string uuid = 4;
bool ChatRoomPacket::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomPacket::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomPacket::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomPacket::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& ChatRoomPacket::uuid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
  return uuid_.GetNoArena();
}
void ChatRoomPacket::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
}
#if LANG_CXX11
void ChatRoomPacket::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
}
#endif
void ChatRoomPacket::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
}
void ChatRoomPacket::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
}
::std::string* ChatRoomPacket::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomPacket::release_uuid() {
  // @@protoc_insertion_point(field_release:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomPacket::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:qihoo.protocol.chatroom.ChatRoomPacket.uuid)
}

// optional uint64 client_sn = 5;
bool ChatRoomPacket::has_client_sn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatRoomPacket::set_has_client_sn() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatRoomPacket::clear_has_client_sn() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatRoomPacket::clear_client_sn() {
  client_sn_ = GOOGLE_ULONGLONG(0);
  clear_has_client_sn();
}
::google::protobuf::uint64 ChatRoomPacket::client_sn() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.client_sn)
  return client_sn_;
}
void ChatRoomPacket::set_client_sn(::google::protobuf::uint64 value) {
  set_has_client_sn();
  client_sn_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomPacket.client_sn)
}

// optional uint32 appid = 6;
bool ChatRoomPacket::has_appid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatRoomPacket::set_has_appid() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatRoomPacket::clear_has_appid() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatRoomPacket::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 ChatRoomPacket::appid() const {
  // @@protoc_insertion_point(field_get:qihoo.protocol.chatroom.ChatRoomPacket.appid)
  return appid_;
}
void ChatRoomPacket::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:qihoo.protocol.chatroom.ChatRoomPacket.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chatroom
}  // namespace protocol
}  // namespace qihoo

// @@protoc_insertion_point(global_scope)
